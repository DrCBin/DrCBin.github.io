<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DrCBin-陈斌</title>
    <description>陈斌的个人博客</description>
    <link>http://drcbin.com/</link>
    <atom:link href="http://drcbin.com/sitemap.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 29 Nov 2017 16:39:18 +0800</pubDate>
    <lastBuildDate>Wed, 29 Nov 2017 16:39:18 +0800</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>2017-11-28</title>
        <description>&lt;h1 id=&quot;十一月二十八日&quot;&gt;十一月二十八日&lt;/h1&gt;

&lt;h2 id=&quot;干的事&quot;&gt;干的事&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;刷数据结构: 花了两天的时间,终于写出来了队列和树…&lt;/li&gt;
  &lt;li&gt;续上了断了好久的每天记录&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;感想与总结&quot;&gt;感想与总结&lt;/h2&gt;

&lt;h3 id=&quot;继续保持的地方&quot;&gt;继续保持的地方&lt;/h3&gt;

&lt;p&gt;怎么说呢,感觉这两天花的时间挺多, 但是回过头来看,却又发现其实就做了那么点东西!&lt;/p&gt;

&lt;p&gt;总结下来就是—以前的基础不怎么牢固! 以前并没有深入理解!&lt;/p&gt;

&lt;p&gt;这两天自己用C语言写的东西, 感受到了指针的强大(以前知道,但没感受出来)!&lt;/p&gt;

&lt;p&gt;虽然做出来的东西不多,但收获还是不少的!&lt;/p&gt;

&lt;h3 id=&quot;不足的地方&quot;&gt;不足的地方&lt;/h3&gt;

&lt;p&gt;大三基本没课了, 没有了课程的约束,发现自己懒了不少! 特别是游戏,又开始玩得多起来了!&lt;/p&gt;

&lt;p&gt;虽然每天都会坚持学习,但和有课的时间比起来,学习的强度和持久度还是不够的!&lt;/p&gt;

&lt;p&gt;记得当初课很多的时候,总觉得时间不够,希望没有课,能自己好好学习！如今课没了,时间却又这么一点点浪费了!&lt;/p&gt;
</description>
        <pubDate>Wed, 29 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/daily/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/daily/</guid>
        
        <category>吾日三省吾身</category>
        
        
        <category>Daily</category>
        
      </item>
    
      <item>
        <title>2017-11-10</title>
        <description>&lt;p&gt;#十一月十号&lt;/p&gt;

&lt;h2 id=&quot;干的事儿&quot;&gt;干的事儿&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;和学长聊天&lt;/li&gt;
  &lt;li&gt;上了两节课&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;收获与感想&quot;&gt;收获与感想&lt;/h2&gt;

&lt;h3 id=&quot;1-资源很重要&quot;&gt;1. 资源很重要&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;今天和学长聊了挺多, 也更加让自己清楚的认识到,资源很重要！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;记得我刚上大一那会儿, 骨子里带着的自傲，老子可牛逼了！  没让现实狠狠的扇两耳光不知道什么叫羞耻！&lt;/p&gt;

&lt;p&gt;不懂事的时候,抱着自己牛逼就够了， 别人自然会来找我， 花那么多时间累积资源和人脉有个屁用 的想法！&lt;/p&gt;

&lt;p&gt;后来才明白， 没有资源和人脉， 你自己怎么都很难牛逼起来！&lt;/p&gt;

&lt;p&gt;现在已经大三了， 明白得似乎有些晚了！希望自己现在开始,&lt;strong&gt;利用好自己周边的好资源, 放低自己的姿态， 打开自己心里阳光的一面， 多用心去和别人交流， 多去交朋友&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;多去和老师学长们交流沟通, 毕竟大家都是过来人，指条路总比自己去走弯路好得多!&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-考研的心又开始动摇了&quot;&gt;2. 考研的心又开始动摇了&lt;/h3&gt;

&lt;p&gt;今天从学长那儿了解到， 考上研究生的福利，以及结合到未来对能力和学历的需求， 自己考研的心又动摇了！&lt;/p&gt;

&lt;p&gt;我从大一入学还是就是决定打死都不考研的！ 因为这种心态， 导致除了撸代码， 其他什么都可以不管不顾， 大一下学期一下挂了五科…大二懂事了，也就没有挂科了！&lt;/p&gt;

&lt;p&gt;可是慢慢的， 大一那颗坚定的心开始动摇了… 也再开始想着如果考研的可能了！&lt;/p&gt;

&lt;p&gt;很纠结, 想继续考研， 可是有想体验社会一把！ 所以目前的打算是大四休学一年来工作， 然后继续回来读大四! 也不知道这个想法能如何!&lt;/p&gt;

&lt;h3 id=&quot;3-餐桌上的小举动&quot;&gt;3. 餐桌上的小举动&lt;/h3&gt;

&lt;p&gt;今天和学长一起吃的晚餐!&lt;/p&gt;

&lt;p&gt;一起点的饭， 学长的先好， 我的后好！&lt;/p&gt;

&lt;p&gt;学长取完饭之后， 拿了筷子和勺子， 顺便连我的也一起拿了！&lt;/p&gt;

&lt;p&gt;学长把筷子和勺子放好之后,&lt;strong&gt;并没有开吃， 而是等着我的也好了之后才一起吃&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;这是自己从来没有留意过的细节, 希望以后自己也能多多留意这些小的习惯!&lt;/p&gt;

&lt;h3 id=&quot;4-给自己定个4级小目标&quot;&gt;4. 给自己定个4级小目标&lt;/h3&gt;

&lt;p&gt;还有一个月就要考四级了， 可是自己并没有复习!&lt;/p&gt;

&lt;p&gt;希望接下来的这一个月， 不要太过于忙其他的， 冲刺一下四级！&lt;/p&gt;

&lt;p&gt;英语的学习不要断啊.&lt;/p&gt;

&lt;h3 id=&quot;5-课堂时间的利用率&quot;&gt;5. 课堂时间的利用率&lt;/h3&gt;

&lt;p&gt;从大二以来， 课堂时间的利用率就非常的差， 或者说上大学以来都是吧！ 可是自己以前并没有留意到这个问题！&lt;/p&gt;

&lt;p&gt;对于自己已经明白的课程， 可以不听， 但请自己也不要玩手机或者发呆！ 做一些其他的事儿， 比如看看书， 刷刷题， 或者往后深入学一下内容！&lt;/p&gt;

&lt;p&gt;对于自己不想听或者听不进去的课程， 也是一样…&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/daily/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/daily/</guid>
        
        <category>吾日三省吾身</category>
        
        
        <category>Daily</category>
        
      </item>
    
      <item>
        <title>2017-11-07</title>
        <description>
</description>
        <pubDate>Tue, 07 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/daily/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/daily/</guid>
        
        <category>吾日三省吾身</category>
        
        
        <category>Daily</category>
        
      </item>
    
      <item>
        <title>2017-11-06</title>
        <description>&lt;h1 id=&quot;十一月六号&quot;&gt;十一月六号&lt;/h1&gt;

&lt;h2 id=&quot;干的事&quot;&gt;干的事&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;写了关于想法的计划书&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;想法&quot;&gt;想法&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;不写了,睡觉&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 06 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/daily/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/daily/</guid>
        
        <category>吾日三省吾身</category>
        
        
        <category>Daily</category>
        
      </item>
    
      <item>
        <title>2017-11-05</title>
        <description>&lt;h1 id=&quot;十一月五号&quot;&gt;十一月五号&lt;/h1&gt;

&lt;h2 id=&quot;干的事&quot;&gt;干的事&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;给学妹们讲了一上午的东西&lt;/li&gt;
  &lt;li&gt;重新写了爬取学校教务系统的代码&lt;/li&gt;
  &lt;li&gt;实现了用js模拟器登录学校的校园网自助服务网站&lt;/li&gt;
  &lt;li&gt;买了两只兔子,陪女票溜了一个半小时的兔子&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;知识收获&quot;&gt;知识收获&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;学会了使用代码来模拟浏览器&lt;/li&gt;
  &lt;li&gt;再一次觉得以前写的代码丑, 对代码的理解又提高了一些&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;时间分配&quot;&gt;时间分配&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;八点半起床…还导致迟到了10分钟&lt;/li&gt;
  &lt;li&gt;给学妹讲东西到12:30&lt;/li&gt;
  &lt;li&gt;去机房呆到15:00&lt;/li&gt;
  &lt;li&gt;回来吃饭,磨磨蹭蹭到16:30去机房…路上买了两只兔子，顺便溜了一会儿&lt;/li&gt;
  &lt;li&gt;写代码到20:30&lt;/li&gt;
  &lt;li&gt;溜了一个小时兔子&lt;/li&gt;
  &lt;li&gt;回来洗衣服,给兔子安家,然后收拾睡觉了,今天早点睡&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;感想与总结&quot;&gt;感想与总结&lt;/h2&gt;

&lt;h3 id=&quot;关于给学妹们讲东西&quot;&gt;关于给学妹们讲东西&lt;/h3&gt;

&lt;p&gt;已经连续3周给学妹们讲东西了,但是感觉结果远远达不到想象中的.&lt;/p&gt;

&lt;p&gt;一开始是不打算讲的,因为学习是个必须的过程,我也一直提倡学会学习,作为学长,更多的是帮他们指指路,引领着他们学习!&lt;/p&gt;

&lt;p&gt;但最后觉得讲东西能来得快点,加上学妹们自己要求,便给他们讲了&lt;/p&gt;

&lt;p&gt;慢慢的发现,没有循序渐进的过程,没有一点一点的沉淀, 导致他们对输入的东西只能一直半解,并不能融会贯通,灵活运用, 换个情况就没法解决了!&lt;/p&gt;

&lt;p&gt;加上由于外界的强行输入,并非自己内心的强烈渴望, 自己下来也很少会刻意的去深入理解, 从而慢慢的感觉偏离想象中的结果!&lt;/p&gt;

&lt;p&gt;而作为给他们讲的学长,我自己觉得虽然讲了一上午3、4个小时,但讲授的内容远没有他们自己用心一个小时的收获多和扎实.&lt;/p&gt;

&lt;p&gt;或许该尝试下布置一些任务,给出关键说明,让她们自己一点一点解决,这样能形成一个知识体系,效果会更好&lt;/p&gt;

&lt;h3 id=&quot;关于自己&quot;&gt;关于自己&lt;/h3&gt;

&lt;p&gt;今天晚上虽然时间上花了4小时学习,但真实用好的时间可能就一小时左右,因为兔兔实在太萌了…总是忍不住去玩去看.&lt;/p&gt;

&lt;p&gt;今天也没发生什么值得记录感想的事, 还是感觉时间利用率不高, 又或者是知识弄明白了觉得简单, 总之就是回过来看, 感觉付出的时间和收获的知识是不匹配的.&lt;/p&gt;

&lt;p&gt;再一个,还就没有读英语了,自从10月中旬赶大创开始,希望慢慢捡起来!&lt;/p&gt;

&lt;p&gt;今天去称体重,涨了1.5KG…….&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/daily/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/daily/</guid>
        
        <category>吾日三省吾身</category>
        
        
        <category>Daily</category>
        
      </item>
    
      <item>
        <title>2017-11-04</title>
        <description>&lt;h1 id=&quot;十一月四号&quot;&gt;十一月四号&lt;/h1&gt;

&lt;h2 id=&quot;干的事儿&quot;&gt;干的事儿&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;早上一节课&lt;/li&gt;
  &lt;li&gt;下课回来做饭吃&lt;/li&gt;
  &lt;li&gt;然后和女票去开发区看了场电影&lt;/li&gt;
  &lt;li&gt;晚上回来打了三把游戏.输了两把…&lt;/li&gt;
  &lt;li&gt;最后花了两小时,看了一下爬虫教程&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;学到的知识&quot;&gt;学到的知识&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;今天的晚上两小时学习,学会使用了代理,也慢慢摸清了使用带以及大体了解了如何维护一个自己的代理池&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;感想或想说的&quot;&gt;感想或想说的&lt;/h2&gt;

&lt;p&gt;今天和女票去看了场电影,[&lt;相爱相亲&gt;](https://movie.douban.com/subject/26773744/?from=playing_poster)&lt;/相爱相亲&gt;&lt;/p&gt;

&lt;p&gt;总体来说,感觉剧情一般般,没什么吸引人的地方. 但很真实， 很贴近生活, 演得也很走❤, 有些感动&lt;/p&gt;

&lt;p&gt;最让我感动的是当男主买车,在学校门口接女主一起去兜风时,在车上的那段！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;男主说起了电台正在放的音乐,是他们年轻时候在火车上听到的音乐&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;男主说买车,是为了带女主去兜兜风,因为女主年轻的时候说过以后想有自己的一辆车,一起去兜兜风&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;而女主已然因为生活而奔波,为了生活而劳累,全然忘了所谓的年时说的轻&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;而我自己,也希望自己和另一半在上了年纪以后,还能记得年轻时说的,不用那么拼, 花点时间来爱自己,来享受生活. 繁琐事儿得过且过.相信会过得很幸福!&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/daily/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/daily/</guid>
        
        <category>吾日三省吾身</category>
        
        
        <category>Daily</category>
        
      </item>
    
      <item>
        <title>2017-11-03</title>
        <description>&lt;h1 id=&quot;十一月三号&quot;&gt;十一月三号&lt;/h1&gt;

&lt;h2 id=&quot;干的事&quot;&gt;干的事&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;完成了实验楼基于flask和爬虫开发的微信工作号,能回复笑话。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;时间利用&quot;&gt;时间利用&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;早上睡到9:30…&lt;/li&gt;
  &lt;li&gt;第一节课开始做实验楼小项目&lt;/li&gt;
  &lt;li&gt;中午继续做了一中午…&lt;/li&gt;
  &lt;li&gt;下午第二节课还是在接着做…&lt;/li&gt;
  &lt;li&gt;下午下课后直接回来吃饭,然后没有做事情&lt;/li&gt;
  &lt;li&gt;9点左右花了一个半小时完成了实验楼的小项目…&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;学到的东西&quot;&gt;学到的东西&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;第一次使用flask,感觉很轻,很简洁&lt;/li&gt;
  &lt;li&gt;学会了使用ngrok将本地ip映射到外网&lt;/li&gt;
  &lt;li&gt;基于昨天学习的内容,熟悉了beautifulsoup来解析html&lt;/li&gt;
  &lt;li&gt;大体了解了微信公众平台的开发流程&lt;/li&gt;
  &lt;li&gt;顺带复习了一把简单爬虫…&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;感想&quot;&gt;感想&lt;/h2&gt;

&lt;p&gt;今天有两节课,上午第二节和下午第一节.上午睡到了9:30起床,非常懒…
上课的时候开始写的实验楼小项目,花了一节课,一个中午,下午一节课都没有写完…也不知道白天怎么回事.
还是晚上回来加了一小时班才写完的….&lt;/p&gt;

&lt;p&gt;不知道是初次接触还是什么原因,反正今天的这个小项目进度特别慢,今天就属于一事无成…&lt;/p&gt;

</description>
        <pubDate>Fri, 03 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/daily/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/daily/</guid>
        
        <category>吾日三省吾身</category>
        
        
        <category>Daily</category>
        
      </item>
    
      <item>
        <title>2017-11-02</title>
        <description>&lt;h1 id=&quot;十一月二号&quot;&gt;十一月二号&lt;/h1&gt;

&lt;h2 id=&quot;干的事&quot;&gt;干的事&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;完成了实验楼的爬淘宝模特的小项目&lt;/li&gt;
  &lt;li&gt;给女朋友送了束花,第一次玩点浪漫,毕竟生日&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;时间分配&quot;&gt;时间分配&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;早上第一节逃课…睡到10点半&lt;/li&gt;
  &lt;li&gt;起床后直接去工作室&lt;/li&gt;
  &lt;li&gt;中午开了个工作室会&lt;/li&gt;
  &lt;li&gt;下午第一节英语课&lt;/li&gt;
  &lt;li&gt;下课后回来吃饭,4点又去了工作室&lt;/li&gt;
  &lt;li&gt;呆到7点回来,中途什么都没做,就使劲玩,顺便开了个小会&lt;/li&gt;
  &lt;li&gt;回来后写了实验楼的爬虫项目&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;学习与收获&quot;&gt;学习与收获&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;认识了浏览器模拟工具,无头浏览器 PhantomJS   // 模拟浏览器用的,能加载代码,运行js, 像是浏览器工具&lt;/li&gt;
  &lt;li&gt;认识了浏览器操作工具 Selenium   // 操作浏览器用的,能访问网址,分析源码等, 像是使用浏览器的人&lt;/li&gt;
  &lt;li&gt;接触了beautifulsoup,并且知道了html解析器…// html5lib&lt;/li&gt;
  &lt;li&gt;简单使用了多进程,虽然并没深入明白&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;感想&quot;&gt;感想&lt;/h2&gt;

&lt;p&gt;时间利用严重不足,浪费过多&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/daily/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/daily/</guid>
        
        <category>吾日三省吾身</category>
        
        
        <category>Daily</category>
        
      </item>
    
      <item>
        <title>近期做项目的总结</title>
        <description>&lt;h1 id=&quot;各个model之间的关系不要涉及到实例&quot;&gt;各个model之间的关系不要涉及到实例&lt;/h1&gt;

&lt;p&gt;在项目中,有个Comment模型, 它有一个status属性,选择为(‘public’, ‘delete’, ‘draft’)三个选择. 当一个Comment调用save方法的时候,会去检查配置中有没有开启评论审核,从而确定一个新评论的状态!&lt;/p&gt;

&lt;p&gt;但是,配置Config也是一个实例。&lt;/p&gt;

&lt;p&gt;并且,在检查配置的过程中用到Config实例.  也就是说,Comment.save()方法涉及到了另一个Model实例!是实例! 这个在同步数据库的时候是要出问题的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;除了直接联系,还要考虑间接联系&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;比如我在做项目时,有一个信号量  @receiver(post__save)  这个在同步数据库的时候也会调用这个这个信号接收函数,但是这个函数里面涉及到了和其他实例之间的耦合.从而导致数据库同步失败&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@receiver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;comment_saved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;valid_config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_valid_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'draft'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valid_config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check_comment&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'public'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 而get_valid_config()需要一个Config实例&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;在所有的操作中一定要考虑失败了怎么办&quot;&gt;在所有的操作中,一定要考虑失败了怎么办&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;在之前的代码中,通常会获取一个实例,并且用try块包围,如果获取失败了就出异常
 但是很多情况下只能给出报错信息.并不能处理。
 比如之前会获取config,就应该想到如果获取失败了返回什么&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在使用valid_config 的时候就应该想到， 如果没有Config, 该怎么处理&lt;/p&gt;

&lt;p&gt;最好在使用之前进行一下判断&lt;/p&gt;
</description>
        <pubDate>Thu, 28 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/%E8%BF%91%E6%9C%9F%E5%81%9A%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%80%BB%E7%BB%93/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/%E8%BF%91%E6%9C%9F%E5%81%9A%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%80%BB%E7%BB%93/</guid>
        
        <category>none</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>Django学习之进阶-实例与Model,字符串与Model之间的转换</title>
        <description>&lt;h1 id=&quot;已知实例-获取model名字&quot;&gt;已知实例, 获取Model名字&lt;/h1&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 假设已知实例为book, Model&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'Book'&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# 成功获取&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;已知model-获取model名字&quot;&gt;已知Model, 获取Model名字&lt;/h1&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'Book'&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# 成功获取&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;已知model名字获取model&quot;&gt;已知model名字,获取model&lt;/h1&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# model名字:'Book', app名字:'app'&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 方法一&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.apps&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apps&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app_label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Book'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;gt;   # 获取成功&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;# 方法二&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;gt;&amp;gt;&amp;gt; from django.contrib.fields import ContentType&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;gt;&amp;gt;&amp;gt; content_model = ContentType.objects.get(app_label='&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;', model='&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;')   # 一定要小写的model名&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;gt;&amp;gt;&amp;gt; model = content_model.model_class()&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;gt;&amp;gt;&amp;gt; model&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;class '&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;gt;   # 获取成功&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;已知model获取app_label&quot;&gt;已知model,获取app_label&lt;/h1&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# model:Book,app名字:app&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app_label&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'app'&lt;/span&gt;              &lt;span class=&quot;c&quot;&gt;# 获取成功&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 18 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/Django%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%BF%9B%E9%98%B6-%E5%AE%9E%E4%BE%8B%E4%B8%8EModel,%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8EModel%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/Django%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%BF%9B%E9%98%B6-%E5%AE%9E%E4%BE%8B%E4%B8%8EModel,%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8EModel%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/</guid>
        
        <category>django</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>OS复习之第一章--操作系统的概念</title>
        <description>&lt;h2 id=&quot;一什么是操作系统&quot;&gt;一,什么是操作系统&lt;/h2&gt;

&lt;h3 id=&quot;11-操作系统软件&quot;&gt;1.1 操作系统软件&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;解释: 操作系统可以作为最基本的系统软件,是硬件和软件之间的接口，是人机交互的接口.&lt;/li&gt;
  &lt;li&gt;地位:操作系统是硬件的第一次扩充，在这一层上实现了操作系统的全部功能.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;12-os作为资源管理器&quot;&gt;1.2 OS作为资源管理器&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;解释: OS能作为资源管理器,能跟踪资源的使用情况,满足用户对资源的请求,提高系统利用率.&lt;/li&gt;
  &lt;li&gt;作用:
    &lt;ul&gt;
      &lt;li&gt;跟踪资源&lt;/li&gt;
      &lt;li&gt;分配资源&lt;/li&gt;
      &lt;li&gt;回收资源&lt;/li&gt;
      &lt;li&gt;保护资源&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;采用资源管理器的观点将计算机分类:
    &lt;ul&gt;
      &lt;li&gt;处理机&lt;/li&gt;
      &lt;li&gt;存储器&lt;/li&gt;
      &lt;li&gt;I/O设备&lt;/li&gt;
      &lt;li&gt;信息&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;13-os作为虚拟机&quot;&gt;1.3 OS作为虚拟机&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;解释: 用户利用OS,使得硬件和程序隔离开,这过程建立一种高度的抽象.OS为用户提供命令接口和编程接口,使得OS被抽象来作为一种虚拟机.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;总结:&lt;/strong&gt;OS是控制和管理计算机系统&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/OS%E5%A4%8D%E4%B9%A0-%E7%BB%AA%E8%AE%BA/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/OS%E5%A4%8D%E4%B9%A0-%E7%BB%AA%E8%AE%BA/</guid>
        
        <category>none</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>Django学习之进阶--多表Model继承时的名字冲突</title>
        <description>&lt;p&gt;django的model多继承时,父类会有子类的model名的小写作为字段.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.db&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 07 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/Django%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%BF%9B%E9%98%B6-%E5%A4%9A%E8%A1%A8Model%E7%BB%A7%E6%89%BF%E6%97%B6%E5%90%8D%E5%AD%97%E5%86%B2%E7%AA%81/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/Django%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%BF%9B%E9%98%B6-%E5%A4%9A%E8%A1%A8Model%E7%BB%A7%E6%89%BF%E6%97%B6%E5%90%8D%E5%AD%97%E5%86%B2%E7%AA%81/</guid>
        
        <category>django</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>Django学习之进阶--使用自定义表管理ManyToMany关系</title>
        <description>&lt;p&gt;django中,当我们定义&lt;code class=&quot;highlighter-rouge&quot;&gt;ManyToMany&lt;/code&gt;关系的时候,会自动创建一张表来管理这个关系,但是自动创建的表非常简单,就只有&lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;from&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;to&lt;/code&gt;三个字段，更多时候,我们需要更加具体更多的取管理这个关系,就得自定义表.&lt;/p&gt;

&lt;p&gt;想想公司和员工之间的关系,一家公司有多个员工,一个员工也可能同时为好几家公司工作.这便是典型的&lt;code class=&quot;highlighter-rouge&quot;&gt;ManyToMany&lt;/code&gt;关系.&lt;/p&gt;

&lt;p&gt;但是通过上述信息,我们仅仅能知道这个员工在哪几家公司,或者哪家公司有哪些员工.&lt;/p&gt;

&lt;p&gt;如果我想问:a员工在A公司的薪水是多少?是啥时候入职的?是什么职务?等等..这些信息.应该定义在哪儿？公司？还是员工？&lt;/p&gt;

&lt;p&gt;显然都不是.现实生活中是使用另一个东西来记录的–档案.档案,链接这员工和公司,记录这他们的相关信息.&lt;/p&gt;

&lt;p&gt;而这个档案,就是我们需要自定义的表&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Comp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Staff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ManyToManyField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Comp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;related_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;u'staffs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;through&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'CompStaff'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;through_fields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'staff'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'comp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; 
    &lt;span class=&quot;c&quot;&gt;# 通过through指定关联表&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# through_fields的作用是指定哪两个字段进行关联,如果中介表中只有两个外键,可以不写&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CompStaff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''
    用于关联Comp和Staff的表
    '''&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;staff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ForeignKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Staff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# 注意,下面有两个指向Comp,django不知道选那个作为关联,需要在在ManyToMany关系创建处指定&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;last_comp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ForeignKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Comp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ForeignKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Comp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;date_join&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 07 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/Django%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%BF%9B%E9%98%B6-%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A1%A8%E7%AE%A1%E7%90%86ManyToMany%E5%85%B3%E7%B3%BB/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/Django%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%BF%9B%E9%98%B6-%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A1%A8%E7%AE%A1%E7%90%86ManyToMany%E5%85%B3%E7%B3%BB/</guid>
        
        <category>django</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>Django学习之基础--关系字段选项`related_name`的用法于作用</title>
        <description>&lt;p&gt;关系字段选项:&lt;code class=&quot;highlighter-rouge&quot;&gt;related_name&lt;/code&gt;,只能作用于关系字段&lt;code class=&quot;highlighter-rouge&quot;&gt;ForeignKeyField&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;ManyToManField&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;作用:当&lt;code class=&quot;highlighter-rouge&quot;&gt;一个模型&lt;/code&gt;使用关系字段去关联&lt;code class=&quot;highlighter-rouge&quot;&gt;另一个模型&lt;/code&gt;时,其中&lt;code class=&quot;highlighter-rouge&quot;&gt;一个模型&lt;/code&gt;为主动关联的模型,&lt;code class=&quot;highlighter-rouge&quot;&gt;另一个模型&lt;/code&gt;为被动关联的模型.很自然的能从主动模型中查寻到关联了哪个模型.但是为了能从被关联模型中追溯有那些模型关联了他,这就是&lt;code class=&quot;highlighter-rouge&quot;&gt;related_name&lt;/code&gt;的作用.从被关联模型中反向追溯主动关联他的模型&lt;/p&gt;

&lt;p&gt;不想反向追溯: 如果你的模型没有反向追溯的必要,你也可以不要反向追溯,只需设置值以&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;结尾就行:&lt;code class=&quot;highlighter-rouge&quot;&gt;related_name='+'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;不添加这个字段选项: 如果你没有手动添加这个字段选项,那么被关联对象会自动以&lt;code class=&quot;highlighter-rouge&quot;&gt;主动关联模型名字_set&lt;/code&gt;的形式设置值&lt;/p&gt;

&lt;h3 id=&quot;基础用法&quot;&gt;基础用法&lt;/h3&gt;

&lt;p&gt;用法: 添加字段选项&lt;code class=&quot;highlighter-rouge&quot;&gt;related_name='name'&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;调用: 在被关联对象中调用&lt;code class=&quot;highlighter-rouge&quot;&gt;ModelName.name&lt;/code&gt;即可反向追溯.&lt;/p&gt;

&lt;p&gt;eg:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.db&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ForeignKeyField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;related_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'books'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Auth.books便课反向追溯到它本人有哪些书&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'chenbin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anme&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'book1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anme&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'book2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 写法不对,重在表达意思&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 反向追溯有那些书&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'book1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'book2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;进阶用法&quot;&gt;进阶用法&lt;/h3&gt;

&lt;p&gt;基于上面的基础用法,我们可以知道,其实&lt;code class=&quot;highlighter-rouge&quot;&gt;related_name&lt;/code&gt;的作用可以说是给被关联的那个model添加一个隐式的字段或者说是属性.&lt;/p&gt;

&lt;p&gt;现在我们考虑一个模型,叫做&lt;code class=&quot;highlighter-rouge&quot;&gt;BaseModel&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BaseModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ForeignKeyFields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;related_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'works'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 作者的作品叫做works&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''
    作品的一种:书

    '''&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Music&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''
    另一种作品:音乐
    '''&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;


&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Music&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;works&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;???&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;# 计算机怎么知道给啥呢？&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;鉴于上面的情况,所以我们需要动态的根据不同的类来改变&lt;code class=&quot;highlighter-rouge&quot;&gt;related_name&lt;/code&gt;的值&lt;/p&gt;

&lt;p&gt;有两个变量需要用&lt;code class=&quot;highlighter-rouge&quot;&gt;%(app_label)&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;%(class)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app_label&lt;/code&gt;:每个应用安装都会有唯一的应用名称,这个变量代表的就是应用名称&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;: 可以为每个类设置一个类名,这个变量代表类名&lt;/p&gt;

&lt;p&gt;用法:&lt;code class=&quot;highlighter-rouge&quot;&gt;related_name=xxx%(app_labels)sxxx%(class)sxxx&lt;/code&gt;, 可以任意组合,&lt;code class=&quot;highlighter-rouge&quot;&gt;)&lt;/code&gt;后面的s代表小写的意思&lt;/p&gt;

&lt;p&gt;这样就能保证每个&lt;code class=&quot;highlighter-rouge&quot;&gt;related_name&lt;/code&gt;的值是唯一的了&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/Django%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E7%A1%80-%E5%85%B3%E7%B3%BB%E5%AD%97%E6%AE%B5%E9%80%89%E9%A1%B9related_name%E7%9A%84%E7%94%A8%E6%B3%95%E4%B8%8E%E4%BD%9C%E7%94%A8/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/Django%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E7%A1%80-%E5%85%B3%E7%B3%BB%E5%AD%97%E6%AE%B5%E9%80%89%E9%A1%B9related_name%E7%9A%84%E7%94%A8%E6%B3%95%E4%B8%8E%E4%BD%9C%E7%94%A8/</guid>
        
        <category>django</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>Django学习之进阶--model的多继承</title>
        <description>&lt;h3 id=&quot;事情起因&quot;&gt;事情起因&lt;/h3&gt;
</description>
        <pubDate>Tue, 06 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/Django%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%BF%9B%E9%98%B6-model%E7%9A%84%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/Django%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%BF%9B%E9%98%B6-model%E7%9A%84%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF/</guid>
        
        <category>django</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>Django学习之基础--字段选项`choice`和`limit_choices_to`的作用和区别</title>
        <description>
</description>
        <pubDate>Tue, 06 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/Django%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E7%A1%80-%E5%AD%97%E6%AE%B5%E9%80%89%E9%A1%B9choices%E5%92%8Climit_choices_to%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%8C%BA%E5%88%AB/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/Django%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E7%A1%80-%E5%AD%97%E6%AE%B5%E9%80%89%E9%A1%B9choices%E5%92%8Climit_choices_to%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%8C%BA%E5%88%AB/</guid>
        
        <category>django</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>django学习之进阶--理解和使用中间件</title>
        <description>&lt;p&gt;最近由于需要,接触了django的中间件,一开是开始挺难理解的,后来慢慢的就比较理解一点了.&lt;/p&gt;

&lt;p&gt;在了解中间件之前,我们需要先对django处理request和返回response的流程.&lt;/p&gt;

&lt;h3 id=&quot;django对request的处理流程&quot;&gt;django对request的处理流程&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;接受请求.
 django收到一个请求,先将这个请求包装成request对象.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;对request的处理:
 包装好的request对象,会经由一个叫做&lt;code class=&quot;highlighter-rouge&quot;&gt;process_request&lt;/code&gt;的函数来处理.有两种结果:
    &lt;ul&gt;
      &lt;li&gt;返回&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpResponse&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;返回&lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;如果返回&lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt;,则继续经由&lt;code class=&quot;highlighter-rouge&quot;&gt;process_view&lt;/code&gt;函数处理,也有两种结果:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;返回&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpResponse&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;返回&lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;如果还返回&lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt;则继续由&lt;code class=&quot;highlighter-rouge&quot;&gt;process_response&lt;/code&gt;函数处理,结果有一种:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;返回&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpResponse&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;strong&gt;两点说明&lt;/strong&gt;:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;如果上述&lt;code class=&quot;highlighter-rouge&quot;&gt;process_view&lt;/code&gt;函数内部发生了异常,这request会由&lt;code class=&quot;highlighter-rouge&quot;&gt;process_exception&lt;/code&gt;处理:两种结果:
        &lt;ul&gt;
          &lt;li&gt;返回&lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt;:django内部异常处理机制继续处理这个request&lt;/li&gt;
          &lt;li&gt;返回&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpResopnse&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;所有返回的&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpResponse&lt;/code&gt;都是传给&lt;code class=&quot;highlighter-rouge&quot;&gt;process_response&lt;/code&gt;的.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;中间件的作用:
 上面这些函数全部都是定义在中间件里面的.中间件就是一个类,每个中间件都可以同时拥有一个或者多个上述的函数.(1.10中中间件支持函数)&lt;/p&gt;

    &lt;p&gt;所以说,对于一个请求,需要经过上面这些函数,所以如果我们自己写这些函数,那么就可以在处理请求的过程中间做一些事情,这就是中间件的作用.&lt;/p&gt;

    &lt;p&gt;现在再来说django的处理流程.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;ol&gt;
          &lt;li&gt;先接受一个请求,包装成request对象.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;ol&gt;
          &lt;li&gt;遍历中间件列表里的左右中间件,从上到下执行一遍中间件里的&lt;code class=&quot;highlighter-rouge&quot;&gt;process_request&lt;/code&gt;.如果某个中间件的&lt;code class=&quot;highlighter-rouge&quot;&gt;process_request&lt;/code&gt;返回了&lt;code class=&quot;highlighter-rouge&quot;&gt;response&lt;/code&gt;,那么直接将跳到().&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;ol&gt;
          &lt;li&gt;如果(2)中所有中间件的&lt;code class=&quot;highlighter-rouge&quot;&gt;process_request&lt;/code&gt;都没有返回&lt;code class=&quot;highlighter-rouge&quot;&gt;response&lt;/code&gt;,那么再一次从上到下,依次执行&lt;code class=&quot;highlighter-rouge&quot;&gt;process_view&lt;/code&gt;.如果某一个&lt;code class=&quot;highlighter-rouge&quot;&gt;process_view&lt;/code&gt;返回了&lt;code class=&quot;highlighter-rouge&quot;&gt;response&lt;/code&gt;,那么直接跳到().如果某一个出现了异常,直接跳到(4).&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;ol&gt;
          &lt;li&gt;如果某个&lt;code class=&quot;highlighter-rouge&quot;&gt;process_view&lt;/code&gt;出现了异常,那么将会按从下到上的顺序执行&lt;code class=&quot;highlighter-rouge&quot;&gt;process_exception&lt;/code&gt;,如果返回了一个response,那么跳到(5),否则将由django框架异常处理来进行处理.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;ol&gt;
          &lt;li&gt;如果接到一个response,那么django将会从中间件列表中&lt;strong&gt;从下到上&lt;/strong&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;process_response&lt;/code&gt;,并将其返回.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;这些顺序在django.core.handlers.base.py中的BaseHandler中涉及&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;以上为django中间件的作用和理解&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/Django%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%BF%9B%E9%98%B6-%E7%90%86%E8%A7%A3%E4%B8%AD%E9%97%B4%E4%BB%B6/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/Django%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%BF%9B%E9%98%B6-%E7%90%86%E8%A7%A3%E4%B8%AD%E9%97%B4%E4%BB%B6/</guid>
        
        <category>django</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>python学习之基础--使用虚拟环境</title>
        <description>&lt;p&gt;虚拟环境就是一个文件夹,这个文件夹里面放置着你某个python环境需要的配置,以及安装的包.&lt;/p&gt;

&lt;p&gt;这样就能将每个项目所需的库单独分开了,而不是所有的都冗杂在系统默认的那个文件夹&lt;/p&gt;

&lt;p&gt;创建虚拟环境&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;python3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;venv&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'venv_name'&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# 创建一个名字为'venv_name'的虚拟环境&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;venv_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;active&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# 启动虚拟环境&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;deactive&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 退出虚拟环境&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 25 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E7%A1%80-%E4%BD%BF%E7%94%A8%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E7%A1%80-%E4%BD%BF%E7%94%A8%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</guid>
        
        <category>python</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>Django学习之进阶--使用全局模板变量</title>
        <description>&lt;p&gt;在使用模板的时候,我们最长使用的是messages变量了,无论在任何地方都能使用,这是为啥呢？&lt;/p&gt;

&lt;p&gt;原因是应为messages是django的全局模板变量&lt;/p&gt;

&lt;p&gt;他的设置在settings.TEMPLATES里&lt;/p&gt;

&lt;p&gt;要深入填这个坑啊&lt;/p&gt;
</description>
        <pubDate>Thu, 25 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/Django%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%BF%9B%E9%98%B6-%E4%BD%BF%E7%94%A8%E5%85%A8%E5%B1%80%E6%A8%A1%E6%9D%BF%E5%8F%98%E9%87%8F/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/Django%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%BF%9B%E9%98%B6-%E4%BD%BF%E7%94%A8%E5%85%A8%E5%B1%80%E6%A8%A1%E6%9D%BF%E5%8F%98%E9%87%8F/</guid>
        
        <category>django</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>两周学完廖雪峰js教程之第五天--ajax</title>
        <description>&lt;p&gt;比较尴尬,日后补上完整学习笔记吧.&lt;/p&gt;
</description>
        <pubDate>Wed, 24 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/%E4%B8%A4%E5%91%A8%E5%AD%A6%E5%AE%8C%E5%BB%96%E9%9B%AA%E5%B3%B0js%E4%B9%8B%E7%AC%AC%E4%BA%94%E5%A4%A9-ajax/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/%E4%B8%A4%E5%91%A8%E5%AD%A6%E5%AE%8C%E5%BB%96%E9%9B%AA%E5%B3%B0js%E4%B9%8B%E7%AC%AC%E4%BA%94%E5%A4%A9-ajax/</guid>
        
        <category>js</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>两周学完廖雪峰js教程之第四天--操作表单</title>
        <description>&lt;p&gt;表单也是一个dom,所以也可以使用之前的获取节点的方式获取.&lt;/p&gt;

&lt;p&gt;获取表单值:
    - 对于普通文字表单,直接&lt;code class=&quot;highlighter-rouge&quot;&gt;.value&lt;/code&gt;就可以获取值
    - 对于选择性的表单,用&lt;code class=&quot;highlighter-rouge&quot;&gt;.checked&lt;/code&gt;返回true或false&lt;/p&gt;

&lt;p&gt;HTML5空间&lt;/p&gt;

&lt;p&gt;html5使用的都是&lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt;表单,类型有&lt;code class=&quot;highlighter-rouge&quot;&gt;date&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;datetime&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;datetime-local&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;color&lt;/code&gt;等.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;date&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/input&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;提交表单&lt;/p&gt;

&lt;p&gt;使用js提交表单有两种方式&lt;/p&gt;

&lt;p&gt;第一种:
    - js获取form元素,然后调用&lt;code class=&quot;highlighter-rouge&quot;&gt;.submit()&lt;/code&gt;
    - 这种方式打乱了浏览器的默认提交.默认是点&lt;code class=&quot;highlighter-rouge&quot;&gt;typt=&quot;submit&quot;&lt;/code&gt;的表单元素进行提交&lt;/p&gt;

&lt;p&gt;第二种:
    - 给form的onsubmit绑定响应&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onsubmit=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;return check()&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;check()是一个函数,用来检查表单的正确性,并返回true or false,如果返回false，就不提交&lt;/p&gt;

&lt;p&gt;操作文件&lt;/p&gt;

&lt;p&gt;html中唯一能上传文件的控件是&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input type=&quot;file&quot;&amp;gt;&amp;lt;/input&amp;gt;&lt;/code&gt;&lt;strong&gt;如果form包含file，则必须指定&lt;code class=&quot;highlighter-rouge&quot;&gt;enctype=&quot;multipart/form-data&quot;&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;method=&quot;post&quot;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;出于安全考虑,只允许点击上床按钮来上传文件,然和js直接赋值都是无效的&lt;/p&gt;

&lt;p&gt;html5还可以通过文件对象来读取文件内容,宠儿达到预览的效果&lt;/p&gt;
</description>
        <pubDate>Tue, 23 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/%E4%B8%A4%E5%91%A8%E5%AD%A6%E5%AE%8C%E5%BB%96%E9%9B%AA%E5%B3%B0js%E4%B9%8B%E7%AC%AC%E5%9B%9B%E5%A4%A9-%E6%93%8D%E4%BD%9C%E8%A1%A8%E5%8D%95/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/%E4%B8%A4%E5%91%A8%E5%AD%A6%E5%AE%8C%E5%BB%96%E9%9B%AA%E5%B3%B0js%E4%B9%8B%E7%AC%AC%E5%9B%9B%E5%A4%A9-%E6%93%8D%E4%BD%9C%E8%A1%A8%E5%8D%95/</guid>
        
        <category>js</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>两周学完廖雪峰js教程之第三天--面向对象</title>
        <description>&lt;h1 id=&quot;第三天&quot;&gt;第三天&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;js不区分类和实例,是通过原型(prototype)来实现面向对象的&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Robot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'robot'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'is running...'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;看上面的Robot，有点像人,有名字，身高,还会跑,所以我们可以吗Robot当成一个人的原型&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xiaoming&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'xiaoming'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;xiaoming&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__proto__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Robot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// 将小明的原型指向Robot&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;xiaoming&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// xiaoming iss running...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这样小明就有了run方法,以及height属性&lt;/p&gt;

&lt;p&gt;没错，这看上去有点像继承&lt;/p&gt;

&lt;p&gt;原型和类的区别在于:&lt;strong&gt;没有类的概念,所有的都是实例,继承也是继承自一个实例&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;但是正常情况下不要用&lt;code class=&quot;highlighter-rouge&quot;&gt;__proto__&lt;/code&gt;,可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;Object.create()&lt;/code&gt;来创建对象&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xiaoming&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Robot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;xiaoming&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// {},小明什么都没有&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;xiaoming&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// robot&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;xiaoming&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// robot is running...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看到,这样创建的小明自己什么都没有,全是从原型上继承过来的.但是我们创建小明的时候希望他能有一些自己的东西,比如名字&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createXiaoming&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//创建&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 初始化&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'xiaoming'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xiaoming&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createXiaoming&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Robot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;xiaoming&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// xiaoming&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;xiaoming&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// xiaoming is running...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;构造函数&lt;/p&gt;

&lt;p&gt;js的构造函数是一个普通函数加上this&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' is running...'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;构造函数可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;来创建一个对象,并且返回该对象,不用我们显示的返回&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xiaoming&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'xiaoming'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;注意别忘了&lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;,否则就变成了函数调用&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;来梳理一下new创建对象的过程&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 当有一个构造函数的时候,js就会为这个构造函数创建一个默认的对象,这就是该构造函数的原型(prototype)
- 同时,该原型的构造函数属性也指向该构造函数(Function.prototype.constructor == Function)
- 引擎接到new指令后,先再内存中开辟一块空间
- 然后在空间上创建一个空对象'{}'
- 然后用this指向它
- 然后执行构造函数,给这个空对象赋值初始化
- 再将该新对象的原型指向默认的原型对象
- 最后返回该对象
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以我们上面的这些例子中,虽然每个对象都有相同的方法(run),但他们其实是不同的方法.这就导致了内存的浪费.&lt;/p&gt;

&lt;p&gt;我们只需要&lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt;放到原型上,就所有对象共享了.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' is running...'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xiaoming&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'xiaoming'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xiaoli&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'xiaoli'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xiaoming&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xiaoli&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用函数封装创建对象操作&lt;/p&gt;

&lt;p&gt;如果每创建一个对象,我们就new一次,那么次数多了,可能会偶尔忘记写new，那么这样就变成了函数调用,可能会导致一些错误.&lt;/p&gt;

&lt;p&gt;解决办法:
    - 按约定,函数名小写,构造函数首字母大写.方便检查
    - 将创建对象的过程封装在一个函数里,这样就直接调用函数了.&lt;/p&gt;
</description>
        <pubDate>Mon, 22 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/%E4%B8%A4%E5%91%A8%E5%AD%A6%E5%AE%8C%E5%BB%96%E9%9B%AA%E5%B3%B0js%E4%B9%8B%E7%AC%AC%E4%B8%89%E5%A4%A9-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/%E4%B8%A4%E5%91%A8%E5%AD%A6%E5%AE%8C%E5%BB%96%E9%9B%AA%E5%B3%B0js%E4%B9%8B%E7%AC%AC%E4%B8%89%E5%A4%A9-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
        
        <category>js</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>两周学完廖雪峰js教程之第三天--浏览器</title>
        <description>&lt;h1 id=&quot;第三天&quot;&gt;第三天&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt;对象&lt;/p&gt;

&lt;p&gt;window对象不仅仅表示全局,还代表浏览器窗口.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;window.innerWidth&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;window.innerHeight&lt;/code&gt;:表示浏览器窗口的内部宽和高,去除工具栏,菜单栏等边框元素，用于显示净网页的宽和高.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;navigator&lt;/code&gt;对象表示浏览器的信息&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- `.appName`:name of browser;
- `.appVersion`: version fo browser;
- `.language`: language setting of browser;
- `.platform`: type of operator system;
- `.userAgent`: userAgent setting of browser;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;navigator信息可以被轻易的更改,因此得到的不一定准确&lt;/p&gt;

&lt;p&gt;要获取浏览器信息,充分利用js对不存在属性返回&lt;code class=&quot;highlighter-rouge&quot;&gt;undefine&lt;/code&gt;的原理&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clientWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;screen&lt;/code&gt;:表示屏幕信息&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- `.width`: screen width;(px)
- `.height`: height of screen(px);
- `.colorDepth`: bites of screen support;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;location&lt;/code&gt;:表示当前页面的url信息,使用一个完整的url:&lt;code class=&quot;highlighter-rouge&quot;&gt;https://www.example.com:8080/path/index.html?a=1&amp;amp;b=2&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- `.protpcol`: 'https';
- `.host`: 'www.example.com';
- `.port`: '8080';
- `.pathname`: '/path/index.html';
- `.search`: '?a=1&amp;amp;b=2';
- `.hash`: 'TOP';   // 这是what?
- `.assign('path')`: open a new page with url givein.
- `.reload()`: reload this page
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;document&lt;/code&gt;:表示当前页面&lt;/p&gt;

&lt;p&gt;document表示当前页面对象,由于浏览器以DOM树形式表示html,document就表示树根&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- `.getElementById('id')`:get the element where id='id'
- `.getElementsByName('name')`: get the elements where name='name', not only one.
- `.cookie`: get cooike of current page;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为了安全,如果浏览器在设置cookie是使用了httpOnly,则js不能读取cookie.服务器在设置cookie的时候也应坚持使用httpOnly&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;history&lt;/code&gt;:历史记录对象&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- `.back()`:后退
- `.forward()`:往前
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 22 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/%E4%B8%A4%E5%91%A8%E5%AD%A6%E5%AE%8C%E5%BB%96%E9%9B%AA%E5%B3%B0js%E4%B9%8B%E7%AC%AC%E4%B8%89%E5%A4%A9-%E6%B5%8F%E8%A7%88%E5%99%A8/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/%E4%B8%A4%E5%91%A8%E5%AD%A6%E5%AE%8C%E5%BB%96%E9%9B%AA%E5%B3%B0js%E4%B9%8B%E7%AC%AC%E4%B8%89%E5%A4%A9-%E6%B5%8F%E8%A7%88%E5%99%A8/</guid>
        
        <category>js</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>两周学完廖雪峰js教程之第三天--操作DOM</title>
        <description>&lt;h1 id=&quot;第三天&quot;&gt;第三天&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;选择element&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.getElementById()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.getElementsByClassName()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.getElementsByTagName&lt;/code&gt;可以获取指定节点.&lt;/p&gt;

&lt;p&gt;使用选择器:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.querySelector('#test')&lt;/code&gt;:使用语法,更加方便的获取节点
&lt;code class=&quot;highlighter-rouge&quot;&gt;.querySelectorAll('div.highlight &amp;gt; p')&lt;/code&gt;:选取所有满足条件的子节点&lt;/p&gt;

&lt;p&gt;更新DOM:直接修改节点,两种方式&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.innerHTML&lt;/code&gt;:非常强大,可以直接修改节点,也可以直接修改节点树的子节点&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'p-test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ABC'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// &amp;lt;p id=&quot;p-test&quot;&amp;gt;ABC&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;div&amp;gt;&amp;lt;span&amp;gt;Hello&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// &amp;lt;p&amp;gt;&amp;lt;div&amp;gt;&amp;lt;span&amp;gt;Hello&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以,当我们拿到未知的字符串的时候,要对它进行转义,避免XSS攻击&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.innerText&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;.innerContent&lt;/code&gt;:可以对字符串进行编码,保证无法得到任何的html标签&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;区别:&lt;code class=&quot;highlighter-rouge&quot;&gt;.innerText&lt;/code&gt;在读取时不返回影藏属性,&lt;code class=&quot;highlighter-rouge&quot;&gt;.innerContent&lt;/code&gt;在读取时返回所有文本;&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'p-test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;div&amp;gt;ABC&amp;lt;/div&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// &amp;lt;p id=&quot;p-test&quot;&amp;gt;&amp;amp;lt;div&amp;amp;rt;ABC&amp;amp;lt;/div&amp;amp;rt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;修改节点样式:&lt;code class=&quot;highlighter-rouge&quot;&gt;.style.xxx = 'xxx';&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;插入新节点&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;.innerHTML&lt;/code&gt;:缺点,1.会将该节点下的所有东西全都覆盖,包括原有的子节点&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;.appendChild&lt;/code&gt;:把一个节点添加成该节点的&lt;strong&gt;最后一个&lt;/strong&gt;子节点&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'p-test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;由于之前已经有id=’js’的节点,所以原先的会被删除&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我们也可以新创建一个节点&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'p'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 创建一个p元素&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'p-new'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'newp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'p-text'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 获取元素&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同理,我们也可以在文档中创建&lt;code class=&quot;highlighter-rouge&quot;&gt;style&lt;/code&gt;元素,从而改变页面样式&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'style'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'text/css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'p { color: red  }'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'head'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;insertBefore(new, old)&lt;/code&gt;:吧节点添加到指定节点的前面&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;删除节点&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.removeChild(child)&lt;/code&gt;:移除自己的child孩子&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'p-test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;removed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;removerd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;被移除的没有消失,还在内存&lt;/p&gt;

&lt;p&gt;还需要注意的是children是一个只读属性,随时都在变化,特别是增加或者删除节点的时候&lt;/p&gt;

&lt;p&gt;如果一个元素有两个子节点:children = [child1,child2]&lt;/p&gt;

&lt;p&gt;然后删除了一个,就直接有个了: children = [child1]&lt;/p&gt;

&lt;p&gt;但是如果你在for循环里,可能循环到第二遍的时候,children已经只有一个了,你却访问children[1]就出错了&lt;/p&gt;
</description>
        <pubDate>Mon, 22 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/%E4%B8%A4%E5%91%A8%E5%AD%A6%E5%AE%8C%E5%BB%96%E9%9B%AA%E5%B3%B0js%E4%B9%8B%E7%AC%AC%E4%B8%89%E5%A4%A9-%E6%93%8D%E4%BD%9CDOM/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/%E4%B8%A4%E5%91%A8%E5%AD%A6%E5%AE%8C%E5%BB%96%E9%9B%AA%E5%B3%B0js%E4%B9%8B%E7%AC%AC%E4%B8%89%E5%A4%A9-%E6%93%8D%E4%BD%9CDOM/</guid>
        
        <category>js</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>两周学完廖雪峰js教程之第三天--原型继承</title>
        <description>&lt;h1 id=&quot;第三天&quot;&gt;第三天&lt;/h1&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;先占坑日后补&quot;&gt;先占坑,日后补&lt;/h1&gt;
</description>
        <pubDate>Mon, 22 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/%E4%B8%A4%E5%91%A8%E5%AD%A6%E5%AE%8C%E5%BB%96%E9%9B%AA%E5%B3%B0js%E4%B9%8B%E7%AC%AC%E4%B8%89%E5%A4%A9-%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/%E4%B8%A4%E5%91%A8%E5%AD%A6%E5%AE%8C%E5%BB%96%E9%9B%AA%E5%B3%B0js%E4%B9%8B%E7%AC%AC%E4%B8%89%E5%A4%A9-%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF/</guid>
        
        <category>js</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>两周学完廖雪峰js教程之第三天--class继承</title>
        <description>&lt;h1 id=&quot;第三天&quot;&gt;第三天&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;除了使用function定义对象,ES6还新增加了关键字&lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 构造函数&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' say:hello!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xiaoming&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'xiaoming'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;class 继承&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PrimaryStudent&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;grade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 别忘了调用父类的构造方法&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;grade&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;grade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;myGrade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'my grade is '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;grade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对于现在还不支持se6的浏览器,用这个工具&lt;a href=&quot;https://babeljs.io/&quot;&gt;Bable&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 22 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/%E4%B8%A4%E5%91%A8%E5%AD%A6%E5%AE%8C%E5%BB%96%E9%9B%AA%E5%B3%B0js%E4%B9%8B%E7%AC%AC%E4%B8%89%E5%A4%A9-class%E7%BB%A7%E6%89%BF/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/%E4%B8%A4%E5%91%A8%E5%AD%A6%E5%AE%8C%E5%BB%96%E9%9B%AA%E5%B3%B0js%E4%B9%8B%E7%AC%AC%E4%B8%89%E5%A4%A9-class%E7%BB%A7%E6%89%BF/</guid>
        
        <category>js</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>两周学完廖雪峰js教程之第二天--正则表达式</title>
        <description>&lt;h1 id=&quot;第二天&quot;&gt;第二天&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;js中创建正则表达式的两种方式:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/^&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\d{3}\-\d(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;3,8&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 用'/..../'包裹起来&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;re2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'^&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;d{3}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;d(3,8)$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 通过创建对象的方式创建,注意'\'需要转义&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;利用re分割字符串&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s1&quot;&gt;'a b    c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ['a', ' ', ' ', 'c'],无法识别多个空格&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;'a b    c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;+/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 21 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/%E4%B8%A4%E5%91%A8%E5%AD%A6%E5%AE%8C%E5%BB%96%E9%9B%AA%E5%B3%B0js%E4%B9%8B%E7%AC%AC%E4%BA%8C%E5%A4%A9-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/%E4%B8%A4%E5%91%A8%E5%AD%A6%E5%AE%8C%E5%BB%96%E9%9B%AA%E5%B3%B0js%E4%B9%8B%E7%AC%AC%E4%BA%8C%E5%A4%A9-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
        
        <category>js</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>两周学完廖雪峰js教程之第二天--标准对象</title>
        <description>&lt;h1 id=&quot;第二天&quot;&gt;第二天&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;js里一切皆对象&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;typeof&lt;/code&gt;:返回一个字符串,获取对象的类型&lt;/p&gt;

&lt;h4 id=&quot;包装对象&quot;&gt;包装对象&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;-&lt;code class=&quot;highlighter-rouge&quot;&gt;Number&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt;–&lt;code class=&quot;highlighter-rouge&quot;&gt;Boolean&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt;-&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'str'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;包装对象已经是一个oobject了.所以123===new Number(123); //false&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;所以没事就别使用包装对象了&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果忘了写new会怎样?&lt;/p&gt;

&lt;p&gt;如果忘了写new，会将他们当成函数对待.就像是调用了一个函数,吧他们转换成number,boolean或者string类型,而不是包装类&lt;/p&gt;

&lt;p&gt;廖的总结:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;不要使用&lt;code class=&quot;highlighter-rouge&quot;&gt;new Number&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;new Boolean&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;new String&lt;/code&gt;来创建包装类&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;用&lt;code class=&quot;highlighter-rouge&quot;&gt;parseInt()&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;parseFolat()&lt;/code&gt;来转换&lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;用&lt;code class=&quot;highlighter-rouge&quot;&gt;String()&lt;/code&gt;来转换&lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt;，或者调用某个对象的&lt;code class=&quot;highlighter-rouge&quot;&gt;toString()&lt;/code&gt;方法&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;typeof&lt;/code&gt; 可以判断出&lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt; ,&lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;判断&lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;要用&lt;code class=&quot;highlighter-rouge&quot;&gt;Array.isArray(arr)&lt;/code&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;判断&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;用 &lt;code class=&quot;highlighter-rouge&quot;&gt;myvar === null&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;判断某个全局变量是否存在用&lt;code class=&quot;highlighter-rouge&quot;&gt;window.myvar === 'undefined'&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;函数内部判断某个变量用&lt;code class=&quot;highlighter-rouge&quot;&gt;typeof myvar === 'undefined'&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;不是任何对象都有&lt;code class=&quot;highlighter-rouge&quot;&gt;toString()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;number.toString()&lt;/code&gt;可能会出问题&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//SyntaxErrr&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// '123'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//'123'&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;1.23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// '1.23'&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;看评论区依稀了解到,数字要有两个., 第一个代表小数点，第二个才是调用方法&lt;/p&gt;
</description>
        <pubDate>Sun, 21 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/%E4%B8%A4%E5%91%A8%E5%AD%A6%E5%AE%8C%E5%BB%96%E9%9B%AA%E5%B3%B0js%E4%B9%8B%E7%AC%AC%E4%BA%8C%E5%A4%A9-%E6%A0%87%E5%87%86%E5%AF%B9%E8%B1%A1/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/%E4%B8%A4%E5%91%A8%E5%AD%A6%E5%AE%8C%E5%BB%96%E9%9B%AA%E5%B3%B0js%E4%B9%8B%E7%AC%AC%E4%BA%8C%E5%A4%A9-%E6%A0%87%E5%87%86%E5%AF%B9%E8%B1%A1/</guid>
        
        <category>js</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>两周学完廖雪峰js教程之第二天--函数进阶</title>
        <description>&lt;h1 id=&quot;第二天&quot;&gt;第二天&lt;/h1&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;mapreduce&quot;&gt;map/reduce&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;:已知一个函数(一个参数)和一个数组.将函数一次作用于数组中的每一个元素,并返回一个结果数组&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// [1,4,16,25,36,49,64,81]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt;:已知一个函数(两个参数)和一个数组,将函数作用于前两个item,得到一个结果,然后又将这个结果和下一个item作用得到一个结果,再将这个结果和下一个数作用. 最后的到一个item&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 10, 1+2+3+4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;filter&quot;&gt;filter&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;:已知一个函数(参数一个,返回值bool),和一个Array,将函数一次作用于Array上,留下返回值为true的item&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,];&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;===&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [0,0,0]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;filter接受的函数可以有三个参数(element, index, self):
    - element:表示元素项
    - index:表示该元素项在数组中的下标
    - self表示数组自身&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Array.indexOf返回第一个找到元素的下标&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [1,0,2,30,4,5]  去重&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;sort&quot;&gt;sort&lt;/h3&gt;

&lt;p&gt;Array.sort(); // 默认将元素&lt;strong&gt;转换成字符串&lt;/strong&gt;然后排序&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;注意,sort会对当前Array进行更改.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;sort的高阶函数:
    - 参数:两个(x,y)
    - 返回值:
        - x &amp;gt; y: -1
        - x == y: 0
        - x &amp;lt; y: 1&lt;/p&gt;

&lt;h3 id=&quot;闭包&quot;&gt;闭包&lt;/h3&gt;

&lt;p&gt;闭包的概念和python里的一样&lt;/p&gt;

&lt;h3 id=&quot;立即执行函数&quot;&gt;立即执行函数&lt;/h3&gt;

&lt;p&gt;如果定义了一个函数并且想立即执行:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;})(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 只需要把函数的定义用()包起来.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;箭头函数&quot;&gt;箭头函数&lt;/h3&gt;

&lt;p&gt;和其他语言的匿名函数不一样,js有个特别的箭头函数,用起来想其他语言的lambda表达式&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 传入一个x，返回x*x&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//传入多个参数，函数体就一句&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 有多个函数语句,不能省略{}和return&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'chenbin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//如果返回一个对象,这这样就会和函数体发生冲突&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'chenbin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 用()包起来就能返回一个对象了&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;this&quot;&gt;this&lt;/h3&gt;

&lt;p&gt;箭头函数很像匿名函数,但是它和匿名函数还是有很多区别,this就是很大的一个区别&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;箭头函数中this的指向词法作用域&lt;/li&gt;
  &lt;li&gt;箭头函数的apply()和call()第一个参数绑定对象会被忽略&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;generator&quot;&gt;generator&lt;/h3&gt;
&lt;p&gt;和python的语法差不多,只是定义函数的时候多个’*’&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 5,4,3,2,1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 21 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/%E4%B8%A4%E5%91%A8%E5%AD%A6%E5%AE%8C%E5%BB%96%E9%9B%AA%E5%B3%B0js%E4%B9%8B%E7%AC%AC%E4%BA%8C%E5%A4%A9-%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/%E4%B8%A4%E5%91%A8%E5%AD%A6%E5%AE%8C%E5%BB%96%E9%9B%AA%E5%B3%B0js%E4%B9%8B%E7%AC%AC%E4%BA%8C%E5%A4%A9-%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/</guid>
        
        <category>js</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>两周学完廖雪峰js教程之第一天--快速入门</title>
        <description>&lt;h1 id=&quot;第一天&quot;&gt;第一天&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;这已经不是我的第一门内编程语言了,我对这门语言也不陌生,因此前面的一些基础都是很快就能过完的,这里就记录下js和其他语言相比需要注意的地方&lt;/p&gt;

&lt;h3 id=&quot;数据类型&quot;&gt;数据类型&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;js中不区分整数和小数,统一用&lt;code class=&quot;highlighter-rouge&quot;&gt;Number&lt;/code&gt;类型表示&lt;/li&gt;
  &lt;li&gt;js中有两个其他语言没有的&lt;code class=&quot;highlighter-rouge&quot;&gt;NaN&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Infinity&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;对于无法计算出结果的值，用&lt;code class=&quot;highlighter-rouge&quot;&gt;NaN&lt;/code&gt;表示(Not a Number)&lt;/li&gt;
      &lt;li&gt;对于无穷大，超过了js数的表示范围的,用&lt;code class=&quot;highlighter-rouge&quot;&gt;Infinity&lt;/code&gt;表示&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;对于&lt;code class=&quot;highlighter-rouge&quot;&gt;NaN&lt;/code&gt;的判断
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NaN&lt;/code&gt;是一个很特殊的变量，他和任意对象都不相等,包括它自己&lt;/li&gt;
      &lt;li&gt;判断&lt;code class=&quot;highlighter-rouge&quot;&gt;NaN&lt;/code&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;isNaN&lt;/code&gt;函数.如果是NaN，返回true(NaN,不是一个数)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;对于浮点数的比较
 浮点数不精确,尽量不要用计算结果来比较大小&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 不一定返回true,因为精度不保证&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.000000001&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// 通过两浮点数的差的绝对值和一个精确读阀值来判断是否可以当做相等&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;字符串
 js中可以使用`xxx`来包裹多行字符串,就像python中的’'’xxx’’’
 &lt;code class=&quot;highlighter-rouge&quot;&gt;${varname}&lt;/code&gt;:js中的字符串变量替换方式&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Hello &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, you are &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; years old!`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 注意，是反引号\`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;循环&quot;&gt;循环&lt;/h3&gt;

&lt;p&gt;js中有三种循环&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;for()&lt;/code&gt;:这种循环和其他语言的一样的普通循环,主要用于下表访问和次数控制&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;for...in&lt;/code&gt;:这种循环主要是遍历对象的属性&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;for...of&lt;/code&gt;:这种循环主要是遍历对象的值&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;现在也无法很清楚的搞清楚他们三之间的关系,先留个坑，日后补&lt;/p&gt;

</description>
        <pubDate>Fri, 19 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/%E4%B8%A4%E5%91%A8%E5%AD%A6%E5%AE%8C%E5%BB%96%E9%9B%AA%E5%B3%B0js%E4%B9%8B%E7%AC%AC%E4%B8%80%E5%A4%A9-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/%E4%B8%A4%E5%91%A8%E5%AD%A6%E5%AE%8C%E5%BB%96%E9%9B%AA%E5%B3%B0js%E4%B9%8B%E7%AC%AC%E4%B8%80%E5%A4%A9-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</guid>
        
        <category>js</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>两周学完廖雪峰js教程之第一天--函数</title>
        <description>&lt;h1 id=&quot;第一天&quot;&gt;第一天&lt;/h1&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;函数&quot;&gt;函数&lt;/h3&gt;

&lt;p&gt;函数本身是一个对象.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;函数可直接赋值给变量.&lt;/p&gt;

&lt;p&gt;```js var fun2 = function(a){
    return 2;
};&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
需要注意两个问题:
    1. 上述代码是一个正常的赋值语句,需要`;`结尾.
    2. 上述的函数是一个匿名函数了

函数的调用

```js
fun();    // 1

fun2(1,2.3); // 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;需要注意:
    1. js不对函数的参数做任何要求.因此可以不传，或者传很多.
    2. js是弱类型语言,因此要人为对传入的参数类型做检查.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;abs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 此时的函数参数为undefine, 返回值为NaN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;arguments关键字&lt;/code&gt;:js函数内置的一个关键字,永远指向当前函数&lt;strong&gt;传入&lt;/strong&gt;的参数.用法像数组，却又不是数组.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 得到的结果是调用者传入的参数,而不是函数定义时定义的参数.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rest关键字&lt;/code&gt;:很多时候我们都会定义函数的时候就定义参数的个数,但是我们不能限制调用者传入的参数个数,因此可能会有两种情况:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 传入的参数过多:函数接收并处理定义所需个数的参数,多余的交个rest
2. 传入的参数刚好或过少:函数会接受所有参数,并且rest收到一个[] Array
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;abs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'number'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Not a number'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;


&lt;span class=&quot;nx&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// x:3, rest:[]&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// x:1. rest:[2,3,4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;返回值:js的返回值可以是任意类型.但是有些坑&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 返回一个Map: ```js return {name:'chenbin'};  // 没问题 return        //这里会自动加上';'
{
name:'chenbin'
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;return {     // 不会加’;’, ‘{‘可以确定没有结束
    name:’chenbin’;
};&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    2. 所以写返回值的时候要么一句写完,要分开的话就把值分开,而不要return和value分开


### 变量作用域

js中变量的作用于的函数,函数内部申明的变量出了函数就不能再使用

搜索是从内到外的,先搜索自己函数内部,再搜索嵌套的外层函数.如果找不到就报错

    1. 对于直接上来就写变量的那种js脚本,其实是处于一个大的匿名函数中的.可以说,我们的脚本文件就是一个函数

```js
var a = 0;
console.log(a);
// 上面两句话其实也是处于一个函数中
// 只不过我们都置身于这个函数中
// 看不到这个函数的全貌,我们所有做的操作
// 所有的定义不过也是在一个函数中做事而已

console.log(arguments.callee.toStriing());   //可以调用arguments关键字,更加判断是在一个函数中了
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;变量提升&lt;/strong&gt;:js的函数有个特点,会先扫描整个函数,然后把所有变量提到函数的开头.也就是说代码中的变量可以先使用后申明也是没有错的.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 没有任何错误,并且正常&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;由于js这一特性,所以我们写函数的时候优先把所有用到的变量都写在函数前面.否则可能出现一些意想不到的问题.&lt;/p&gt;

&lt;p&gt;全局作用域:不在任何函数内定义的变量就是全局变量.&lt;/p&gt;

&lt;p&gt;js默认有个&lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt;属性,所有全局的变量其实是被绑定到了window属性上.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){}&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 全局变量fun&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fun2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){};&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//全局变量fun2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;命名空间:很多时候,我们是几个js脚本文件一起工作的.那么这时候全局变量的名字就可能冲突.并且js只有一个全局变量window。&lt;/p&gt;

&lt;p&gt;解决这种冲突的办法是将自己的所有变量和函数全部绑定到一个全局变量上.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// in A.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;abs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;// in B.js&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;abs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;// in C.js&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;javascript&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;A.js&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/javascript&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;javascript&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;B.js&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/javascript&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;块级作用域&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我们知道,js的作用域是函数.但是有时候我们只需要块级作用域,如:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 定义了一个函数级别的变量i&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 这里的i我们明显是不想要的,但是for无法定义块级作用域&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为了解决这个问题,ES6引入了let关键字，作用是申明一个变量.但范围是块级’{}’&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;常量&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;通常我们以名字全部大写来约定这是常量,不要修改他的值.&lt;/p&gt;

&lt;p&gt;也可以使用关键字const来申明一个常量&lt;/p&gt;

&lt;p&gt;const和let的作用域都是块级’{}’&lt;/p&gt;

&lt;h3 id=&quot;this的指向&quot;&gt;this的指向&lt;/h3&gt;

&lt;p&gt;早就耳闻js中this的大名了.&lt;/p&gt;

&lt;p&gt;认识this之前,我们先简单的假设并区分两个东西:方法和函数&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;方法&lt;/code&gt;:对象的一种属性
&lt;code class=&quot;highlighter-rouge&quot;&gt;函数&lt;/code&gt;:就正常的函数&lt;/p&gt;

&lt;p&gt;先出结论一:&lt;strong&gt;方法的this永远指向对象,函数的this待定&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xiaoming&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'xiaoming'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;brith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1995&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getFullYear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;brith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;xiaoming&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 22正常&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;当我们把一个方法赋值给普通变量了,那么这个方法就变成了函数&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getAge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xiaoming&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 里面的this不再指向xiaoming&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;方法里面定义的函数也不再是方法&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xiaoming&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'xiaoming'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;brith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1995&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getFullYear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;brith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;xiaoming&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// this指向不是xiaoming, age是方法,getAge不是方法&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;结论二:&lt;strong&gt;非方法里面的this&lt;/strong&gt;, script模式下为undefine，非script模式下指向weindow&lt;/p&gt;

&lt;p&gt;关于this还有很多需要说明的.&lt;/p&gt;

&lt;p&gt;如果在方法的函数里要用this:在方法里面捕获this，然后赋值给另一个变量,函数里面使用变量&lt;/p&gt;

&lt;h3 id=&quot;使用apply和call控制this的指向&quot;&gt;使用apply()和call()控制this的指向&lt;/h3&gt;

&lt;p&gt;函数的apply()和call()方法可以确定this的指向,用法:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getAge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getFullYear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;brith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xiaoming&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'xiaoming'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;brith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1995&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAge&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 下面两个函数的第一个参数都是指定this的对象&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 对于普通函数,第一个参数通常为null&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xiaoming&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[]);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 以列表的形式传递参数&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xiaoming&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 按顺序传入参数&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;xiaomming&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 22&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;装饰器&quot;&gt;装饰器&lt;/h3&gt;

&lt;p&gt;利用apply,可以动态的改变函数的功能&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:Hello`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sayHelloWithLog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2017-05-20'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 调用原函数&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;sayHelloWithLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'chenbin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 实现了答应log的功能&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Fri, 19 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/%E4%B8%A4%E5%91%A8%E5%AD%A6%E5%AE%8C%E5%BB%96%E9%9B%AA%E5%B3%B0js%E4%B9%8B%E7%AC%AC%E4%B8%80%E5%A4%A9-%E5%87%BD%E6%95%B0/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/%E4%B8%A4%E5%91%A8%E5%AD%A6%E5%AE%8C%E5%BB%96%E9%9B%AA%E5%B3%B0js%E4%B9%8B%E7%AC%AC%E4%B8%80%E5%A4%A9-%E5%87%BD%E6%95%B0/</guid>
        
        <category>js</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>github之一台电脑添加两个账户</title>
        <description>&lt;p&gt;一个私人，一个工作,拥有两个github账号是很正常的一件事了,但是要在一台电脑上使用两个github账户怎么办？&lt;/p&gt;

&lt;p&gt;github服务器确认你是你的两种方法:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;你的github账号和密码.&lt;/li&gt;
  &lt;li&gt;唯一的ssh密钥对.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;显然，第二种方便，一次添加，永久有效.&lt;/p&gt;

&lt;p&gt;所以,要在一台机器上使用两个github，需要两个ssh密钥对:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ssh&quot;&gt;ssh-keygen -t rsa -f &quot;path/you/want/filename&quot; -C &quot;your@email.com&quot;
# 通常是 -f '~/.ssh/id_rsa_work'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;注意,文件名不能和已经存在的重复&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;好了,现在你有假冒的自己了. 然后把假冒的自己添加到另一个github账户.过程跳过.&lt;/p&gt;

&lt;p&gt;现在你还需要伪装一下,不然能被认出你和那个人是同一个人.&lt;/p&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/&lt;/code&gt;文件夹下新建&lt;code class=&quot;highlighter-rouge&quot;&gt;config&lt;/code&gt;, 并添加以下内容:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ssh&quot;&gt;
# default 真实的你自己
Host github.com
    HostName github.com
    IdentityFile ~/.ssh/id_rsa


# work 后来添加的那个假的
Host xxx.github.com   # 只是起了个假名字，假外表, 假名字你可以随便起
    HostName github.com    # 灵魂还是自己原本的
    IdentityFile ~/.ssh/id_rsa_work    # 假的你用着另一张假的身份证
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;好了，假的自己已经造好了,现在就是向公安局上提交假自己的档案了.运行命令:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh-add ~/.ssh/id_rsa_work
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果你向全世界都宣布过了你的名字了,那么你要把它撤回&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;git config --glogal --unset user.name
git config --glogal --unset user.email


# 然后在每一个仓库单独告诉他们你想让它知道的名字

git config user.name &quot;my-name&quot;
git config user.email &quot;your@email.com&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对了,你设置的远程仓库别忘了改&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;git remote add origin git@xxx.github.com:AccountName/ResName.git
# git是config里面的User，xxx.github.com就是你的Host
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ok! 开始享受两个自己吧.&lt;/p&gt;
</description>
        <pubDate>Thu, 18 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/github%E4%B9%8B%E4%B8%80%E5%8F%B0%E6%9C%BA%E5%99%A8%E6%B7%BB%E5%8A%A0%E4%B8%A4%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/github%E4%B9%8B%E4%B8%80%E5%8F%B0%E6%9C%BA%E5%99%A8%E6%B7%BB%E5%8A%A0%E4%B8%A4%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7/</guid>
        
        <category>none</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>爬虫总结--爬取校园网个人信息</title>
        <description>&lt;p&gt;自己独立写的第一个爬虫,爬取学校的个人信息，记录一下遇到的问题和总结解决办法&lt;/p&gt;

&lt;h3 id=&quot;用代码实现登录并且访问一个需要登录的网页&quot;&gt;用代码实现登录，并且访问一个需要登录的网页&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;在这之前，已经会了使用已经存在的cookie来进行免登录访问.
然后尝试使用代码登录，然后返回一个response，保存response的cookie值.
再利用这个cooike尝试免登录访问.
但是这样是登录不上的.
重点是&lt;strong&gt;因为忽略了一个问题,浏览器的cooike是真实存在本地的,而我从response获取的只是一个cookie的符号,并没有真实信息&lt;/strong&gt;.所以是登录不上的.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;解决办法.
一开始想的是将response的cookie值保存到本地.但是没有实现
后来发现requests库有&lt;code class=&quot;highlighter-rouge&quot;&gt;resquests.Session&lt;/code&gt;对象,用它登录，然后和服务器建立一个会话，然后用这个会话取访问需要访问的页面.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;re匹配中文&quot;&gt;re匹配中文&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;因为还没有接触过dom解析，所以使用re来匹配需要的信息,但是遇到了几个问题.第一个是无法匹配中文.
无法匹配中文的原因大概了解了一下，是应为编码的缘故,将要匹配的源和匹配的表达式都转换成&lt;code class=&quot;highlighter-rouge&quot;&gt;bytes&lt;/code&gt;为单位的编码，便能成功匹配了.&lt;/li&gt;
  &lt;li&gt;一开始是看浏览器上面的源码，从而提取出关系，进行匹配，但是空格是被浏览器解析成空格了的.然而一一开始不知道，就直接在匹配表达式中输入空格，结果怎么都匹配不上.
结果后来把抓下来的源码打印出来，才发现空格是的源码是&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;nbsp&lt;/code&gt;，而不是空格.
&lt;strong&gt;所以以后提取信息的时候不要完全相信浏览器上看到的源码，要根据抓下来的源码.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;多线程之间的数据共享和缓冲问题&quot;&gt;多线程之间的数据共享和缓冲问题&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;因为使用了多线程爬，然后将爬到的信息是放入一个队列,另外的线程在取这些信息进行相应的处理,所以这里面就涉及到了同步的问题.
这是典型的生产者消费者模型,所以需要一把同步锁,然后也不应该一直等,所以有两个条件变量,一个生产者，一个消费者.然后这两个条件变量使用同以把锁.这样就可以通过条件变量来指定wait的线程以及唤醒的线程了.&lt;/li&gt;
  &lt;li&gt;线程被唤醒之后的执行位置
一开始不知道线程被唤醒时是从哪儿开始执行的,所以使用的是if来判断wait条件
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cond&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;然后当线程被唤醒后，是直接从wait的地方开始执行,所以被唤醒后却可能出现队列为空的情况,所以需要被唤醒之后再次判断.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cond&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 17 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/python%E7%88%AC%E8%99%AB%E6%80%BB%E7%BB%93-%E7%88%AC%E5%8F%96%E6%A0%A1%E5%9B%AD%E7%BD%91%E4%B8%8A%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/python%E7%88%AC%E8%99%AB%E6%80%BB%E7%BB%93-%E7%88%AC%E5%8F%96%E6%A0%A1%E5%9B%AD%E7%BD%91%E4%B8%8A%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF/</guid>
        
        <category>爬虫</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>Python学习之线程和进程  线程间同步</title>
        <description>
</description>
        <pubDate>Tue, 16 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B-%E7%BA%BF%E7%A8%8B%E9%97%B4%E5%90%8C%E6%AD%A5/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B-%E7%BA%BF%E7%A8%8B%E9%97%B4%E5%90%8C%E6%AD%A5/</guid>
        
        
      </item>
    
      <item>
        <title>爬虫实战--爬取百度贴吧的帖子</title>
        <description>
</description>
        <pubDate>Sat, 13 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/python%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98-%E7%88%AC%E5%8F%96%E7%99%BE%E5%BA%A6%E8%B4%B4%E5%90%A7%E7%9A%84%E5%B8%96%E5%AD%90/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/python%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98-%E7%88%AC%E5%8F%96%E7%99%BE%E5%BA%A6%E8%B4%B4%E5%90%A7%E7%9A%84%E5%B8%96%E5%AD%90/</guid>
        
        <category>爬虫</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>爬虫实战--爬取糗事百科段子</title>
        <description>&lt;p&gt;首先,手动打开糗事百科的网址,然后正常浏览热门，发现糗事百科热门的网址形成是这样的
 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://www.qiushibaike.com/8hr/page/3/&lt;/code&gt;:最后面的3代表是第一页&lt;/p&gt;

&lt;p&gt;然后使用urllib尝试访问一下,看看能不能下载&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python3&quot;&gt;from urllib import request
page = 2
url = 'http://www.qiushibaike.com/8hr/page/' + str(page)

try:
    with request.urlopen(url) as response:
        print(response.read().decode('utf-8'))
except Exception as e:
    print(e)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;无情的拒绝了,加上用户代理试试&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;user_agent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'User-Agent'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_agent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;custom_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uelopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;custom_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;再次访问,成功了&lt;/p&gt;

&lt;p&gt;打开百科的源码,通过分析可知,每个段子是由一个&lt;code class=&quot;highlighter-rouge&quot;&gt;class=&quot;article bolck untagged md15&quot;&lt;/code&gt;的div包裹着.然后就是写正则表达式来匹配段子了.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;custom_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;lt;div.*?author.*?&amp;lt;h2&amp;gt;(?P&amp;lt;auth&amp;gt;.*?)&amp;lt;/h2&amp;gt;.*?content.*?&amp;lt;span&amp;gt;(?P&amp;lt;body&amp;gt;.*?)&amp;lt;/span&amp;gt;(?P&amp;lt;img&amp;gt;.*?)stats.*?'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这样就吧每个段子的作者和内容爬下来了&lt;/p&gt;
</description>
        <pubDate>Fri, 12 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/python%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98-%E7%88%AC%E5%8F%96%E7%B3%97%E4%BA%8B%E7%99%BE%E7%A7%91%E7%9A%84%E6%AE%B5%E5%AD%90/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/python%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98-%E7%88%AC%E5%8F%96%E7%B3%97%E4%BA%8B%E7%99%BE%E7%A7%91%E7%9A%84%E6%AE%B5%E5%AD%90/</guid>
        
        <category>爬虫</category>
        
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>python学习之网络编程--TCP/IP</title>
        <description>&lt;h1 id=&quot;日后补上吧&quot;&gt;日后补上吧&lt;/h1&gt;
</description>
        <pubDate>Fri, 12 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-TCPIP/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-TCPIP/</guid>
        
        <category>python</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>python学习之线程和进程--多进程</title>
        <description>&lt;h1 id=&quot;日后补上多线程和多进程编程还有什么线程池等待唤醒等这些廖雪峰的博客都没有-还有异步io和分布式进程&quot;&gt;日后补上多线程和多进程编程,还有什么线程池，等待唤醒等.这些廖雪峰的博客都没有, 还有异步IO和分布式进程&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;多线程对基本类型变量的操作无效,原因是pytho的变量作用域: &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;def&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;lambda&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 一个基本类型变量&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 报错&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 申明一个全局变量&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;#不会错&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# 结果为8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;customor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cond&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 需要注意的是,当线程wait()以后，被唤醒了是继续从wait()的地方开始执行的.所以它醒来以后就会直接pop()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cond&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 这样它被唤醒之后还会再次判断&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 12 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B-%E5%A4%9A%E8%BF%9B%E7%A8%8B/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B-%E5%A4%9A%E8%BF%9B%E7%A8%8B/</guid>
        
        <category>python</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>python学习之异步--协程</title>
        <description>&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;协程&lt;/code&gt;:又叫做微线程,纤程, Coroutine&lt;/p&gt;
</description>
        <pubDate>Fri, 12 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%BC%82%E6%AD%A5-%E5%8D%8F%E7%A8%8B/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%BC%82%E6%AD%A5-%E5%8D%8F%E7%A8%8B/</guid>
        
        <category>python</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>python学习之面向对象--访问限制</title>
        <description>&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Tom&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Jim'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Jim&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过上面的例子，可见，是可以任意更改实例对象的属性的,但是这样就失去的封装的意义,所以我们要对类外访问类成员加以限制&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;^*&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;报错&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这样，通过在属性名前面加上&lt;code class=&quot;highlighter-rouge&quot;&gt;__&lt;/code&gt;就能限制该属性为私有的了.&lt;/p&gt;
</description>
        <pubDate>Wed, 10 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E8%AE%BF%E9%97%AE%E9%99%90%E5%88%B6/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E8%AE%BF%E9%97%AE%E9%99%90%E5%88%B6/</guid>
        
        <category>python</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>python学习之面向对象--获取对象信息</title>
        <description>&lt;h3 id=&quot;判断变量的数据类型&quot;&gt;判断变量的数据类型&lt;/h3&gt;

&lt;p&gt;当我们拿到一个对象的引用时,如何知道这个对象是什么类型的呢 ？&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;type()&lt;/code&gt;:基本类型都可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;, 基本类型就是指数字,字符，字符串等&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;gt;&amp;gt;&amp;gt; type('&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;')&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;class '&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;函数或者类，也可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;isinstance&lt;/code&gt;:&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;只能获得变量是什么类型的，但是更多时候，我们需要的不仅仅是获得变量是什么类型，而是判断变量是不是某种类型.然而type除了那些基本类型用&lt;code class=&quot;highlighter-rouge&quot;&gt;if type(123) == int&lt;/code&gt;等做比较,比如类，函数等类型就没法做比较了.&lt;/p&gt;

&lt;p&gt;上面这种情况我们就可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;isinstance&lt;/code&gt;来判断某个变量是不是某种类型的了.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同时，&lt;code class=&quot;highlighter-rouge&quot;&gt;isinstance&lt;/code&gt;的第二个参数还可以是&lt;code class=&quot;highlighter-rouge&quot;&gt;tuple&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt;类型,表示判断是不是其中一种&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 123 是不是int 或者str&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# a 是Animal或者int&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;获取对象的所有属性和方法&quot;&gt;获取对象的所有属性和方法&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dir()&lt;/code&gt;:用法很简单,&lt;code class=&quot;highlighter-rouge&quot;&gt;dir(var)&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;好多东西&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hasattr&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;geattr&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;seattr&lt;/code&gt;:这函数可以配合操作对象的属性&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Tom'&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hasattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Tom&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;setattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'tel'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果试图访问一个不存在的属性会报错&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'sex'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;报错&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'sex'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'未找到'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 设置获取失败的返回值&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'未找到'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 10 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E8%8E%B7%E5%8F%96%E5%AF%B9%E8%B1%A1%E4%BF%A1%E6%81%AF/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E8%8E%B7%E5%8F%96%E5%AF%B9%E8%B1%A1%E4%BF%A1%E6%81%AF/</guid>
        
        <category>python</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>python学习之面向对象--类和实例</title>
        <description>&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;类方法&lt;/code&gt;:python中类方法的第一个参数永远是&lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;会指向实例本身，并且调用的时候不用传第一个参数,系统会自动将实例作为第一个参数穿进去&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__init__&lt;/code&gt;:实例创建后会执行的函数,叫初始化函数,可以设置参数，如果设置了参数，那么在实例化对象的时候也要传参.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 要传递和__init__方法一致的参数&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 10 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E7%B1%BB%E5%92%8C%E5%AE%9E%E4%BE%8B/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E7%B1%BB%E5%92%8C%E5%AE%9E%E4%BE%8B/</guid>
        
        <category>python</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>python学习之面向对象--获取对象信息</title>
        <description>&lt;p&gt;python 是动态语言,类的属性可以动态的添加或参数&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Tom'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上述中,&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;便是类属性, 而age则是实例属性,因为&lt;code class=&quot;highlighter-rouge&quot;&gt;age&lt;/code&gt;是在创建对象后才有的.&lt;/p&gt;

&lt;p&gt;或者当我们实例化了一个对象之后,也可以再动态的给它添加方法或者属性.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 添加属性&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'12345678'&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'wang～'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 添加方法&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;types&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MethodType&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MethodType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;动态的添加方法就有很多内容了.&lt;/p&gt;

&lt;p&gt;首先要了解，类方法和普通函数是有区别的,一个是绑定到实例的,一个只是普通的&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;在类定义之后,对象实例化之前&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;比如说早已经定义好了&lt;code class=&quot;highlighter-rouge&quot;&gt;class Animal&lt;/code&gt;,在后来使用的某一个地方,需要给这个类添加一个方法,只需定义个函数,然后给类添加就行&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Tom'&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# 在这里添加cry方法&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'wang~'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cry&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# 会自动绑定&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tom&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;在对象实例化之后&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;下面这个方法是不行的,因为不会自动绑定到实例&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'wang~'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cry&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果要&lt;strong&gt;绑定新方法到实例，用&lt;code class=&quot;highlighter-rouge&quot;&gt;MethodType&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;types&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MethodType&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'wang~'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MethodType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Tom&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;使用__slots__来限定方法的添加&lt;/code&gt;:很多时候,我们不能任由后来无节制的添加属性,可以在定义类的时候使用&lt;code class=&quot;highlighter-rouge&quot;&gt;__slots__&lt;/code&gt;来限定.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__slots__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'tel'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 限定后来就只能添加'age','tel'两个属性&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;需要注意&lt;/strong&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;__slots__&lt;/code&gt;是不可继承的.也就是说子类不会继承父类的这些限定&lt;/p&gt;
</description>
        <pubDate>Wed, 10 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7%E5%92%8C%E7%B1%BB%E5%B1%9E%E6%80%A7/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7%E5%92%8C%E7%B1%BB%E5%B1%9E%E6%80%A7/</guid>
        
        <category>python</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>python学习之面向对象--多继承</title>
        <description>&lt;p&gt;python中允许使用多继承&lt;/p&gt;

&lt;p&gt;通常情况下,我们是保留一个主线继承,然后添加一些额外的功能混入继承里面.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c&quot;&gt;# 最基础的Animal类&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;i'm Animal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 细分为哺乳动物类和鸟类&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mammal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;breed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'胎生...'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bird&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;breed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'卵生...'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# 还想在分为可飞行和不可飞行&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MammalFlyable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mammal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;i can fly..&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MammalRunable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mammal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;i can run..&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BirdFlyable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bird&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;i can fly..&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BirdRunable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bird&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;i can run..&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果在加一些,那么类的定义数量就成倍增长了.&lt;/p&gt;

&lt;p&gt;但是如果我们吧&lt;code class=&quot;highlighter-rouge&quot;&gt;Flyable&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Runable&lt;/code&gt;单独写成一个类呢.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Flyable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'i can fly'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Runable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'i can run'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# 然后定义鸟和哺乳动物&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mammal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;breed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'胎生...'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bird&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flyable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;breed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'卵生...'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样就实现了飞和走的功能，又使得飞和走能重复利用，而不是需要的时候又在定义一遍.&lt;/p&gt;

&lt;p&gt;然后我们的继承还是按照动物来说比较合适的分类来继承的,只是&lt;strong&gt;额外添加&lt;/strong&gt;了一些次要的功能,这种方式叫做&lt;code class=&quot;highlighter-rouge&quot;&gt;Mixin:混入&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;有点像java的接口&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;继承冲突&lt;/strong&gt;:多继承的情况下,可能第一个父类有了某个方法,第二个父类也有这个方法.这时候子类就会出现冲突,到底用哪个方法呢.&lt;/p&gt;

&lt;p&gt;答案是:&lt;strong&gt;先继承的哪个父类的&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 10 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%A4%9A%E7%BB%A7%E6%89%BF%E5%92%8CMixin/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%A4%9A%E7%BB%A7%E6%89%BF%E5%92%8CMixin/</guid>
        
        <category>python</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>python学习之面向对象--变量作用域</title>
        <description>&lt;p&gt;python中能改变变量作用域的三个关键字&lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;def&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;lambda&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# 没问题,可以访问&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 对不起,未定义并初始化变量就使用了&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;原因在于def改变了a的作用域,对于def中的a，他的作用域就只是def内。&lt;/p&gt;

&lt;p&gt;如果要在def内使用一个外部的变量,需要在def内申明一个外部变量.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样就可以了&lt;/p&gt;
</description>
        <pubDate>Wed, 10 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F/</guid>
        
        <category>python</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>python学习之面向对象--使用@property</title>
        <description>&lt;p&gt;通常情况,我们封装属性是为了能更好的限制属性不被任意修改.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;


&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;999&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# 显然，成绩这么高不太符合逻辑&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以我们要对score进行赋值的限制,通常,我们使用函数来进行过滤,并且把需要保护的数据设为私有的&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__score__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;TypeError&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__score__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样,当我们想给属性设置值的时候,只能通过调用方法,从而保证数据的安全和有效&lt;/p&gt;

&lt;p&gt;但随之而来的另一个问题,我们想访问的时候也只能通过方法了.所以，上面的类还要添加一个方法&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__score__&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后我们使用的时候就通过调用函数使用. 但是这样好麻烦,能像访问public属性那样访问私有属性，又能做到函数的过滤，那不是好? 所以, &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt;&lt;/code&gt;来了.&lt;/p&gt;

&lt;p&gt;这样改:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__score__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@property&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__score__&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@score.setter&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;TypeError&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__score__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;999&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;TypeError&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;恩，好了，方便多了&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt;&lt;/code&gt;把&lt;code class=&quot;highlighter-rouge&quot;&gt;score&lt;/code&gt;方法变成了可以直接读的舒心, 然后&lt;code class=&quot;highlighter-rouge&quot;&gt;score.setter&lt;/code&gt;又可以把另一个方法变成可以设置值的属性.&lt;/p&gt;
</description>
        <pubDate>Wed, 10 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%BD%BF%E7%94%A8@property/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%BD%BF%E7%94%A8@property/</guid>
        
        <category>python</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>python学习之函数式编程--返回函数</title>
        <description>&lt;h2 id=&quot;函数作为返回值&quot;&gt;函数作为返回值&lt;/h2&gt;

&lt;p&gt;函数可以作为参数，也可以作为返回值.记住，&lt;strong&gt;函数的名字就是一个变量，返回变量就行了&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lazy_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;


&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lazy_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# f 是一个函数，而不是和&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#调用f求和&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 此时的sum才是和&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;闭包&quot;&gt;闭包&lt;/h2&gt;

&lt;p&gt;一个函数(大函数), 里面定义了一个新函数(小函数),并且大函数的返回值是一小函数.而小函数里面引用了大函数的参数或者局部变量,这种行为叫做闭包.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;总结就是说:将自己的参数或者变量放在一个新函数中返回出去的行为叫做闭包&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;需要注意的是，返回的返回的那个参数或者局部变量最好是不可变的&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;看下面的例子:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面的这个函数，将f放在一个列表中返回出来.&lt;/p&gt;

&lt;p&gt;下面执行&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;显然，不是1,4,9.&lt;/p&gt;

&lt;p&gt;原因是这返回的三个函数都共同使用了一个变量&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;,而&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;是不停在改变的， 所以三个&lt;code class=&quot;highlighter-rouge&quot;&gt;f1&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;f2&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;f3&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;都是保持同步变化的.所以出现了上面的结果.&lt;/p&gt;

&lt;p&gt;所以,当要将局部变量通过闭包返回出来的时候，要保证改变量不会再被更改，或者你明白你想要做什么.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# 调用f(i), i是确定的，返回的是g,其实fs里面放入的是函数g&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# f1(), f2(), f3() 调用的是g&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 10 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E8%BF%94%E5%9B%9E%E5%87%BD%E6%95%B0/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E8%BF%94%E5%9B%9E%E5%87%BD%E6%95%B0/</guid>
        
        <category>python</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>python学习之函数式编程--装饰器</title>
        <description>&lt;p&gt;我们定义一个求加法的函数:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在我想知道调用这个函数时的系统时间:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timezone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2017&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可是这样，这个函数就废了。因为其他不想得到时间的人就不能调用这个函数了.要是打印时间这个功能可以在我需要的时候启用，不要的时候就不用，那该多好.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timezone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 想要看时间&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2017&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 不想看时间&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;诶，居然实现了. 不过有一点不好，只要我一调用&lt;code class=&quot;highlighter-rouge&quot;&gt;print_now&lt;/code&gt;就会立刻打印时间，比如&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2017&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样得到的并不是我调用add的时间.能不能只有在我调用的时候再打印呢?&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timezone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_add&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 此处的add不再是以前的add,而是一个新的函数，将add变量指向这个新的函数了&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2017&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 完美,不过代码不够简洁&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 用下面的方式调用装饰函数&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@print_now&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以上就是装饰器的实现.&lt;code class=&quot;highlighter-rouge&quot;&gt;print_now&lt;/code&gt;装饰器实现了打印当前时间的功能.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;装饰器&lt;/code&gt;:动态的给函数添加某些功能&lt;/p&gt;

&lt;p&gt;需要注意一些问题&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;保持名字的统一&lt;/strong&gt;:由于我们是传入了一个函数，返回一个新的函数,所以返回出来的那个函数不再是以前的那个函数,但是有的地方需要依据函数名识别,所以我们有必要使得返回的新函数与传进来的函数同名,只需要在装饰函数定义那个新函数的前面使用装饰器&lt;code class=&quot;highlighter-rouge&quot;&gt;functools.wraps&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tunctools&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@functools.wraps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timezone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_add&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;装饰器本身需要传参,比如在输出时间的时候顺便也输出名字,但是名字是要从外面作为参数传进去.&lt;/p&gt;

&lt;p&gt;这个时候，就需要再外层再次加上一个函数了.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_name_and_now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@functools.wraps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timezone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_add&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_now&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@print_name_and_now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;


&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Tom&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2017&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;解释一下,最先执行的是最外层，返回了一个&lt;code class=&quot;highlighter-rouge&quot;&gt;print_now&lt;/code&gt;, 这个才是真正的装饰器&lt;/p&gt;

&lt;p&gt;但是更好的办法是使用一个装饰器来应对有参和无参的情况&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;callable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timezone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decorator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;# 这才是真的装饰器&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timezone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_add&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decorator&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# 返回真正的装饰器&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 10 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E8%A3%85%E9%A5%B0%E5%99%A8/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E8%A3%85%E9%A5%B0%E5%99%A8/</guid>
        
        <category>python</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>python学习之函数式编程--匿名函数</title>
        <description>&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lamda&lt;/code&gt;:表示匿名函数的关键字,冒号前边表示参数,冒号后面表示返值的计算表达式,返回值就是表达式的值.&lt;/p&gt;

&lt;p&gt;匿名函数也是一个对象,可以赋值给变量:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;也可以返回一个lambda函数:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 10 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/</guid>
        
        <category>python</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>python学习之函数式编程--偏函数</title>
        <description>&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;print()&lt;/code&gt;是我们经常调用的系统函数.&lt;/p&gt;

&lt;p&gt;但是&lt;code class=&quot;highlighter-rouge&quot;&gt;print()&lt;/code&gt;函数默认以换行结尾,但是有时候我们不想换行,所以我们可以在调用的时候给它一个参数:&lt;code class=&quot;highlighter-rouge&quot;&gt;print(some_str, end=',')&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果我们有很多需要以&lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt;结尾的需求，则每次调用&lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt;的时候都给它传一个&lt;code class=&quot;highlighter-rouge&quot;&gt;end=&lt;/code&gt;的参数,自然有些麻烦,如果我们能设置&lt;code class=&quot;highlighter-rouge&quot;&gt;end=&lt;/code&gt;这个参数一个默认值，那该多好呀.&lt;/p&gt;

&lt;p&gt;这时候，偏函数来了.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;偏函数&lt;/code&gt;:把已知函数的某以参数固定，并返回一个固定了某些参数的新函数&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;functools&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my_print&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;functools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 结尾就不是换行了&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 10 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E5%81%8F%E5%87%BD%E6%95%B0/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E5%81%8F%E5%87%BD%E6%95%B0/</guid>
        
        <category>python</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>python学习之IO--文件读写</title>
        <description>&lt;p&gt;很多现代的操作系统是不允许程序直接往磁盘操作的,所以我们想操作磁盘的时候,是请求操作系统打开一个文件对象(文件描述符),然后调用的是操作系统给我们提供的接口.&lt;/p&gt;

&lt;h3 id=&quot;读文件&quot;&gt;读文件&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;open(path, mode)&lt;/code&gt;:给定一个文件路径和打开文件的模式,返回一个&lt;code class=&quot;highlighter-rouge&quot;&gt;File&lt;/code&gt;对象&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/home/user/a.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果文件不存在,会抛出异常.如果打开成功,则可以调用&lt;code class=&quot;highlighter-rouge&quot;&gt;read()&lt;/code&gt;方法来读取文件内容,&lt;code class=&quot;highlighter-rouge&quot;&gt;read()&lt;/code&gt;返回&lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt;对象&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'Hello, World'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;操作完了之后,调用&lt;code class=&quot;highlighter-rouge&quot;&gt;close()&lt;/code&gt;方法关闭文件,释放资源.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通常,为了能保证文件关闭,都是用&lt;code class=&quot;highlighter-rouge&quot;&gt;try/catch/finally&lt;/code&gt;包裹的&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但是挺麻烦,所以python引入了&lt;code class=&quot;highlighter-rouge&quot;&gt;with&lt;/code&gt;来自动调用&lt;code class=&quot;highlighter-rouge&quot;&gt;close&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'home/user/a.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;read()&lt;/code&gt;会一次读完文件所有东西到内存,如果文件有10G,内存就爆了. 所以可以&lt;code class=&quot;highlighter-rouge&quot;&gt;read(size)&lt;/code&gt;来每次读取&lt;code class=&quot;highlighter-rouge&quot;&gt;size&lt;/code&gt;大小的内容.或者使用&lt;code class=&quot;highlighter-rouge&quot;&gt;readline()&lt;/code&gt;来每次读一行.&lt;code class=&quot;highlighter-rouge&quot;&gt;readlimes()&lt;/code&gt;一次读取所有内容,并返回一个&lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;读取二进制文件&quot;&gt;读取二进制文件&lt;/h3&gt;

&lt;p&gt;默认是读取文本文件的,所以可以以字符为单位读取.但是如图片，视屏等就只能以二进制读取,只需设置mode为&lt;code class=&quot;highlighter-rouge&quot;&gt;'rb'&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;读取非utf-8编码&quot;&gt;读取非UTF-8编码&lt;/h3&gt;

&lt;p&gt;默认读文本文件是按&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;的编码读取的,如果读的文本不是这个编码,则需要指定编码.&lt;code class=&quot;highlighter-rouge&quot;&gt;read(path, mode, encoding='gbk')&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;写入文件&quot;&gt;写入文件&lt;/h3&gt;

&lt;p&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;write()&lt;/code&gt;来写入文件,默认编码是&lt;code class=&quot;highlighter-rouge&quot;&gt;UTFT-8&lt;/code&gt;，也可以在参数中指定写入特定编码.&lt;/p&gt;
</description>
        <pubDate>Wed, 10 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8BIO-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8BIO-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/</guid>
        
        <category>python</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>python学习之IO--文件读写</title>
        <description>&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;os&lt;/code&gt;:操作系统相关信息&lt;/p&gt;

&lt;h3 id=&quot;获取操作系统名称&quot;&gt;获取操作系统名称&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;posix&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;#posix是linux, unix, macos,  如果结果是nt,这表示是windows系统&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# 有关操作系统更加详细的信息,该函数windows下不能使用&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;获取操作系统环境变量&quot;&gt;获取操作系统环境变量&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-pathon&quot;&gt;import os
&amp;gt;&amp;gt;&amp;gt; os.environ
...   #所有的环境变量

&amp;gt;&amp;gt;&amp;gt; os.environ.get('PATH')   # 可以指定特定的环境变量
...   # 指定名字的环境变量


&amp;gt;&amp;gt;&amp;gt; os.environ.get('x', 'default')   #如果不存在,可以指定返回值
'default'
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;操作文件和目录&quot;&gt;操作文件和目录&lt;/h3&gt;

&lt;p&gt;有关文件和目录相关的都存在&lt;code class=&quot;highlighter-rouge&quot;&gt;os.path&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;os&lt;/code&gt;模块中&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 获取当前的绝对路径&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abspath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;python&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;创建一个目录&quot;&gt;创建一个目录&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 需要先将要创建的目录表示出来&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;入后再来填坑吧&quot;&gt;入后再来填坑吧&lt;/h1&gt;
</description>
        <pubDate>Wed, 10 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8BIO-%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8BIO-%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95/</guid>
        
        <category>python</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>python学习之IO--序列化</title>
        <description>&lt;p&gt;通常情况下,我们采用&lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt;序列化。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 创建想序列化的对象&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'tel'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'133422XXXXX'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'j.json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'w'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 这样会报错,不能直接将一个对象写入文件&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# 这样就不会报错,应为兑现被序列化了，返回的是一个字符串,所以写入的是一个字符串&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;



&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'j.json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;j2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 得到的是有一个字符串&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;d2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 得到一个对象&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样就实现了对象往文件的存储和读取&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'tel'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'133422XXXXX'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'j2.json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'w'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;#直接把对象序列化并存入file-like 对象&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'j2.json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 直接把文件中的内容实例化为对象&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但是&lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt;不知道如何序列化一个对象.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Tom'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'F'&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%*&amp;amp;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;报错&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# 不知道怎么序列化对象&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;所以我们只要告诉他怎么序列化一个对象就可以了&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stu2dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'sex'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stu2dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;反序列化的时候也要给定方法&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dict2stu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'sex'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object_hook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dict2stu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 通过序列化的j获得stu对象&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 10 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8BIO-%E5%BA%8F%E5%88%97%E5%8C%96/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8BIO-%E5%BA%8F%E5%88%97%E5%8C%96/</guid>
        
        <category>python</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>python学习之基础--迭代</title>
        <description>&lt;p&gt;迭代，依次遍历访问可迭代对象中的元素。&lt;/p&gt;

&lt;p&gt;可迭代对象的判断:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如何像其他语言一样访问可迭代对象的下标:使用&lt;code class=&quot;highlighter-rouge&quot;&gt;enumerate&lt;/code&gt;函数&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'C'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样就达到了访问值的同时访问下标的效果.&lt;/p&gt;
</description>
        <pubDate>Tue, 09 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E7%A1%80-%E8%BF%AD%E4%BB%A3/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E7%A1%80-%E8%BF%AD%E4%BB%A3/</guid>
        
        <category>python</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>python学习之基础--生成器和迭代器</title>
        <description>&lt;h1 id=&quot;列表生成式&quot;&gt;列表生成式&lt;/h1&gt;

&lt;p&gt;有时候，我们需要生成一个具有某种规律的列表,如&lt;code class=&quot;highlighter-rouge&quot;&gt;[1,2,3,4,5,6,7,8,9]&lt;/code&gt;,或者&lt;code class=&quot;highlighter-rouge&quot;&gt;[2,4,6,8,10]&lt;/code&gt;等.列表里面的值都是可以通过一个表达式得到的.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;L1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;L2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;L3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;简单来说语法是这样的:&lt;code class=&quot;highlighter-rouge&quot;&gt;[值 值生成方式]&lt;/code&gt;, 其中值的生成方式可以有很多，比如来自别的列表等，值的过滤方法也很多，可以进行if判断等各种&lt;/p&gt;

&lt;h1 id=&quot;生成器generator&quot;&gt;生成器(generator)&lt;/h1&gt;

&lt;p&gt;上述的列表生成式已经可以帮我们做很多事情了，但是如果生成列表量很大，生成的算法有特别复杂的话，势必会浪费很多资源.基于这个原因，如果出一种可以不一开始就生成值，而只是将生成值的方法记录下来，当需要值的时候再去计算，就会使得资源能有效利用.这就是&lt;strong&gt;生成器&lt;/strong&gt; .&lt;/p&gt;

&lt;p&gt;构造生成器的方法:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;将列表生成式的&lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt;换成&lt;code class=&quot;highlighter-rouge&quot;&gt;()&lt;/code&gt;即可.&lt;/li&gt;
  &lt;li&gt;在函数中使用&lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt;关键字.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 使用()生成&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;L1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# 使用yield生成&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 定义&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 使用,生成两个生成器&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;L1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;L2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 迭代生成器&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;除了使用for循环迭代，还有一种不常用的&lt;code class=&quot;highlighter-rouge&quot;&gt;next()&lt;/code&gt;迭代&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&amp;amp;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;报错&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;L1只有两个项, 再调用next迭代的话就会报错.&lt;/p&gt;

&lt;h1 id=&quot;迭代器和可迭代对象&quot;&gt;迭代器和可迭代对象&lt;/h1&gt;

&lt;p&gt;可以被&lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt;迭代的这类对象统称为可迭代对象:&lt;code class=&quot;highlighter-rouge&quot;&gt;Iterable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;可以被&lt;code class=&quot;highlighter-rouge&quot;&gt;next()&lt;/code&gt;调用并不断返回一个值的对象叫做迭代器:&lt;code class=&quot;highlighter-rouge&quot;&gt;Iterator&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;生成器都是&lt;code class=&quot;highlighter-rouge&quot;&gt;Iterator&lt;/code&gt;对象.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Iterable&lt;/code&gt;对象的判断&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Iterable&lt;/code&gt;转换成&lt;code class=&quot;highlighter-rouge&quot;&gt;Iterator&lt;/code&gt;:使用&lt;code class=&quot;highlighter-rouge&quot;&gt;iter()&lt;/code&gt;函数&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为什么有的可以是迭代器， 有的却只能是可迭代对象&lt;/p&gt;

&lt;p&gt;list等可迭代对象都有一个共同特征，他们的值已经是固定了的。而可迭代兑现的值计算是惰性的，当使用的时候才会去计算.二一个&lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt;等他们的值必须是固定的，而不能等待需要使用的时候再去计算，这便是阻止他们成为迭代器的原因.&lt;/p&gt;
</description>
        <pubDate>Tue, 09 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E7%A1%80-%E7%94%9F%E6%88%90%E5%BC%8Fand%E7%94%9F%E6%88%90%E5%99%A8and%E8%BF%AD%E4%BB%A3%E5%99%A8/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E7%A1%80-%E7%94%9F%E6%88%90%E5%BC%8Fand%E7%94%9F%E6%88%90%E5%99%A8and%E8%BF%AD%E4%BB%A3%E5%99%A8/</guid>
        
        <category>python</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>python学习之基础--数据类型</title>
        <description>&lt;h1 id=&quot;python的数据类型&quot;&gt;python的数据类型&lt;/h1&gt;

&lt;h3 id=&quot;浮点数&quot;&gt;浮点数&lt;/h3&gt;

&lt;p&gt;科学计数法的表示:&lt;code class=&quot;highlighter-rouge&quot;&gt;1.23e9=1.23*10^9&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;1.23e-9=1.23*10^-9&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;python中的整数和浮点数都没有范围限制， 但超过一定大的&lt;strong&gt;浮点数&lt;/strong&gt;会直接用&lt;code class=&quot;highlighter-rouge&quot;&gt;inf&lt;/code&gt;(无穷大)表示.&lt;/p&gt;

&lt;h3 id=&quot;字符串&quot;&gt;字符串&lt;/h3&gt;

&lt;p&gt;字符串:双引号之间的单引号会被当做正常字符，同理，单引号之间的双引号也会被当做正常的字符&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Your name is &quot;marry&quot;, age is 25'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;marry&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Your name is 'marry', age is 25&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'marry'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;总结下来就死一句话， 引号里面所有非引号的东西都会被当做字符处理.&lt;/p&gt;

&lt;p&gt;但是如果引号里面需要同时有同类型的引号就需要转义处理:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Hello. &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;marry&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, age is 25'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'marry'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但是有时候也不想转义，就想输入的就是我想表达的，这时候只要在引号前面加上r:&lt;code class=&quot;highlighter-rouge&quot;&gt;r'...'&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'\n\r&quot;nihao/p.fasd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;布尔值&quot;&gt;布尔值&lt;/h3&gt;

&lt;p&gt;python中值为False的几个值:&lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;''&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;{}&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;()&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;,’False’.共8个.&lt;/p&gt;

&lt;p&gt;需要注意的是python的比较:&lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;===&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;is&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt;:比较的是值， 只要值相等，就成立
&lt;code class=&quot;highlighter-rouge&quot;&gt;===&lt;/code&gt;:比较的是内存地址，两个变量应用的内存地址相同，才成立
&lt;code class=&quot;highlighter-rouge&quot;&gt;is&lt;/code&gt;:和&lt;code class=&quot;highlighter-rouge&quot;&gt;===&lt;/code&gt;一样。&lt;/p&gt;

&lt;h3 id=&quot;空值none&quot;&gt;空值(None)&lt;/h3&gt;

&lt;p&gt;空值是python的一个特殊的值，&lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt;代表没有，没有任何意义，不同于&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;， &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;是有意义的。&lt;/p&gt;

&lt;p&gt;注意，None除了和None，和其他任意都不相等.&lt;/p&gt;

&lt;h3 id=&quot;python的除法&quot;&gt;python的除法&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;//&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;%&lt;/code&gt;:三个是相对于其他语言有所不同的.
&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;:就是普通的除法，精确的除法， 得到的是精确值.
&lt;code class=&quot;highlighter-rouge&quot;&gt;//&lt;/code&gt;:这是取整，将得到的结果舍弃小数部分，取整数部分.
&lt;code class=&quot;highlighter-rouge&quot;&gt;%&lt;/code&gt;:这是取余。取两数相除结果的余数.&lt;/p&gt;
</description>
        <pubDate>Tue, 09 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E7%A1%80-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E7%A1%80-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
        
        <category>python</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>python学习之基础--字符串的格式化与处理</title>
        <description>&lt;h3 id=&quot;分割字符串&quot;&gt;分割字符串&lt;/h3&gt;

&lt;p&gt;1.使用切片&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python3&quot;&gt;&amp;gt;&amp;gt;&amp;gt; s = 'abcde'
&amp;gt;&amp;gt;&amp;gt; s[:2]
'ab'    # 左起为0,右边是开区间
&amp;gt;&amp;gt;&amp;gt; s[-3:]
'cde'    # 从右边起第一个为-1,-2,-3...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.使用分割函数:&lt;code class=&quot;highlighter-rouge&quot;&gt;str.split&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python3&quot;&gt;'''
str.split(sep=None, maxsplit=-1)

function: 正向分割字符串

arguments:
    sep: 分割的标志
    maxsplit: 分割的次数

return:
    list of str
'''
&amp;gt;&amp;gt;&amp;gt; s = '1.2.3.4.5.6.7'
&amp;gt;&amp;gt;&amp;gt; s.split('.')
['1','2','3','4','5','6','7']

&amp;gt;&amp;gt;&amp;gt; s.split('.', 1)
['1', '2.3.4.5.6.7']
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.使用分割函数:&lt;code class=&quot;highlighter-rouge&quot;&gt;str.rsplit&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python3&quot;&gt;'''
str.rsplit(sep=None, maxsplit=-1)

function: 反向分割字符串

arguments:
    sep: 分割的标志
    maxsplit: 分割的次数

return:
    list of str
'''
&amp;gt;&amp;gt;&amp;gt; s = '1.2.3.4.5.6.7'
&amp;gt;&amp;gt;&amp;gt; s.rsplit('.')
['1','2','3','4','5','6','7']

&amp;gt;&amp;gt;&amp;gt; s.rsplit('.', 1)
['1.2.3.4.5.6', '7']
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Tue, 09 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E7%A1%80-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%A4%84%E7%90%86%E4%B8%8E%E6%A0%BC%E5%BC%8F%E5%8C%96/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E7%A1%80-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%A4%84%E7%90%86%E4%B8%8E%E6%A0%BC%E5%BC%8F%E5%8C%96/</guid>
        
        <category>python</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>python学习之基础--字符串和编码</title>
        <description>&lt;h1 id=&quot;编码的问题&quot;&gt;编码的问题&lt;/h1&gt;

&lt;p&gt;计算机最底层是以0,1为基础的数字逻辑。也就是说计算机最终处理的是数字，而且是二进制的数字。早期的计算机采用的是8比特(bit)作为一个字节，也就是8位二进制，所以一个字节能表示的范围是00000000(b)~11111111(b)共255个整数.&lt;/p&gt;

&lt;p&gt;但是我们日常使用的都是文字，图片，声音等，所以我们就需要约定某种序列的数字来表示某个字母等。这个过程就叫做编码。&lt;/p&gt;

&lt;p&gt;最早的计算机是美国发明的，而且美国的文字里面只有26个字母和其他一些常用符号，所以早起的计算机只有美国常用的127个字符被编码到计算机里。这个最早的编码被成为&lt;code class=&quot;highlighter-rouge&quot;&gt;ASCII&lt;/code&gt;编码.上面我们说到，一个字节的表示范围是0-255，所以一个字节就足够编码127个字符了.&lt;/p&gt;

&lt;p&gt;但是随着计算机在不同国家的普及，计算机就需要表示不同国家的文字，所以每个国家都会针对自己国家的文字进行编码设计，从而让计算机能正常显示。但问题是，有的国家的文字很多，比如中国的汉字，元超255个。所以说一字节就不够编码中文了，再加上还不能和&lt;code class=&quot;highlighter-rouge&quot;&gt;ASCII&lt;/code&gt;中的编码重复.所以中国就制定&lt;code class=&quot;highlighter-rouge&quot;&gt;GB2312&lt;/code&gt;编码来编码汉字，采用的是两个字节编码一个汉字.&lt;/p&gt;

&lt;p&gt;但是随着互联网的发展，可能一个网页上会同时显示好几个国家的文字，这样，编码难免就会发生冲突。如果能有一种编码能编世界各国的语言，那不是好?所以&lt;code class=&quot;highlighter-rouge&quot;&gt;Unicode&lt;/code&gt;出生了.&lt;code class=&quot;highlighter-rouge&quot;&gt;Unicode&lt;/code&gt;采用两个字节编码一个字符的方式来编码各国的字符文字.&lt;/p&gt;

&lt;p&gt;但是&lt;code class=&quot;highlighter-rouge&quot;&gt;Unicode&lt;/code&gt;是固定的两个字节，如果是对于美国来说，大多数使用的都是英文，也就是那127个，一个字节就足够了，但&lt;code class=&quot;highlighter-rouge&quot;&gt;Unicode&lt;/code&gt;却用两个字节？岂不浪费？&lt;/p&gt;

&lt;p&gt;于是乎，可变长编码&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;诞生了.&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;把&lt;code class=&quot;highlighter-rouge&quot;&gt;Unicode&lt;/code&gt;编码根据数值大小，分成1-6个字节来编码，通常英文字母就变一个字节，汉字三个字节，不常见的才使用4-6个字节，这样就能竟可能的节约了资源.&lt;/p&gt;

&lt;h1 id=&quot;python中的字符串&quot;&gt;python中的字符串&lt;/h1&gt;

&lt;h3 id=&quot;python中的字符串是使用unicode编码的&quot;&gt;Python中的字符串是使用Unicode编码的&lt;/h3&gt;

&lt;p&gt;也就是说,python字符串是支持多国语言的.&lt;/p&gt;

&lt;p&gt;python的字符串是以&lt;code class=&quot;highlighter-rouge&quot;&gt;Unicode&lt;/code&gt;编码在内存中存储的.并且&lt;strong&gt;以字节为单位&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;如果要将字符串在网络中传输，或保存到硬盘，则需要将字符串保存为以&lt;code class=&quot;highlighter-rouge&quot;&gt;bytes&lt;/code&gt;为单位的方式。。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# python使用带前缀b的字符串表示bytes类型的编码&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Hello'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果要将字符串保存到文件的时候，要尽量以&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;的编码保存。特别是字符中含有多种语言的时候.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 使用带前缀u的字符串表示UTF-8类型&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'中文'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Unicode&lt;/code&gt;类型的字符串可以调用&lt;code class=&quot;highlighter-rouge&quot;&gt;str.encode()&lt;/code&gt;方法转变成以&lt;code class=&quot;highlighter-rouge&quot;&gt;bytes&lt;/code&gt;为单位的指定编码&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 转换成以bytes为单位的ascii编码&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'ABC'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ascii'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;需要注意，含有中文或者超过&lt;code class=&quot;highlighter-rouge&quot;&gt;ascii&lt;/code&gt;编码范围的字符串转换成&lt;code class=&quot;highlighter-rouge&quot;&gt;ascii&lt;/code&gt;编码会报错.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;len函数求字符串的长度&quot;&gt;len()函数求字符串的长度&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;len()&lt;/code&gt;:可以用来求字符串的字符个数。&lt;/p&gt;

&lt;p&gt;如果字符串是以&lt;code class=&quot;highlighter-rouge&quot;&gt;bytes&lt;/code&gt;为单位，这求的是字节(byte)数.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#  普通字符串，求的是字符数&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'你好'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 求byte数&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'你好'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'UTF-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 可见，一个中文utf使用三个字节编码&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以，当我们写python文件的时候，要在开头申明编码方式&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# -*- encoding: utf-8 -*-&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 09 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E7%A1%80-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E7%BC%96%E7%A0%81/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E7%A1%80-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E7%BC%96%E7%A0%81/</guid>
        
        <category>python</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>python学习之基础--字典</title>
        <description>&lt;h1 id=&quot;字典dict&quot;&gt;字典(dict)&lt;/h1&gt;

&lt;p&gt;字典，类似于java的map， 其他地方的键值对, 就是键和值一一对应，给需要的键，就可以得到需要的值&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 一个关于学生成绩的字典&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;grades&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'marry'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;91&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'jim'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 获取tom的成绩&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grades&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中的名字叫键， 成绩叫值。&lt;/p&gt;

&lt;p&gt;当访问一个不存在的键时会报错&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grades&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'小明'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HJ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&amp;amp;&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;报错了&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以在访问之前需要判断&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'小明'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grades&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;grades&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'小明'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;还可以通过调用函数的方式访问&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grades&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grades&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'小明'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;*^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;报错&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 可以设置在获取失败的时候给默认值&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grades&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'小明'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;也可以删除某个键值对&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;grades&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 09 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E7%A1%80-%E5%AD%97%E5%85%B8/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E7%A1%80-%E5%AD%97%E5%85%B8/</guid>
        
        <category>python</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>python学习之基础--函数</title>
        <description>&lt;h1 id=&quot;函数的调用&quot;&gt;函数的调用&lt;/h1&gt;

&lt;p&gt;func_name(args)&lt;/p&gt;

&lt;h1 id=&quot;内置的类型转换函数&quot;&gt;内置的类型转换函数&lt;/h1&gt;

&lt;p&gt;python内置了一些类型的相互转换函数&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;float()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;str()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;bool()&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;函数的返回值&quot;&gt;函数的返回值&lt;/h1&gt;

&lt;p&gt;python函数的多个返回值其实是一个&lt;code class=&quot;highlighter-rouge&quot;&gt;tuple&lt;/code&gt;,但是语法上，返回多个值可以不用写&lt;code class=&quot;highlighter-rouge&quot;&gt;()&lt;/code&gt;,然后接收的时候，也可以按位置对应，将每个位置上的值分别赋值给每个位置的参数.&lt;strong&gt;如果用多个变量接受，这接受的变量个数必须和返回的个数一样&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;函数的默认参数&quot;&gt;函数的默认参数&lt;/h1&gt;

&lt;p&gt;函数可以设置默认参数，但是不要使用可变对象作为函数的默认参数&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def add_end(L=[])
	L.append('end')
	return L

# 似乎没什么问题

&amp;gt;&amp;gt;&amp;gt; add_end([1,2,3])
[1,2,3,'end']

&amp;gt;&amp;gt;&amp;gt; add_end([4,5,6])
[4,5,6,'end']

# 如果这样呢
&amp;gt;&amp;gt;&amp;gt; add_end()
['end']

&amp;gt;&amp;gt;&amp;gt; add_end()
['end', 'end']

&amp;gt;&amp;gt;&amp;gt; add_end()
['end', 'end', 'end']

# 似乎每次调用，都会加上前面使用的'end'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;原因如下: 当定义函数的时候， 默认参数也被定义出来了， 并且成为一个变量在内存中保存了下来。&lt;/p&gt;

&lt;p&gt;当调用函数时，外面没有给参数， 则就会使用默认参数，也就是会使用定义函数时定义的那个变量，所以当你使用默认参数，并且改变他的值时， 也就是改变定义函数时定义的那个变量。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;所以，如果一定要使用可变对象的时候，要先确认是不是自己想要。或者在每次使用之前，先给他一个初始值。&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]):&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'end'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 09 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0/</guid>
        
        <category>python</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>python学习之函数式编程--高阶函数</title>
        <description>&lt;h1 id=&quot;高阶函数higher-order-function&quot;&gt;高阶函数(higher-order function)&lt;/h1&gt;

&lt;p&gt;python中，函数名也是一种变量，可以赋值。也可以当做另一个好函数的参数传递&lt;/p&gt;

&lt;p&gt;把函数作为另一个函数的参数，这就叫高阶函数.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;map(function, Iterable)&lt;/code&gt;:将&lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;中的每一个对象分别作用于&lt;code class=&quot;highlighter-rouge&quot;&gt;Iterable&lt;/code&gt;中的每一个对象,并返回一个&lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reduce(function, Iterable)&lt;/code&gt;:其中&lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;接受两个参数,取&lt;code class=&quot;highlighter-rouge&quot;&gt;Iterable&lt;/code&gt;中的前两个值做为&lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;的两个参数,并将的到的结果连同下一个对象再次作为&lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;的两个参数,直到遍历完&lt;code class=&quot;highlighter-rouge&quot;&gt;Iterable&lt;/code&gt;中的所有对象&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 将[1,3,5,7,9] 变成13579&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;functools&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;reduce&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;filter(function, Iterable)&lt;/code&gt;:其中&lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;的返回值应该为&lt;code class=&quot;highlighter-rouge&quot;&gt;bool&lt;/code&gt;值.该函数的作用是将&lt;code class=&quot;highlighter-rouge&quot;&gt;Iterable&lt;/code&gt;中的元素一次作为&lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;的参数，将返回值为&lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;的元素从&lt;code class=&quot;highlighter-rouge&quot;&gt;Iterable&lt;/code&gt;中去除.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;返回的是一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Iterator&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sort()&lt;/code&gt;:排序函数&lt;/p&gt;
</description>
        <pubDate>Tue, 09 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</guid>
        
        <category>python</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>django博客开发过程中遇到的一些困难</title>
        <description>&lt;ul&gt;
  &lt;li&gt;将页面解析成markdown:
    &lt;ul&gt;
      &lt;li&gt;通过模板过滤器实现&lt;/li&gt;
      &lt;li&gt;通过js解析前端实现&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;在template中使用下标访问一个list:
    &lt;ul&gt;
      &lt;li&gt;arrayName.index:&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;将某一个变量设置为全局模板变量，每一个页面都能访问:
    &lt;ul&gt;
      &lt;li&gt;自己重写render方法，把传进来的名字加上全局名字再返回
  &lt;code class=&quot;highlighter-rouge&quot;&gt;def my_render(request, template, dirc):return render(request, template, dirc.update({'name':value}))&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;这是教程中提的第二种方法，没看明白,&lt;a href=&quot;http://blog.csdn.net/shanliangliuxing/article/details/7595344&quot;&gt;教程&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;在settings.py中注册模板变量:&lt;a href=&quot;http://blog.csdn.net/hengrjgc/article/details/50349698&quot;&gt;这里&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;gunicorn 不会使用，找到了官方的文档: &lt;a href=&quot;http://docs.gunicorn.org/en/latest/signals.html&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用gunicorn启动服务之后，找不到静态文件，原因是urls.py中要加上staticfiles_urlpattern&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;当时不是很理解STATIC_ROOT 和STATIC_URL 和STATICFILES_DIR 的区别和作用：
    &lt;ul&gt;
      &lt;li&gt;STATIC_URL: 是指django映射时候找找的文静目录，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;STATIC_URL = '/static/'&lt;/code&gt;, 那么django会自动将静态文件映射到所有名为static的文件夹上。&lt;/li&gt;
      &lt;li&gt;STATIC_ROOT:存放静态文件的目录，主要是部署服务器用的。部署服务器的时候需要给静态文件映射一个路径给服务器，由于我们之前的开发都是将静态文件分布在每个app的目录下，这样一个一个的去映射势必会造成一定的不便。这时候我们只需要设置一下STATIA_ROOT， 如&lt;code class=&quot;highlighter-rouge&quot;&gt;STATIC_ROOT = 'statics'&lt;/code&gt;,这时候运行一下&lt;code class=&quot;highlighter-rouge&quot;&gt;pytnon manager.py collectstatic&lt;/code&gt;,这样就会自动的把分布于每个app下的静态文件全部集中到statics了，然后再将这个路径映射给服务器就好了。&lt;/li&gt;
      &lt;li&gt;STATICFILES_DIR:告诉django有那些文件夹是静态文件，然后在urls.py里面加上staticfiles_pattern，就能直接输入静态文件的网址访问静态文件了.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;表单重复提交的问题:如果一个页面需要提交表单数据，并且请求url也是本页面，即’.’, 那么如果刷新页面，将会导致表单重复提交,博客中的评论。 解决方法是将处理表单的视图返回一个重定向.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 03 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/django-blog%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9B%B0%E9%9A%BE/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/django-blog%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9B%B0%E9%9A%BE/</guid>
        
        <category>django</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>wait 和 waitpid 的用法</title>
        <description>&lt;p&gt;OS编写fork()代码的时候用到了wait和waitpid来保证fork()的子进程能被妥善处理，这里总结一下，供日后参考.&lt;/p&gt;

&lt;h2 id=&quot;wait&quot;&gt;wait:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;函数原型:pid_t wait(int *status);
    &lt;ul&gt;
      &lt;li&gt;返回值:返回所成功等到的子进程的pid 或发生错误时的-1;&lt;/li&gt;
      &lt;li&gt;参数: 用来保存进程状态码的变量的指针;&lt;/li&gt;
      &lt;li&gt;功能: 等待一个子进程运行结束并将该子进程彻底转变成终止状态&lt;/li&gt;
      &lt;li&gt;用法示例:&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&amp;lt;stdop.h&amp;gt;
#include&amp;lt;sys/wait.h&amp;gt;
#include&amp;lt;unistd.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//用来保存状态码的变量.
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;status is:%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// do something
&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看到，输出的值为一个256的整数倍的数.&lt;/p&gt;

&lt;p&gt;但是我们并看不懂这个状态吗代表什么意思？没法理解它传递给我们的信息，就算可以查询，每次查询也比较麻烦.所以人们设计了一套宏来进行简单方便的解释这个。&lt;/p&gt;

&lt;h2 id=&quot;waitpid&quot;&gt;waitpid:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;函数原型: pid_t waitpid(pid_t pid, int* status, int options);
    &lt;ul&gt;
      &lt;li&gt;参数:
        &lt;ul&gt;
          &lt;li&gt;pid_t pid:
            &lt;ul&gt;
              &lt;li&gt;pid &amp;gt; 0:等待进程号与pid相等的子进程;&lt;/li&gt;
              &lt;li&gt;pid == 0:等待&lt;a href=&quot;http://baike.baidu.com/item/%E8%BF%9B%E7%A8%8B%E7%BB%84&quot;&gt;进程组&lt;/a&gt;与其父进程的进程组相同的任意子进程；&lt;/li&gt;
              &lt;li&gt;pid == -1:等待任意子进程,同wait作用一样.&lt;/li&gt;
              &lt;li&gt;pid &amp;lt; -1: 等待进程组号为 -pid 的子进程；&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;int *status; 同wait();&lt;/li&gt;
          &lt;li&gt;int options:
            &lt;ul&gt;
              &lt;li&gt;WNOHANG: 如果想wait的子进程还没进入退出状态，则返回0，不再继续等待.&lt;/li&gt;
              &lt;li&gt;WUNTRACED: 如果子进程进入暂停执行情况则马上返回, 但结束状态不予以理会. 子进程的结束状态返回后存于status.(这个我还是没有理解啊…找了这么多都是这么说,没有完整的解释的！)&lt;/li&gt;
              &lt;li&gt;0: 不使用第三个参数;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;返回值:
            &lt;ul&gt;
              &lt;li&gt;正常返回: 子进程的pid;&lt;/li&gt;
              &lt;li&gt;意外返回: -1; 错误表示存放于errno&lt;/li&gt;
              &lt;li&gt;没有等待想等待的子进程结束，并且参数设置为WNOHANG: 0;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;功能:同wait();&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;列子和上面的差不多，就不写了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;其他一些补充:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;wait() 其实是 waitpid()的包装:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// wait.c
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waitpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;status码对人类还说不好读，所以人们发明了一套宏来更好的读取status码:(感觉就是函数，为啥叫宏…)&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;宏&lt;/th&gt;
      &lt;th&gt;作用&lt;/th&gt;
      &lt;th&gt;返回值&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;WIFEXITED(int status)&lt;/td&gt;
      &lt;td&gt;根据给的状态码判断进程是否为正常退出&lt;/td&gt;
      &lt;td&gt;0:异常退出； 非0: 正常退出&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;WEXITSTATUS(status)&lt;/td&gt;
      &lt;td&gt;取得子进程exit()返回的结束代码, 一般会先用WIFEXITED 来判断是否正常结束才能使用此宏.&lt;/td&gt;
      &lt;td&gt;子进程exit()返回的结束代码&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;WIFSIGNALED(status)&lt;/td&gt;
      &lt;td&gt;如果子进程是因为信号而结束则此宏值为真&lt;/td&gt;
      &lt;td&gt;0:进程不是因为信号终止, 非0：子进程因为信号而终止&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;WTERMSIG(status)&lt;/td&gt;
      &lt;td&gt;取得子进程因信号而中止的信号代码, 一般会先用WIFSIGNALED 来判断后才使用此宏.&lt;/td&gt;
      &lt;td&gt;信号代码&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;WIFSTOPPED(status)&lt;/td&gt;
      &lt;td&gt;如果子进程处于暂停执行情况则此宏值为真. 一般只有使用WUNTRACED时才会有此情况.&lt;/td&gt;
      &lt;td&gt;非0:子进程处于暂停状态&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;WSTOPSIG(status)&lt;/td&gt;
      &lt;td&gt;取得引发子进程暂停的信号代码, 一般会先用WIFSTOPPED 来判断后才使用此宏.&lt;/td&gt;
      &lt;td&gt;暂停的信号代码&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;waitpid的第三个参数可以使用组合的形式，如WIFHANG&lt;/td&gt;
          &lt;td&gt; &lt;/td&gt;
          &lt;td&gt;WUNTRACED.&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 02 May 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/wait-and-waitpid/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/wait-and-waitpid/</guid>
        
        <category>c/c++</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>僵尸进程和孤儿进程</title>
        <description>&lt;p&gt;linux系统下，可以由一个进程fork产生另一个进程，这就有了一些可能.其中&lt;code class=&quot;highlighter-rouge&quot;&gt;一个进程&lt;/code&gt;叫做父进程，&lt;code class=&quot;highlighter-rouge&quot;&gt;另一个进程&lt;/code&gt;叫做子进程。&lt;/p&gt;

&lt;h2 id=&quot;孤儿进程和僵尸进程&quot;&gt;孤儿进程和僵尸进程&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;大家都知道，死了父母的孩子叫孤儿，同样，父线程如果死了，但子进程还在，那么这个进程就叫做孤儿进程。&lt;strong&gt;孤儿进程的父进程的pid会被重置为1&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;而如果孩子提前走到生命的尽头，父亲却还健在，此时父亲就需要料理死去孩子的后世，安葬，清理孩子的遗物，万一孩子留了一大笔钱呢。但是如果孩子死了，父亲却不管不问，那么孩子就会变成僵尸.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在进程状态中，一个进程结束了自己的任务之后，是先进入&lt;code class=&quot;highlighter-rouge&quot;&gt;退出状态&lt;/code&gt;,也就是才结束生命。然后等着父亲进程来处理一下后事，才进入&lt;code class=&quot;highlighter-rouge&quot;&gt;终止状态&lt;/code&gt;，也就是正式走完一生。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;退出状态存在的意义: 子进程退出后，还保留着它的一些状态信息，比如pid，占用内存，生存时间，cup使用等，可能父进程某些时候需要查看.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;但是一个进程如果中途出了异常，那么它会直接进入&lt;code class=&quot;highlighter-rouge&quot;&gt;终止状态&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果子线程执行玩业务逻辑，进入退出状态，而且父进程还在，但父进程却对他不管不问，那么这个子进程就一直保持在退出状态，而不会进入终止状态，此时这个子线程就叫做僵尸进程.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;总结一下&quot;&gt;总结一下:&lt;/h4&gt;

&lt;p&gt;孤儿进程:父进程挂了的进程叫孤儿进程。&lt;/p&gt;

&lt;p&gt;僵尸进程: 它的父进程还在，却即使该进程已经执行完，它父亲也不管它的进程，叫僵尸进程。&lt;/p&gt;

&lt;h2 id=&quot;孤儿进程和僵尸进程对系统的影响&quot;&gt;孤儿进程和僵尸进程对系统的影响&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;由于孩子进程退出后还保留这进程的一些状态，也就是保留着退出状态的一些东西，所以它还会保留着进程，也就是还能查到这个进程.改进程还证据着一定的资源。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果死掉的孩子越来越多就会浪费一些系统资源，如果量非常大，那么系统崩溃啥的也不是问题&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;系统对孤儿进程和僵尸进程的处理&quot;&gt;系统对孤儿进程和僵尸进程的处理&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;当系统启动的时候，会创建第一个用户进程，叫做&lt;a href=&quot;http://baike.baidu.com/item/init%E8%BF%9B%E7%A8%8B&quot;&gt;init进程&lt;/a&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;对于孤儿进程，init进程会对他们进行关心，他们死后，会将他们妥善处理，是他们能从&lt;code class=&quot;highlighter-rouge&quot;&gt;退出状态&lt;/code&gt;进入&lt;code class=&quot;highlighter-rouge&quot;&gt;终止状态&lt;/code&gt;,完整的走完这一生。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;对于僵尸进程，由于它父亲还在，所以init进程没有权利去管他们。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;总结&quot;&gt;总结&lt;/h4&gt;

&lt;p&gt;对于孤儿进程，init进程会清理他们，所以他们对系统不会造成影响。&lt;/p&gt;

&lt;p&gt;对于僵尸进程，由于它们的父亲还在，所以系统不会管他们，所以庞大数量的僵尸进程会影响系统稳定。&lt;/p&gt;

&lt;h2 id=&quot;对已经存在的僵尸进程的处理&quot;&gt;对已经存在的僵尸进程的处理&lt;/h2&gt;

&lt;p&gt;杀了他们的父亲，让他们变成孤儿，这样init就有权利来处理他们了。&lt;/p&gt;

&lt;h2 id=&quot;防止僵尸进程产生的方法&quot;&gt;防止僵尸进程产生的方法&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;使用wait来等待子进程结束并回收资源，&lt;a href=&quot;http://single-thread.me/c/c++/2017/05/02/wait-and-waitpid/&quot;&gt;wait&lt;/a&gt;用法:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&amp;lt;stdio.h&amp;gt;
#include&amp;lt;unistd.h&amp;gt;
#include&amp;lt;sys/wait.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// 表示是父进程
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;pid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;childPid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//获取结束的子进程的pid
&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// do something
&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上述方法可以预防僵尸进程的出现,但这个方法有一些弊端:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;弊端:
    &lt;ul&gt;
      &lt;li&gt;wait()只等待一个子进程返回就继续往下走了。如果一个父进程产生了多个子进程，就不能使用一个wait保证所有的子进程都结束。&lt;/li&gt;
      &lt;li&gt;wai()需要等待子进程结束，如果子进程执行的时间过程，则会过分影响到父进程的执行.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用&lt;a href=&quot;http://single-thread.me/c/c++/2017/05/02/wait-and-waitpid/&quot;&gt;waitpid()&lt;/a&gt;:
代码示例：同上wait()代码示例，将wait()改为waitpid(),并按徐传递参数即可.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;使用信号:每当子进程结束，内核都会给其父进程发送信号，但是父进程对这个信号默认不做任何处理，所以我们可以通过这个信号来做一些事情，我们要做的是就是当收到内核的信号时，表示我们有子进程结束了，此时该去处理了。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// 我也是看的网上例子，知道这是一个处理子进程后续的函数，具体怎么定义，这个参数是干啥用的等我一概不知，现在也没打算深入，后续用到了再深入
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;perror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wait:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIGCHLD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//绑定接到信号的处理函数
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// do something
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;fork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//正常的调用fork执行业务逻辑
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// do something
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 27 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B%E5%92%8C%E5%AD%A4%E5%84%BF%E8%BF%9B%E7%A8%8B/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B%E5%92%8C%E5%AD%A4%E5%84%BF%E8%BF%9B%E7%A8%8B/</guid>
        
        <category>c/c++</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>linux下exec家族</title>
        <description>&lt;p&gt;这周的操作系统实验课需要了解相关exec家族函数，之前接触过，但却没有深入了解，仅仅简单使用，借这个机会，好好深入研究下.&lt;/p&gt;

&lt;h4 id=&quot;exec家族共六个函数&quot;&gt;exec家族:共六个函数&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;execlp&lt;/th&gt;
      &lt;th&gt;execl&lt;/th&gt;
      &lt;th&gt;execle&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;execvp&lt;/td&gt;
      &lt;td&gt;execv&lt;/td&gt;
      &lt;td&gt;execve&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;......);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;......&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;envp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;envp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execvp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execlp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;......);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一些解释:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;exec为该函数家族的共有名字开头,所以通常都称他们六兄弟为exec家族.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;exec后面的名字解释: 方便理解和记忆
    &lt;ul&gt;
      &lt;li&gt;l:list, 代表着参数以list形式给出&lt;/li&gt;
      &lt;li&gt;v:vector, 代表这参数以数组形式给出&lt;/li&gt;
      &lt;li&gt;p:path, 带表着该函数会从系统环境变量中搜索命令&lt;/li&gt;
      &lt;li&gt;e:environment, 带表着该函数需要给定个环境变量&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;函数的作用:执行一个系统调用来&lt;strong&gt;替代调用他的进程&lt;/strong&gt;.注意，是替代。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;参数:当使用list进行传参的时候，最后一个一定要用NULL来代表结束.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;函数的返回值:
    &lt;ul&gt;
      &lt;li&gt;执行成功:无返回。&lt;/li&gt;
      &lt;li&gt;执行失败:返回-1&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;深入了解&quot;&gt;深入了解:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;整个家族核心函数只有一个: &lt;code class=&quot;highlighter-rouge&quot;&gt;execve&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;无论是execl,还是execv，除了&lt;code class=&quot;highlighter-rouge&quot;&gt;execve&lt;/code&gt;,剩下的五个函数都是在为&lt;code class=&quot;highlighter-rouge&quot;&gt;execve&lt;/code&gt;服务，最后真正执行的都是&lt;code class=&quot;highlighter-rouge&quot;&gt;execve&lt;/code&gt;,其他的函数都是为了包装它.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;当需要使用exec家族函数进行系统调用的时候，通常都是fork一个子进程来执行，这样不会破坏原进程的正常执行.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 27 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/exec%E5%AE%B6%E6%97%8F/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/exec%E5%AE%B6%E6%97%8F/</guid>
        
        <category>c/c++</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>远离垃圾人</title>
        <description>&lt;h2 id=&quot;躲开那条疯狗&quot;&gt;躲开那条疯狗&lt;/h2&gt;

&lt;p&gt;老虎看见一条疯狗，赶紧躲开了。小老虎说：“爸爸，你敢和狮子拼斗，与猎豹争雄，却躲避一条疯狗，多丢人啊！”&lt;/p&gt;

&lt;p&gt;老虎问：“孩子，打败一条疯狗光荣吗？” 小老虎摇摇头。&lt;/p&gt;

&lt;p&gt;“让疯狗咬一口倒霉不？” 小老虎点点头。&lt;/p&gt;

&lt;p&gt;“既然如此，咱们干吗要去招惹一条疯狗呢？”&lt;/p&gt;

&lt;p&gt;——不是什么人都配做你的对手，不要与那些没有素质的人争辩，微微一笑远离他，不要让他咬到你。这个必须看明白，因为许多人正在和疯狗斗！&lt;/p&gt;

&lt;h2 id=&quot;垃圾人定律&quot;&gt;垃圾人定律&lt;/h2&gt;

&lt;p&gt;2014的夏天，麦当劳杀人案，那个受害女子一定没有听过“垃圾人定律”。当正常人遇到垃圾人，是不可以用正常方式去回击和反应的，希望善良的朋友们谨记！&lt;/p&gt;

&lt;p&gt;2015年5月初，成都的一个男司机，因开车变道当街暴打一个女司机的事件，更说明了善良的人们应谨记“垃圾人定律”。&lt;/p&gt;

&lt;p&gt;事件中的女司机在马路上无视交通法规，随意变道，危及他人行车安全，是一个典型的垃圾女；那个男司机则是一个“路怒族”，当街暴打女人，也是个典型的垃圾男。&lt;/p&gt;

&lt;p&gt;当垃圾女遇上垃圾男，悲剧发生了。垃圾女付出了被暴打的代价，还会受到违反交通法规的处罚；垃圾男则因为打人被追究刑责，付出了更大的代价。&lt;/p&gt;

&lt;p&gt;一对情侣晚上在餐馆吃饭。漂亮女友被隔壁桌醉汉吹口哨，男友说反正吃完了咱走吧，女友说你怎么这么孬种啊是不是男人？男友说犯不上跟流氓较劲。&lt;/p&gt;

&lt;p&gt;女友急了，骂完男友又过去骂那群醉汉，结果醉汉围上来开打，男友被捅三刀，在医院抢救无效死了。&lt;/p&gt;

&lt;p&gt;临死问了女友一句话：“我现在算男人了吗？”&lt;/p&gt;

&lt;h2 id=&quot;放宽心态远离垃圾人自己也别做垃圾人&quot;&gt;放宽心态，远离垃圾人，自己也别做垃圾人&lt;/h2&gt;

&lt;p&gt;一位朋友在车道上行驶，突然间一辆黑色轿车从停车位开出，正好挡在前面。朋友立即踩剎车，车子滑行了一小段路，刚好闪开来车，两车之间的距离就只差个几厘米！&lt;/p&gt;

&lt;p&gt;那辆车的司机凶狠地甩头，并且朝着我们大喊大叫！我朋友只是微笑，对那家伙挥挥手。&lt;/p&gt;

&lt;p&gt;我的意思是：我朋友表现得很友善。&lt;/p&gt;

&lt;p&gt;于是我问他：“你刚才为什么那么做？那家伙差点毁了你的车，还可能伤害我们！”&lt;/p&gt;

&lt;p&gt;他解释说：&lt;/p&gt;

&lt;p&gt;“许多人就像垃圾。他们到处跑来跑去，身上充满了负面垃圾：充满了沮丧、愤怒、忌妒、算计、仇恨，充满了傲慢与偏见、贪心与不满、抱怨与比较，充满了见不得人好、愚昧无知、烦恼和失望。&lt;/p&gt;

&lt;p&gt;“随着心中的垃圾堆积又堆积，他们终需找个地方倾倒。有时候，我们刚好碰上了，垃圾就往我们身上丢。所以，无须介意。我们只要微笑着，挥挥手，远离他们，然后继续走自己的路。千万别将他们的负面垃圾接收再扩散给我们的家人、朋友、同事，或其它路人。”&lt;/p&gt;

&lt;p&gt;人生短暂，不要把宝贵的时间和精力，浪费在毫无意义的事情之上。听从内心，走自己应该走的路。&lt;/p&gt;

&lt;p&gt;瓷器何必去碰缸瓦？生命如此脆弱。生活中你总会遇到一些垃圾人，那么一笑而过~&lt;/p&gt;

&lt;p&gt;最好的境界——谁会和垃圾一般见识？&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/%E8%BF%9C%E7%A6%BB%E5%9E%83%E5%9C%BE%E4%BA%BA/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/%E8%BF%9C%E7%A6%BB%E5%9E%83%E5%9C%BE%E4%BA%BA/</guid>
        
        <category>修养</category>
        
        
        <category>Life</category>
        
      </item>
    
      <item>
        <title>c语言格式化字符串函数sprintf的用法</title>
        <description>&lt;h2 id=&quot;sprintf&quot;&gt;sprintf&lt;/h2&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 将字符串s进行格式化
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;作用&quot;&gt;作用&lt;/h4&gt;

&lt;p&gt;sprintf的作用和printf的作用差不多，可以说一样，唯一的区别是sprintf是将格式化的到的字符串输出到一个缓存区，而printf是将格式化输出到控制台.&lt;/p&gt;

&lt;h4 id=&quot;用法&quot;&gt;用法&lt;/h4&gt;

&lt;p&gt;默认已经会使用printf了。
而唯一的区别就是第一个参数格式化后的字符串输出的地方.其他参数一样.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 将一个小于4位数字补零扩充成4为的字符串，存储与变量 char* s中
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#include&amp;lt;stdio.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;this is %04d;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 17 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0sprintf%E7%9A%84%E7%94%A8%E6%B3%95/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0sprintf%E7%9A%84%E7%94%A8%E6%B3%95/</guid>
        
        <category>c/c++</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>c++中字符串和数字的相互转换</title>
        <description>
</description>
        <pubDate>Mon, 17 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/c++%E4%B8%AD%E5%AD%97%E7%AC%A6%E5%92%8C%E6%95%B0%E5%AD%97%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/c++%E4%B8%AD%E5%AD%97%E7%AC%A6%E5%92%8C%E6%95%B0%E5%AD%97%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</guid>
        
        <category>c/c++</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>c++中char*和string的相互转换</title>
        <description>&lt;h4 id=&quot;char转成string&quot;&gt;char*转成string&lt;/h4&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newS1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//string 可以使用一个char*来构造
//string也有对char*的拷贝构造函数.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;string转char&quot;&gt;string转char*&lt;/h4&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;const_c_s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//只能转换成const的char*
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c_s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//足够大，也可以通过精确的计算，得到合适的.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 会产生中间垃圾
&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;const_c_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;const_c_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//没有中间垃圾
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 17 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/c++%E4%B8%ADchar-%E5%92%8Cstring%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/c++%E4%B8%ADchar-%E5%92%8Cstring%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</guid>
        
        <category>c/c++</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>云端使用linux主机，coding.net</title>
        <description>&lt;p&gt;电脑没有linux，却又需要使用怎么办？云主机是很好的一种解决方法应为它不局限于机器和平台，只要有网就能使用。
推荐使用&lt;a href=&quot;coding.net&quot;&gt;coding.net&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;注册登陆&quot;&gt;注册&amp;amp;登陆&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;登陆coding.net的官网，很明显的注册和登陆页面，按照要求注册并登陆即可&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/single-thread/single-thread.github.io/master/media/images/1.png&quot; alt=&quot; &quot; title=&quot;注册&amp;amp;登陆&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;登陆完成后点击工具栏的IDE选项，&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/single-thread/single-thread.github.io/master/media/images/2.png&quot; alt=&quot; &quot; title=&quot;IDE&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;然后新建工作空间或点击你已经有的工作空间。&lt;strong&gt;不是使用红框中的两个体验&lt;/strong&gt;。
    &lt;ul&gt;
      &lt;li&gt;所谓工作空间，就是分配给你的linux主机。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/single-thread/single-thread.github.io/master/media/images/3.png&quot; alt=&quot; &quot; title=&quot;新建工作空间&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;紧接着选择一个项目来初始化工作空间。
    &lt;ul&gt;
      &lt;li&gt;如果你有项目，则1处显示的和图示一样，会出现你的项目.&lt;/li&gt;
      &lt;li&gt;如果没有项目，1处出现的是新建项目。&lt;/li&gt;
      &lt;li&gt;新建项目以后，重复新建工作空间的步骤，到这一步的时候，如果没有显示你创建的项目，点击一下2来同步项目仓库.&lt;/li&gt;
      &lt;li&gt;如果你有github, 或者其他git仓库，还可以用git创库来初始化该工作空间.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/single-thread/single-thread.github.io/master/media/images/4.png&quot; alt=&quot; &quot; title=&quot;初始化工作空间&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/single-thread/single-thread.github.io/master/media/images/5.png&quot; alt=&quot; &quot; title=&quot;配置&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;紧接着就可以进入你的工作空间&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/single-thread/single-thread.github.io/master/media/images/6.png&quot; alt=&quot; &quot; title=&quot;使用工作空间&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;然后在工作界面，点击终端，就可以愉快的使用linux了.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/single-thread/single-thread.github.io/master/media/images/7.png&quot; alt=&quot; &quot; title=&quot;使用linux&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 14 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/%E4%BA%91%E7%AB%AF%E4%BD%BF%E7%94%A8linux%E7%9A%84%E6%96%B9%E6%B3%95,coding.net/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/%E4%BA%91%E7%AB%AF%E4%BD%BF%E7%94%A8linux%E7%9A%84%E6%96%B9%E6%B3%95,coding.net/</guid>
        
        <category>none</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>MySql学习笔记,半教程</title>
        <description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;安装与配置初次接触数据库&quot;&gt;安装与配置，初次接触数据库&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;在mysql的安装目录下，mysql的配置文件，其中有个用户配置文件叫做my.ini,用户可以修改其来进行自己的配置。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;[client]
# port: mysql的端口号,默认为3306
port=3306

[mysql]
# default-character-set: 默认字符集
default-character-set=uft8

# mysqld:mysql服务器端的一些配置 
[mysqld]
port=3306

# 基础的安装路径
basedir=&quot;xxx&quot;	

# datadir:数据的存放路径
datadir=&quot;xxxx&quot;

# character-set-server:服务器的字符集
character-set-server=utf8
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;重启mysql来应用配置
    &lt;ul&gt;
      &lt;li&gt;windows: &lt;code class=&quot;highlighter-rouge&quot;&gt;net start/stop mysql&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;linux: &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo service mysql start/stop&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;登陆mysql
&lt;code class=&quot;highlighter-rouge&quot;&gt;mysql [-选项]&lt;/code&gt;, eg:&lt;code class=&quot;highlighter-rouge&quot;&gt;mysql -uroot -p&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;-D, –database=name 指定数据库名称&lt;/li&gt;
      &lt;li&gt;–delimiter=name 指定分隔符&lt;/li&gt;
      &lt;li&gt;-h, –host=name 服务器名称&lt;/li&gt;
      &lt;li&gt;-p, –password 密码&lt;/li&gt;
      &lt;li&gt;-P, –port=# 端口号&lt;/li&gt;
      &lt;li&gt;–prompt=name  设置提示符&lt;/li&gt;
      &lt;li&gt;-u, –user=name 用户名&lt;/li&gt;
      &lt;li&gt;-V, –version 查看版本号&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;登出:
    &lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;mysql&amp;gt;exit;
mysql&amp;gt;quit;
mysql&amp;gt;\q;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;修改mysql提示符：
    &lt;ul&gt;
      &lt;li&gt;链接服务器的时候修改：
  &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql -uusername -ppassword --prompt promptname&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;登陆成功后通过命令修改
  &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql&amp;gt; prompt promptname;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其中&lt;code class=&quot;highlighter-rouge&quot;&gt;promptname&lt;/code&gt;可以是以下参数: eg:&lt;code class=&quot;highlighter-rouge&quot;&gt;mysql&amp;gt;pormpt \u@\h \d&amp;gt;;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;\D 完整的日期
\d 当前的数据库
\h 服务器名称
\u 当前用户
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;mysql常用命令
    &lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;# 显示数据库版本
SELECT VERSION(); 
# 显示当前用户
SELECT USER();
#显示当前日期
SELECT NOW();
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;MySql语句的规范
    &lt;ul&gt;
      &lt;li&gt;关键字与函数全部大写&lt;/li&gt;
      &lt;li&gt;数据库名称，表名称，字段名称全部小写&lt;/li&gt;
      &lt;li&gt;语句必须以‘;’结尾。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;创建数据库：&lt;code class=&quot;highlighter-rouge&quot;&gt;CREATE {DATABAS , ESCHEMA} [IF NOT EXISTS] db_name [DEFAULT] CHARACTER SET [=] charset_name;&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;{}为必选项，在 , 之间选一个&lt;/li&gt;
      &lt;li&gt;[]为可选项。&lt;/li&gt;
      &lt;li&gt;eg: &lt;code class=&quot;highlighter-rouge&quot;&gt;CREATE DATABASE t1;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;查看当前服务器下的数据库:&lt;code class=&quot;highlighter-rouge&quot;&gt; SHOW DATABASES;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;使用参数创建数数据库:
    &lt;ul&gt;
      &lt;li&gt;我们上面创建了一个叫做 t1 的数据库，如果我们重复执行命令，在创建一个叫做t1的数据亏，这系统会给我们报错。&lt;/li&gt;
      &lt;li&gt;我们加上参数再次创建同名数据库:&lt;code class=&quot;highlighter-rouge&quot;&gt;CREATE DATABASE  IF NOT EXISTS t1;&lt;/code&gt;,此时系统没有给我们报错，返回了OK，只是提示有一个警告。&lt;/li&gt;
      &lt;li&gt;我们可以使用命令&lt;code class=&quot;highlighter-rouge&quot;&gt;SHOW WARINGS;&lt;/code&gt;来查看警告。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;查看数据库创建的指令:&lt;code class=&quot;highlighter-rouge&quot;&gt;SHOW CREATE DATABASE db_name;&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;这个命令可以显示数据库创建的命令，能看到字符集等。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;修改已存在数据库：&lt;code class=&quot;highlighter-rouge&quot;&gt;ALTER {DATABASE , SCHEMA} [db_name] [DEFAULT] CHARACTER SET [=] charset_name;&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;eg:&lt;code class=&quot;highlighter-rouge&quot;&gt;ALTER DATABASE t1 CHARACTER SET = gbk;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;删除数据库:&lt;code class=&quot;highlighter-rouge&quot;&gt;DROP {DATABASE , SCHEMA} [IF EXISTS] db_name;&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;eg: &lt;code class=&quot;highlighter-rouge&quot;&gt;DROP DATABASES t1;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;数据类型与操作数据库&quot;&gt;数据类型与操作数据库&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;数据类型：&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;整型：
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TINYINT&lt;/code&gt;: 占一个字节
        &lt;ul&gt;
          &lt;li&gt;有符: -128~127 之间(-2^7~2^7-1)&lt;/li&gt;
          &lt;li&gt;无符(UNSIGNED): 0~255&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SMALLINT&lt;/code&gt;:占2个字节
        &lt;ul&gt;
          &lt;li&gt;有符: -32768~32767(-2^15~2^15-1)&lt;/li&gt;
          &lt;li&gt;无符:0~65535&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MEDIUMINT&lt;/code&gt;:占3个字节
        &lt;ul&gt;
          &lt;li&gt;大小为2^24&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;INT&lt;/code&gt;:占4字节
        &lt;ul&gt;
          &lt;li&gt;大小:2^32&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BIGINT&lt;/code&gt;:占8字节
        &lt;ul&gt;
          &lt;li&gt;大小:2^64&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;浮点型:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FLOAT[(M,D)]&lt;/code&gt;:M:总位数， D:小数点位数。M,D都可以省略，则更具硬件限制来保存值，但精度大约是小数点后7为。&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DOUBLE&lt;/code&gt;:范围大约是但进度的两倍&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;日期时间类型:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;YEAR&lt;/code&gt;:年，默认四位&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TIME&lt;/code&gt;:时间，-8385959~8385959&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DATE&lt;/code&gt;:日期，1000.1.1~9999.12.31&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DATETIME&lt;/code&gt;:时间日期，&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TIMESTAMP&lt;/code&gt;:时间戳，1970.1.1-2037&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;字符型:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CHAR(M)&lt;/code&gt;:定长类型，M个字节, 不足的补空格， 0&amp;lt;= M &amp;lt;= 255.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;VARCHAR(M)&lt;/code&gt;:变长类型，村Length+1个字节，Length &amp;lt; M, 0 &amp;lt;= M &amp;lt;= 65535.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TINYTEXT&lt;/code&gt;: L+1个字节， L &amp;lt; 2^8.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TEXT&lt;/code&gt;: L+2, L &amp;lt; 2^16.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MEDIUMTEXT&lt;/code&gt;: L+3, L &amp;lt; 2^24.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LONGTEXT&lt;/code&gt;: L+4, L &amp;lt; 2^32.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ENUM('value1', 'value2', 'value3', .....)&lt;/code&gt;:枚举类型，只能选一个，最多65535个值。&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SET('value1', 'value2', 'value3', ......)&lt;/code&gt;:集合类型，可以任选个数，最多64个成员。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;数据表：数据库的重要组成，是其他对象的基础。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;数据表是一个二维表格，有行和列， 行称为记录，列称为字段。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;打开数据库: &lt;code class=&quot;highlighter-rouge&quot;&gt;USE db_name;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;查看当前的数据库: &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT DATABASE();&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建数据表:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;CREATE TABLE [IF NOT EXISTS] table_name(
	column_name data_type,
	......
	column_name data_type
);

eg:
CREATE TABLE person(
	username VARCHAR(20),
	age TINTYINT UNSIGNED,
	salary FLOAT(6,2) UNSIGNED
);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;查看数据表:&lt;code class=&quot;highlighter-rouge&quot;&gt;SHOW TABLES [FROM db_name] [LIKE 'pattern', WHERE expression];&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;eg:
SHOW TABLES FROM mysql;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;查看表结构: &lt;code class=&quot;highlighter-rouge&quot;&gt;SHOW COLUMNS FROM table_name;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;插入数据:&lt;code class=&quot;highlighter-rouge&quot;&gt;INSERT [INTO] table_name [(column_name1, column_name2, ...)] VALUES(value1, value2, ...);&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;eg:
# 省略column_name,则默认为所有字段赋值
INSERT person VALUES('Tom', 25, 234.523);

# 只为部分字段赋值
INSERT person (username, age) VALUES('Tim', 30);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;查找: &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT expression, .... FROM table_name;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;eg:
SELECT username, age FROM person;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;空值与非空:在建表的时候在字段后面加上&lt;code class=&quot;highlighter-rouge&quot;&gt;NULL&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;NOT NULL&lt;/code&gt;,默认为NULL,允许为空。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;CREATE TABLE table1(
	username VARCHAR(20) NOT NULL;
);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;主键:字段后面加上&lt;code class=&quot;highlighter-rouge&quot;&gt;PRIMARY_KEY&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;一张表只能存在一个主键&lt;/li&gt;
      &lt;li&gt;主键不能重复，不能空，保证了记录的唯一性&lt;/li&gt;
      &lt;li&gt;主键自动为&lt;code class=&quot;highlighter-rouge&quot;&gt;NOT NULL&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;自动编号:在建表的时候字段后面加上&lt;code class=&quot;highlighter-rouge&quot;&gt;AUTO_INCREMENT&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;必须与主键组合使用,具有主键的所有特性.&lt;/li&gt;
      &lt;li&gt;必须为数字.&lt;/li&gt;
      &lt;li&gt;默认起始为1， 每次增量为1.&lt;/li&gt;
      &lt;li&gt;可以不为这个字段赋值，他会自动增加.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;CREATE TABLE table1(
	id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY_KEY,
	username VARCHAR(20) NOT NULL;
	age SMALLINT UNSIGNED
);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;唯一约束:在字段后面加上&lt;code class=&quot;highlighter-rouge&quot;&gt;UNIQUE_KEY&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;可一保证记录的唯一性.&lt;/li&gt;
      &lt;li&gt;一张表可以有多个.&lt;/li&gt;
      &lt;li&gt;唯一约束可以为NULL.多个NULL会被认为是一个 NULL.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;默认约束:在字段后面加上&lt;code class=&quot;highlighter-rouge&quot;&gt;DEFAULT value&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;当不进行赋值时字段的默认值.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;约束以及修改数据表&quot;&gt;约束以及修改数据表&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;约束:
    &lt;ul&gt;
      &lt;li&gt;约束是为了保证数据的完整性和一致性&lt;/li&gt;
      &lt;li&gt;约束还分为表级约束和列级约束
        &lt;ul&gt;
          &lt;li&gt;如果约束只针对某一个字段使用，称为列级约束.&lt;/li&gt;
          &lt;li&gt;如果约束针对两个和以上的字段使用，称为表级约束.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;约束包括:
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NOT NULL&lt;/code&gt;(非空约束)&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PRIMARY KEY&lt;/code&gt;(主键约束)&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UNIQUE KEY&lt;/code&gt;(唯一约束)&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DEFAULT&lt;/code&gt;(默认约束)&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FOREIGN KEY&lt;/code&gt;外键约束)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;外键约束:
    &lt;ul&gt;
      &lt;li&gt;保持数据一致性，完整性&lt;/li&gt;
      &lt;li&gt;实现一对一或多对一关系&lt;/li&gt;
      &lt;li&gt;父表和子表必须使用相同的存储引擎，禁止使用临时表。
        &lt;ul&gt;
          &lt;li&gt;子表：具有外键的表。&lt;/li&gt;
          &lt;li&gt;父表： 相对于子表的参照表。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;数据表的存储引擎只能为INNODB
        &lt;ul&gt;
          &lt;li&gt;default-storage-engine=INNODB,在配置文件中修改。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;子表和父表的字段类型必须同一种或相似类型。
        &lt;ul&gt;
          &lt;li&gt;数字型必须完全相同，包括符号&lt;/li&gt;
          &lt;li&gt;字符型可以不同类型。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;3-3外键的约束，重新学习。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;添加数据列:&lt;code class=&quot;highlighter-rouge&quot;&gt;ALTER TABLE table_name ADD [COLUMN] column_name column_definition [FIRST, AFTER col_name]&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;如果不指定&lt;code class=&quot;highlighter-rouge&quot;&gt;FIRST&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;AFTER&lt;/code&gt;, 则默认插在最后。&lt;/li&gt;
      &lt;li&gt;可以同时添加多列，添加的列用()括起来，中间用’,‘隔开&lt;/li&gt;
      &lt;li&gt;添加多列是不能制定添加位置&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;eg:
ALTER TABLE person ADD height TINYINT UNSIGNED NOT NULL AFTER age;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;删除数据列: &lt;code class=&quot;highlighter-rouge&quot;&gt;ALTER TABLE table_name DROP column_name;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;同时进行多个操作:&lt;code class=&quot;highlighter-rouge&quot;&gt;ALTER TABLE table_name (DROP, ADD) column_name1, (DROP, ADD) column_name1,  (DROP, ADD) column_name1, ....; &lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;添加主键约束:&lt;code class=&quot;highlighter-rouge&quot;&gt;ALTER TABLE table_name ADD [CONSTRAINT [symbol]] PRIMARY KEY [insex_type] (index_col_name, ...)&lt;/code&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;如果加上CONSTRAINT, 则可以为这个约束起名字 symbol.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;eg:
ALTER TABLE person ADD CONSTRAINT PK_person_id PRIMARY KEY (id);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;添加唯一约束:``ALTER TABLE table_name ADD [CONSTRAINT [symbol]] UNIQUE [INDEX, KEY] [index_name] [index_type] (index_col_name, …);`&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;添加外键约束: &lt;code class=&quot;highlighter-rouge&quot;&gt;ALTER TABLE table_name ADD [CONSTRAINT [symbol]] FOREGIN KEY [instx_name] (index_col_name, ...) reference_definition;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;eg:
# 设置provinces 表中的id为person表中pid的外键.
ALTER TABLE person ADD FOREIGN KEY (pid) REFERENCES provinces (id);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;添加/删除默认约束:&lt;code class=&quot;highlighter-rouge&quot;&gt;ALTER TABLE table_name ALTER [COLUMN] column_name {SET DEFAULT literal, DROP DEFAULT}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;eg:
ALTER TABLE person ALTER age SET DEFAULT 15;
ALTER TABLE person ALTER age DROP DEFAULT;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;删除主键约束: &lt;code class=&quot;highlighter-rouge&quot;&gt;ALTER TABLE table_name DROP PRIMARY KEY;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;删除唯一约束: &lt;code class=&quot;highlighter-rouge&quot;&gt;ALTER TABLE table_name DROP UNIQUE KEY {INDEX, KEY} index_name;&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;查看 index_name: &lt;code class=&quot;highlighter-rouge&quot;&gt;SHOW INDEXES FROM table_name;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;删除外键约束: &lt;code class=&quot;highlighter-rouge&quot;&gt;ALTER TABLE table_name DROP FOREIGN KEY fk_symbol;&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;查看 fk_symbol: &lt;code class=&quot;highlighter-rouge&quot;&gt;SHOW CREATW TABLE table_name;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;参数外键后索引 index依然存在，要删除：&lt;code class=&quot;highlighter-rouge&quot;&gt;ALTER TABLE table_name DROP INDEX index_name;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;修改列定义:&lt;code class=&quot;highlighter-rouge&quot;&gt;ALTER TABLE table_name MODIFY [COLUMN] col_name column_definetion [FIRST, AFTER col_name];&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;由大类型改成小类型可能会造成数据丢失， 如从INT-&amp;gt;TINYINT.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;修改列名称:&lt;code class=&quot;highlighter-rouge&quot;&gt;ALTER TABLE table_name CHANGE [COLUMN] old_column new_column column_definition [FIRST, AFTER col_name];&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;即可以该名字，也可以改定义.包含了MODIFY的功能.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;修改表名称:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ALTER TABLE old_table_name RENAME [TO, AS] new_table_name;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RENAME TABLE old_table_name1 TO new_table_name1, old_table_name2 TO new_table_name2, .....; &lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;尽量不要更改数据列名字和数据表名字.&lt;/p&gt;

&lt;h2 id=&quot;操作数据库中的数据&quot;&gt;操作数据库中的数据&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;插入之INSERT: &lt;code class=&quot;highlighter-rouge&quot;&gt;INSERT [INTO] table_name [(col_name1, col_name2,...)] {VALUES, VALUE} ({expression, DEFAULT}, ...), (...), ...;&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;如果省略了列名， 则所有的字段都必须赋值.&lt;/li&gt;
      &lt;li&gt;对于自增字段，可以有两种方式赋值:
        &lt;ul&gt;
          &lt;li&gt;将自增字段赋值为NULL, 其会自动增加.&lt;/li&gt;
          &lt;li&gt;将自增字段赋值为DETAULT, 也可以达到同样效果.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;expression为表达式，单个值也是一个表达式。
        &lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;INSERT person VALUES(5, '张三', 20), (5, '李四', 30-2*5);
&lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;插入之INSERT-SET:&lt;code class=&quot;highlighter-rouge&quot;&gt;INSERT table_name SET col_name1={expression}, col_name2={pression}, ...;&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;较INSERT, 该方法可以使用子查询&lt;/li&gt;
      &lt;li&gt;该方法一次只能插入一个&lt;/li&gt;
      &lt;li&gt;对于有默认值或者可以为NULL的字段，可以不写。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-插入之INSET-SELECT:&lt;code class=&quot;highlighter-rouge&quot;&gt;INSERT table_name SELECT select_expression;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;INSER person(id,username) SELECT id, username FROM anotherTable WHERE age &amp;gt; 30;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;单表更新:&lt;code class=&quot;highlighter-rouge&quot;&gt;UPDATE [LOW_PRIORITY] [IGNORE] table_name SET col_name1={expression, DEFAULT}, [col_name2={expression, DEFAULT}, ....] [WHERE where_condition];&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;如果省略 WHERE 条件， 则所有的记录都会被更新.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;eg:
# 将所有id为偶数的年龄加10.
UPDATE person SET age = age + 5 WHERE id % 2 = 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;多表更新:&lt;code class=&quot;highlighter-rouge&quot;&gt;UPDATE table_name SET col_name1={expre1, DEFAULT} [, col_name2={expre2, DEFAULT}, ....] [WHERE where_condition];&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;多表更新之一步到位:&lt;code class=&quot;highlighter-rouge&quot;&gt;CERATE TABLE [IF NOT EXISTS] table_name [(create_definition, create_definition1, ...)] select_statement;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;CREATE TABLE tdb_goods_brands(
brands_id TINYINT,
brand_name VARCHAR(40) NOT NULL
)
SELECT brand_name FROM tdb_goods GROUP BY brand_name;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;单表删除:&lt;code class=&quot;highlighter-rouge&quot;&gt;DELECT FROM table [WHERE where_condition];&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;如果有自增字段，删除后再增加一列，新增列的自增字段不会去补充被删掉的那一列，而是会在最大列的基础上接着增加.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;多表删除:&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;select 语句:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;SELECT select_expression1 [[AS] alias_name],select_expression2, ...
[
	FROM table_refernces
	[WHERE where_condition]
	[GROUP BY {col_name, position} [ASC, DESC], {col_name2, position2} [ASC, DESC], ......]
	[HAVING having_condition]
	[ORDER BY {col_name, expression, position} [ASC, DESC], {col_name2, expression2} [ASC, DESC], ......]
	[LIMIT {[offset,] row_count, row_count OFFSET offset }]
]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;关于别名:AS
    &lt;ul&gt;
      &lt;li&gt;可以省略AS，但不推荐。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;关于过滤条件:WHERE
    &lt;ul&gt;
      &lt;li&gt;WHERE 可以省略，这表示不进行任何的过滤&lt;/li&gt;
      &lt;li&gt;where_condition 表达式中， 可以使用任何MySql支持的函数或运算符.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;关于分组:GROUP BY
    &lt;ul&gt;
      &lt;li&gt;如果 表达式使用的是position,这表示的是按select_expression 中相应的位置来排序， 不是按照数据表中所有字段的位置。&lt;/li&gt;
      &lt;li&gt;建议直接指定名称，数位置挺麻烦.&lt;/li&gt;
      &lt;li&gt;ASC,默认，升序&lt;/li&gt;
      &lt;li&gt;DESC 降序&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;限制分组条件:HAVING
    &lt;ul&gt;
      &lt;li&gt;HAVING的分组条件必须为一个聚合函数或者出现再select_expresison中的表达式。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;对结果排序:ORDER BY:
    &lt;ul&gt;
      &lt;li&gt;如果order表达已经足够排序，则会忽略后面的表达式.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;限制查询数量:LIMIT
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LIMIT row_count&lt;/code&gt;: row_count表示要显示的行数，默认从第一行开始&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LIMIT row_count, start_row&lt;/code&gt;: row_count表示总共要显示的行数，start_row表示开始的行号。注意，&lt;strong&gt;行号是从0开始， 不是从1开始&lt;/strong&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;子查询与连接&quot;&gt;子查询与连接&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;子查询: 指出现在其他SQL语句内的SELECT语句。
    &lt;ul&gt;
      &lt;li&gt;子查询指嵌套的查询内部的查询，&lt;strong&gt;必须始终出现在()内&lt;/strong&gt;.&lt;/li&gt;
      &lt;li&gt;子查询可以包含多个关键字，也是一条正常的查询语句&lt;/li&gt;
      &lt;li&gt;子查询的外层可以是:SELECT, INSERT, UPDATE, SET, DELETE, DO等。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;由比较运算符引发的子查询:
    &lt;ul&gt;
      &lt;li&gt;由比较运算符可以 引发子查询&lt;/li&gt;
      &lt;li&gt;比较运算符的子查询的结果应该唯一&lt;/li&gt;
      &lt;li&gt;如果子查询返回的加过不唯一，应使用ANY, SOME or ALL 来修饰比较运算符&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;# 返回结果唯一的情况
SELECT goods_id, goods_name, goods_price  FROM tdb_goods WHERE good_price &amp;gt; (SELECT AVG(goods_price) FROM tdb_goods);

# 返回结果不唯一的情况
SELECT goods_id, goods_name, goods_price  FROM tdb_goods WHERE good_price &amp;gt; ANY/SOME/ALL (SELECT goods_price FROM tdb_goodsWHERE goods_cate='超极本');
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;由IN or NOT IN 引发的子查询:
    &lt;ul&gt;
      &lt;li&gt;=ANY 运算符与IN等效&lt;/li&gt;
      &lt;li&gt;！=ALL or &amp;lt;&amp;gt;ALL 与NOT IN 等效&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;有 [NOT] EXISTS 引发的子查询:如果子查询返回任何行， 则EXISTS 返回 TRUE，否则返回FALSE.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;表之间的连接:
```mysql
table_references
{[INNER, CROSS] JOIN , [LIFT, RIGHT] [OUTER] JOIN}
table_references
ON condition_expression&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;eg:
UPDATE tdb_goods INNER JOIN tdb_goods_cates ON goods_cate=cate_name SET goods_cate=cate_id;
```&lt;/p&gt;

</description>
        <pubDate>Mon, 10 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
        
        <category>DB</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>django实现登陆后跳转到登陆前的页面</title>
        <description>&lt;h4 id=&quot;坑啊今天为了做个登陆后跳转可坑死了&quot;&gt;坑啊，今天为了做个登陆后跳转，可坑死了。&lt;/h4&gt;

&lt;p&gt;直接进入正题，实现登陆后跳转到的登陆的页面。&lt;/p&gt;

&lt;p&gt;首先需要弄明白整个过程。&lt;/p&gt;

&lt;p&gt;还是先说一下背景，当我们尝试访问需要登陆的页面的时候，会自动跳转到登陆页面，然后登陆后应该继续回到登陆之前的页面。&lt;/p&gt;

&lt;p&gt;再来理整个过程：&lt;/p&gt;

&lt;p&gt;假设我们需要访问的是/download/页面， 登陆是/login/页面。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;我们访问/download页面的时候，触发了@login_required,会由&lt;strong&gt;/download/页面向/login页面发送一个GET请求&lt;/strong&gt;， 此请求中包含了&lt;code class=&quot;highlighter-rouge&quot;&gt;request.path&lt;/code&gt;,值为:/download/,这正是我们想真正访问的地址。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;这时候，&lt;code class=&quot;highlighter-rouge&quot;&gt;views.login&lt;/code&gt; 接到了一个请求，没错，就是由上一步发出去的。但是很显然，这次的登陆请求不能完成登陆，因为发出的是一个GET请求。但是这次的请求里面包含了发出请求的地址。所以我们需要在&lt;code class=&quot;highlighter-rouge&quot;&gt;views.login()&lt;/code&gt;试图中做一些处理。
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c&quot;&gt;# in views.login()&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'GET'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'template'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'next'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'POST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
     &lt;span class=&quot;c&quot;&gt;# 登陆的实现代码。&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
     &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'next'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
     &lt;span class=&quot;c&quot;&gt;# 特别注意:request.POST['next']得到的是一个字符串，而不是一个对象。&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'None'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponseRedirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
     &lt;span class=&quot;c&quot;&gt;# 其他正常业务逻辑&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;最后在登陆页面的登陆表单中添加一个input标签
    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hidden&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;next&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{ {next } }&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上就是整个实现自定义登陆跳转的页面。&lt;/p&gt;

&lt;p&gt;核心点在于：一定要将第一次网站自动发起的登陆页面请求传过来的 request.path保存，返回给客户端，然后在点击登陆的时候在将这个next发送给服务器。&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/django%E5%AE%9E%E7%8E%B0%E7%99%BB%E9%99%86%E5%90%8E%E8%B7%B3%E8%BD%AC%E5%88%B0%E7%99%BB%E9%99%86%E5%89%8D%E9%A1%B5%E9%9D%A2%E7%9A%84%E6%96%B9%E6%B3%95/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/django%E5%AE%9E%E7%8E%B0%E7%99%BB%E9%99%86%E5%90%8E%E8%B7%B3%E8%BD%AC%E5%88%B0%E7%99%BB%E9%99%86%E5%89%8D%E9%A1%B5%E9%9D%A2%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
        
        <category>django</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>4.5.6三个月的简单规划</title>
        <description>&lt;h1 id=&quot;四月&quot;&gt;四月&lt;/h1&gt;
&lt;p&gt;对四月的规划如下：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;读完django by example， 并结合书本，完成一个博客项目。&lt;/li&gt;
  &lt;li&gt;计划是每天保底读完并吃透20页，形成相关笔记，并每日来博客签到，填写完成情况。&lt;/li&gt;
  &lt;li&gt;每周坚持锻炼3次以上，每次1.5小时以上。&lt;/li&gt;
  &lt;li&gt;将游戏时间控制在平均每天小于半小时。&lt;/li&gt;
  &lt;li&gt;每周末总结一周课程，并形成笔记，记录于博客。&lt;/li&gt;
  &lt;li&gt;每周末总结一周的情况，形成笔记，记录于博客。&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;四月一日&quot;&gt;四月一日：&lt;/h4&gt;
    &lt;blockquote&gt;
      &lt;p&gt;读书：完成
游戏时间： 0&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;四月二号&quot;&gt;四月二号&lt;/h4&gt;
    &lt;blockquote&gt;
      &lt;p&gt;读书：10页
游戏 : 2小时
比较尴尬，清明节，给自己放松了一下，早上睡到11点起，在床上玩了一个多小时的王者荣耀，下午陪女朋友和几个伙伴去KTV玩了半天，回来候8点，打了把游戏，然后赶了10页的内容。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;四月三号&quot;&gt;四月三号&lt;/h4&gt;
    &lt;blockquote&gt;
      &lt;p&gt;读书：30页
游戏：5小时，陪女朋友打游戏到凌晨两点。。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;四月四号&quot;&gt;四月四号&lt;/h4&gt;
    &lt;blockquote&gt;
      &lt;p&gt;读书:19页
游戏:0
今天的内容有点晦涩难懂啊，bug也比较多。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;四月五号&quot;&gt;四月五号&lt;/h4&gt;
    &lt;blockquote&gt;
      &lt;p&gt;读书:40页
游戏：0
今天东西比较多，涉及面也比较大。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;四月六号&quot;&gt;四月六号&lt;/h4&gt;
    &lt;blockquote&gt;
      &lt;p&gt;读书:30页
游戏:20分钟
哈哈，早上WC的时候撸了把王者荣耀，中午吃饭的时候又撸了把。
然后是今天的内容了，今天学习的内容超过了我的知识面很多，比如用jquery来做一个缩略图的宫格，使用ajax异步实现点赞，取消赞等，还有使用js写自动运行收集图片的脚本等。还好我能很清楚的知道他们要实现的功能是啥，并且能自己写出替代品，或者把这个功能适当的舍弃。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;四月7号&quot;&gt;四月7号&lt;/h4&gt;
    &lt;blockquote&gt;
      &lt;p&gt;读书:20页
游戏:2.5小时
 和朋友开了一个多小时的王者，然后打了两把联盟。今天的书忘记看了多少页了，因为书里的内容只能说看得懂，但是不知道哪儿错，所以很多书上使用的功能都没有实现，然后自己用其他方法实现的。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;四月8号&quot;&gt;四月8号&lt;/h4&gt;
    &lt;blockquote&gt;
      &lt;p&gt;读书:20页
游戏:1.5小时
周末总会睡懒觉。。每天都是11点多起床。而且这周的游戏时间明显超了。。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;四月9号&quot;&gt;四月9号&lt;/h4&gt;
    &lt;blockquote&gt;
      &lt;p&gt;读书:30页
游戏:0
今天终于吧社交网站模块(第六章)看完了，但是有几个地方没弄太明白，弄明白了就开始下一章啦。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;四月10号&quot;&gt;四月10号&lt;/h4&gt;
    &lt;blockquote&gt;
      &lt;p&gt;读书:0
游戏: 0
11号更新的， 忘记今天干嘛了。。。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;四月11号&quot;&gt;四月11号&lt;/h4&gt;
    &lt;blockquote&gt;
      &lt;p&gt;读书:0
游戏: 0
今天没有继续看书，应为mysql感觉很多没明白的地方，所以好好研究了下，可能接下来还有几天不能看书了，先用心把mysql好好吃一下。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;四月12号&quot;&gt;四月12号&lt;/h4&gt;
    &lt;blockquote&gt;
      &lt;p&gt;读书: 0
游戏: 0
主要还是在啃数据库&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;四月13号&quot;&gt;四月13号&lt;/h4&gt;
    &lt;blockquote&gt;
      &lt;p&gt;读书:0
游戏: 30
还是数据库，不过好像产生抗拒了，傍晚的时候打了一把lol。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;四月14号&quot;&gt;四月14号&lt;/h4&gt;
    &lt;blockquote&gt;
      &lt;p&gt;读书:0页
游戏:0
被数据库折磨疯了，只能转移一下注意力，看一点django了.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;四月14号-1&quot;&gt;四月14号&lt;/h4&gt;
    &lt;blockquote&gt;
      &lt;p&gt;读书:4页
游戏: 0
恩，开始了第七章的django了， 还是django舒服.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;四月15号&quot;&gt;四月15号&lt;/h4&gt;
    &lt;blockquote&gt;
      &lt;p&gt;看书:20页
游戏: 0&lt;/p&gt;

    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;四月21号&quot;&gt;四月21号&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;看书:0
游戏:1.5&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;更新停在了15号，差不多一周没有更新了。应为这周的事情特别杂，乱得无章。同时也反应了自己的一些不足，在乱中无法整理好自己的思绪，分出轻重缓急，做到有条不紊.&lt;/p&gt;

&lt;p&gt;一个月已经过去一半多了， 回想起自己记录的这段时间，总结下来就是每天瞎逼忙，啥事也没有办成。总的来说，游戏时间控制的比较满意，做的东西也挺多，但是却没有一样做得有始有终，大多数都是半途而废，有好的开始，却没有好的结局.&lt;/p&gt;

&lt;p&gt;再回想，自己还有个大问题，就是没法坚持。一周三次的跑步，缩减到了一周两次，甚至一次，时间也大大缩水。一直说的周末总结操作系统和组成原理的课，也一直没有开始。说好的看书，也因为这样那样的原因，告诉自己，没事，我是在忙别的事，不是不学习。可到头来回想起来，却又发现实际上什么都没干，偶尔回想起一些干过的事，却明显的发现，这些事根本花不了多少时间。&lt;/p&gt;

&lt;p&gt;自己安静的思考了一下上面的情况，发现造成这种情况的原因是应为自己没有很好的管理自己的时间，却总是在赶时间。其实不管是每天20页的看书，还是每天1小时的锻炼，真正做起来是花不了太多时间的，而每天都是可以挤出时间来完成这些任务的。&lt;/p&gt;

&lt;p&gt;从今天开始，给试着每天睡前花20分钟给自己简单的制定一下次日的计划，少刷一会儿微信，少逛一会儿空间，多利用课间时间，制定一个简单的次日计划是完全没有问题的。希望每天制定计划也是一种坚持，也能成为一种习惯&lt;/p&gt;

&lt;p&gt;还有，以后在帮助别人解决问题的时候，直接告诉别人把问题累计，自己先尝试着找答案，也更多的去教别人怎么解决问题，而不是帮别人解决问题。自己过一段时间在集中去解决别人的问题，否则的话中途总是被打断，细碎的时间根本不能做啥。&lt;/p&gt;

&lt;p&gt;给自己制定的计划中希望包含这几项必选:1. 每日白天20页的书，铁打不动.2.每天晚上8点半左右去运动场，40-60分钟的运动，想想曾经夏天阳光下穿衬衫的自己。3。每天会宿舍后A90分钟的算法题。4,。每天制定次日计划。&lt;/p&gt;

&lt;p&gt;综合计算一下上面的时间:1运动 + 1.5算法 + 1.5书。加上中间的交接，路上花的时间等，总共5小时，自己每天是完全可以挤出5小时的时间的.也不腰过分的追求多，贵在坚持，过分了反而会厌倦。&lt;/p&gt;

&lt;p&gt;希望自己能每天坚持一点点.&lt;/p&gt;

&lt;p&gt;思考的时候，给自己一个私人的空间，任何人都不能进来.&lt;/p&gt;

&lt;h4 id=&quot;四月22号&quot;&gt;四月22号&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;读书:0
游戏:0
一天都不知道干啥了，早上11点起，2点钟了才慢慢摸到学校。一下午这里跑哪里跑的，啥也没做成。晚上还没抓紧点看看，步也没去跑。第一天就扑街。。。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;四月23号&quot;&gt;四月23号&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;读书:0
游戏:0
果然，一到周末就不会太上心学习,跑步啥的更是没有去。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;四月24号&quot;&gt;四月24号&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;读书:30
游戏:0&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;四月26号&quot;&gt;四月26号&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;读书:0
游戏:2
一不小心，又两天忘记更新了。今天终于吧一大堆破事弄完了，学长的项目等.希望从今天开始，能一切走上正轨.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;四月27号&quot;&gt;四月27号&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;读书:0
游戏:0
一身轻松啦。今天做的东西不多，主要是帮学长最后完善他的项目。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;五月&quot;&gt;五月&lt;/h1&gt;

&lt;p&gt;计划是深入学习python&lt;/p&gt;

&lt;h1 id=&quot;六月&quot;&gt;六月&lt;/h1&gt;

&lt;p&gt;计划是继续深入学习python,并复习数据结构，刷刷面试题，为暑假找工作做多一份准备。&lt;/p&gt;
</description>
        <pubDate>Sat, 01 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/%E6%8E%A5%E4%B8%8B%E6%9D%A54.5.6%E4%B8%89%E4%B8%AA%E6%9C%88%E7%9A%84%E8%A7%84%E5%88%92/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/%E6%8E%A5%E4%B8%8B%E6%9D%A54.5.6%E4%B8%89%E4%B8%AA%E6%9C%88%E7%9A%84%E8%A7%84%E5%88%92/</guid>
        
        <category>规划</category>
        
        
        <category>Life</category>
        
      </item>
    
      <item>
        <title>读django by example 笔记</title>
        <description>&lt;h1 id=&quot;第一天&quot;&gt;第一天&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;创建第一个站点:
&lt;code class=&quot;highlighter-rouge&quot;&gt;django-admin startpreject mysite&lt;/code&gt;
    &lt;ol&gt;
      &lt;li&gt;使用 manage.py 添加建立第一个应用:
&lt;code class=&quot;highlighter-rouge&quot;&gt;python3 manage.py startapp blog&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;安装创建的应用:
        &lt;blockquote&gt;
          &lt;p&gt;刚建立的应用需要安装，才能被系统识别，安装方式为在站点的settings.py文件中，　有个　INSTALL_APP 的列表中添加刚创建的应用．&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;创建第一个Model:
        &lt;blockquote&gt;
          &lt;p&gt;创建一个应用之后，默认就有model.py模块，只需要编辑该模块，创建Model即可．书中是创建了一个 ‘Post’ Model．如下:&lt;/p&gt;
          &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.db&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Datetimefield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ordering&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'-publish'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__str__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;          &lt;/div&gt;
          &lt;ul&gt;
            &lt;li&gt;Post 为Model名字，是一个类．&lt;/li&gt;
            &lt;li&gt;title、publish等是变量，后面的CharField等叫做字段，关于字段的介绍和类型见&lt;a href=&quot;http://single-thread.me/django/2017/03/13/django%E5%AD%97%E6%AE%B5%E7%B1%BB%E5%9E%8B%E6%80%BB%E7%BB%93/&quot;&gt;这里&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;models.CharField(max_length=50),其中max_length叫做字段选项，关于字段选项的作用及类容见&lt;a href=&quot;http://single-thread.me/django/2017/03/13/django%E5%AD%97%E6%AE%B5%E7%B1%BB%E5%9E%8B%E6%80%BB%E7%BB%93/&quot;&gt;这里&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;class Meta:叫做元类，作用是为该Model定义一下不可见的功能，比如排序等，　关于元类的详细介绍在&lt;a href=&quot;&quot;&gt;这里&lt;/a&gt;．&lt;/li&gt;
            &lt;li&gt;ordering = (‘-publish’,):叫做元选项，关于元选项的作用及种类见&lt;a href=&quot;&quot;&gt;这里&lt;/a&gt;．
def __str __:是Model的模型方法，和　python的方法作用一样.&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;生成迁移脚本:
&lt;code class=&quot;highlighter-rouge&quot;&gt;python3 manage.py makemigrations&lt;/code&gt;
作用是将基于当前应用中的Model,生成相对应的数据库生成迁移策略文件．简单说就是根据你的Model,确定怎么生成数据库中的表．&lt;/li&gt;
  &lt;li&gt;执行迁移：
&lt;code class=&quot;highlighter-rouge&quot;&gt;python3 manage.py migrate&lt;/code&gt;
作用是根据伸长的迁移策略，执行迁移，简单说就是执行在数据库中创建表．&lt;/li&gt;
  &lt;li&gt;创建管理员用户：
&lt;code class=&quot;highlighter-rouge&quot;&gt;python3 manage.py createsuperuser&lt;/code&gt;
创建一个管理员用户，用于后台登陆管理员界面．&lt;/li&gt;
  &lt;li&gt;运行开发服务器：
dango自带了一个简单的开发服务器，运行&lt;code class=&quot;highlighter-rouge&quot;&gt;mython3 manage.py runserver&lt;/code&gt;便可以运行．然后访问&lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:8000/admin&lt;/code&gt;，使用管理员账号便可以登陆．&lt;/li&gt;
  &lt;li&gt;注册Model到admin:
    &lt;blockquote&gt;
      &lt;p&gt;为了在admin界面管理Model,需要将Model先注册到admin站点，方法是在admin.py中注册．&lt;/p&gt;
      &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.conrrib&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
      &lt;p&gt;具体注册方法见&lt;a href=&quot;http://single-thread.me/django/2017/03/12/django%E6%B3%A8%E5%86%8Cmodel%E5%88%B0adminSite%E7%9A%84%E6%96%B9%E6%B3%95/&quot;&gt;这里&lt;/a&gt;.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;模型API的使用：介绍了API的简单使用，包括了创建，更新，查询，删除等．具体的API使用见&lt;a href=&quot;&quot;&gt;这里&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;自定义模型管理器：
    &lt;blockquote&gt;
      &lt;p&gt;管理器就是用来管理Model的，其提供了对模型的一些操作的接口．
models默认提供的是objects管理器，但是有时候这个管理器并不是我们期待的样子，这时候我们就可以自己写自己的管理器了．关于自定义管理器的详细，见&lt;a href=&quot;&quot;&gt;这里&lt;/a&gt;．&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;建立视图：
所谓试图，就是接收请求，进行业务逻辑处理并返回一个响应的东西．书中简单的使用了两个请求，一个是post列表，一个是post详情．试图的实质为一个函数．&lt;/li&gt;
  &lt;li&gt;建立URL路由器 urlpatterns．
上述说了，试图的作用是进行业务逻辑处理并返回一个响应，而URL路由的作用便是解析网址，并将不同的请求分配给对应的View处理，则便是URL路由的作用．具体用法见&lt;a href=&quot;&quot;&gt;这里&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;URL路由使用include.
系统给我们提供的URL路由模块是  urls.py,并且只有一个，　但是如果我们将所有应用的工作都交给这个路由来做的话，　势必会造成负担，并且不好维护和管理．　因此我们可以给每个应用都配置一个属于自己的路由．使用include.具体如下：
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c&quot;&gt;# in blog/urls.py&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.conf.urls&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;views&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'^$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'post_list'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
	
  &lt;span class=&quot;c&quot;&gt;# in mysite/urls.py&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.comf.urls&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'^blog/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'blog.urls'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespacs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'blog'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'blog'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;这样，post/urls.py文件就只管理post的url, 然后在将子url include到父url路由器统一管理．&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;规范化Model的url:
当我们想要访问一篇post 的详情的时候，　我们需要通过url访问，所以对于每一篇post,都需要一个唯一的url,所以我们需要按照一定的规范来产生每一个Model对应的url.
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.core.urlresovers&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'blog:post_detail'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                              &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                              &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用模板：
django在html页面可以使用模板引擎，具体使用方法见&lt;a href=&quot;&quot;&gt;这里&lt;/a&gt;．&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;使用分页助手：
我们在页面中显示post列表的时候，有时候数目过多，　此时可以使用分页的方法显示．具体见&lt;a href=&quot;&quot;&gt;这里&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;使用通用视图:
 有时候我们的视图是没有进行任何的特定逻辑处理，或者某些逻辑处理是很简单且统一的，这时候我们可以将他们简化成一个模板，使用的时候只需要传递几个参数就行．比如显示列表的试图，不管是什么Model，都可以显示成列表．关于django中的通用试图，见&lt;a href=&quot;&quot;&gt;这里&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;第二天终于开始更新第二次了&quot;&gt;第二天,终于开始更新第二次了&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;发送邮件：
简单的讲了一下邮件的发送方式，具体见&lt;a href=&quot;&quot;&gt;这里&lt;/a&gt;,并涉及ModelForm的使用。其中用到了两个Model，&lt;code class=&quot;highlighter-rouge&quot;&gt;models.ModelForm&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;models.Form&lt;/code&gt;,两个的区别见&lt;a href=&quot;&quot;&gt;这里&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;启用评论功能：
此处自定义了一个Model Comment，当做是评论类，其中将Post作为Comment的外键。其他的就是一个简单的表单。接着就是简单的处理了一下有关评论的templates&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用文章标签:
先安装标签，pip3 install django-taggit并注册到settings.py.然后在post Model中启用标签管理&lt;/p&gt;
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;taggit.manager&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaggableManager&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaggableManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这样post就有tag属性了, 然后在post_list.html template 中进行标签的显示处理。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;推荐相似的Post：
由于使用了 tag标签， 则可以根据文章的标签来推荐具有相同或者相似标签的文章。在这个地方遇到了一个坑，并get了一个技能：由于对正则表达式不是熟，所以在配置url路由器的时候，正则表达式写错了，应该是&lt;code class=&quot;highlighter-rouge&quot;&gt;(?P&amp;lt;tag_slug&amp;gt;[-/w]+)&lt;/code&gt;, 我硬是写成了&lt;code class=&quot;highlighter-rouge&quot;&gt;(?P&amp;lt;tag_slug&amp;gt;[-/w+])&lt;/code&gt;,如此便出现了NoReverseMatch的错误。
通过找资料，get了一个技能，当在模板中需要用到&lt;code class=&quot;highlighter-rouge&quot;&gt; url 'url-name' arg1 arg2 %}&lt;/code&gt;来获取url地址的时候， 可能会出现获取失败的情况，或者这啊那的出问题，则可以将上述需要获取的url地址通过这样设置成一个变量:&lt;code class=&quot;highlighter-rouge&quot;&gt; url 'url-name' arg as varname %}&lt;/code&gt;, 这样在需要用到url路径的地方使用``就行了。但各有优缺点
    &lt;ul&gt;
      &lt;li&gt;优点：保证了网站的正常行不会崩溃，导致无法访问等。&lt;/li&gt;
      &lt;li&gt;缺点：在调试期间无法很好的及时发现错误。比较好的解决办法是在使用``的时候先判断试下该变量是否为空。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;第二天总结&quot;&gt;第二天总结&lt;/h3&gt;
&lt;p&gt;第二天完事了，这章的内容不多，主要是添加一些功能内容为主，业务逻辑偏多，新技术涉及较少。&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;第三天&quot;&gt;第三天&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;这一章的内容不是很多，因为有的用不到，现在也没必要过于深入的折腾，所以过滤了差不多一半的内容。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;自定义模板标签：
&lt;code class=&quot;highlighter-rouge&quot;&gt;django.template.Library()&lt;/code&gt;库提供了自定义模板标签的可能。模板标签需位于指定目录下，默认是和&lt;code class=&quot;highlighter-rouge&quot;&gt;tamplate&lt;/code&gt;在同一个目录下，目录名字为&lt;code class=&quot;highlighter-rouge&quot;&gt;tamplatetags&lt;/code&gt;,并且需要用&lt;code class=&quot;highlighter-rouge&quot;&gt;__init__.py&lt;/code&gt;初始化为模块，然后建立标签文件eg:&lt;code class=&quot;highlighter-rouge&quot;&gt;post_tag.py&lt;/code&gt;具体用法如下。
    &lt;ul&gt;
      &lt;li&gt;导入Library()库：
        &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c&quot;&gt;# in sitename/appname/templatetags/file_name.py&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.template&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Librarry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;编写模板标签函数：&lt;/p&gt;
        &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;total_posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
  		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;published&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;注册函数为模板标签：&lt;/p&gt;
        &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nd&quot;&gt;@register.simple_tag&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;total_posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;published&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;其中注册器分三种:&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;simple_tag:模板标签的功能只限于返回简单的字符串&lt;/li&gt;
    &lt;li&gt;inclusion_tag:可以返回一个&lt;code class=&quot;highlighter-rouge&quot;&gt;tamplate&lt;/code&gt;，并且使用变量。&lt;/li&gt;
    &lt;li&gt;assignment_tag:可以返回一个上下文变量。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;具体用法见&lt;a href=&quot;&quot;&gt;这里&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;自定义过滤器：
自定义过滤器和自定义模板标签的方法一样， 只是在注册的时候使用&lt;code class=&quot;highlighter-rouge&quot;&gt;register.filter&lt;/code&gt;注册。&lt;/li&gt;
  &lt;li&gt;添加站点地图：只是大概的了解了一下什么是站点地图，只是知道作用大概是方便网站被搜索引擎检索到。&lt;/li&gt;
  &lt;li&gt;添加RSS订阅：恩，了解，没使用。&lt;/li&gt;
  &lt;li&gt;添加站内搜索:了解了一下，也没配置成功。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;第四天&quot;&gt;第四天&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;使用内建类&lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt;和内建认证模块&lt;code class=&quot;highlighter-rouge&quot;&gt;login&lt;/code&gt;来实现一个用户的登陆，官方文档说明在&lt;a href=&quot;http://usyiyi.cn/translate/django_182/topics/auth/default.html#auth-web-requests&quot;&gt;这里&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;具体的流程为:  验证请求类型(get or post), 验证标单的可用性，获取标单数据，提取标单数据，进行用户认证&lt;code class=&quot;highlighter-rouge&quot;&gt;login(username='xx', password='xx')&lt;/code&gt;,如果认证成功， 返回用户，认证失败返回&lt;strong&gt;None&lt;/strong&gt;。所以&lt;strong&gt;一定要先判断返回值&lt;/strong&gt;,在进行操作。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;在实例化一个标单的时候， 可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;request.POST&lt;/code&gt;在作为实例化的参数，这样标单就会自动获取POST值，并赋给表单的对应项。想必这也是html中的表单不用设置action url的原因吧。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;使用内建的登陆模块:
除了使用自定义的试图来登陆，django还提供了内置的登陆系统，&lt;code class=&quot;highlighter-rouge&quot;&gt;django.contrib.auth.views&lt;/code&gt;:提供了&lt;code class=&quot;highlighter-rouge&quot;&gt;login&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;logout&lt;/code&gt;,等常用认证试图。并且有一些常用参数可选择，如指定模板，指定登陆后重定向等。官方文档见&lt;a href=&quot;&quot;&gt;这里&lt;/a&gt;.
    &lt;blockquote&gt;
      &lt;p&gt;超级BUG，配置 url “xxx:xxx” %} 时，引号之间的字符串就是名字，包括空格，所以不要手残加空格&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;扩展了User类，给User类添加了一个Profile， 关系为和User OneToOne。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;添加了用户注册的功能:
编写了一个用户注册的表单类。主要用到一个方法，就是判断两次输入的密码，这个表单类基于&lt;code class=&quot;highlighter-rouge&quot;&gt;model=User&lt;/code&gt;, 在编辑用户注册Views的时候，有一个地没太明白：
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;profile_form&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProfileEditForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;strong&gt;这个参数是干嘛用的。？&lt;/strong&gt;大概的感觉是这个表单中的数据和这个实例关联，如果实例中有表单中某个数据的字段就将它填充上。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;添加了用户编辑的功能:
由于Profile属性是后来添加的，所以在之前创建的User就没有这个属性，所以当尝试访问没有属性的User的profile属性时，会报&lt;code class=&quot;highlighter-rouge&quot;&gt;RelateObjectDoesNotExist:user has no profile&lt;/code&gt;错误。&lt;strong&gt;所以需要将尝试获取User的profile的代码段用try-except包起来，这是书上没有说明的&lt;/strong&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;简单的提了一句自定义User类。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;启用消息通知：
&lt;code class=&quot;highlighter-rouge&quot;&gt;django.contrib.message&lt;/code&gt;提供了消息对象，可以返回不同类型的消息。用法：
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c&quot;&gt;# in views.py&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.contrib&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;anyviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Message body'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- in html--&amp;gt;&lt;/span&gt;
  {.% if messages %}
      {.% for message in messages %}
          {.{ message|safe }}
      {.% endfor %}
  {.% endif %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;添加了自定义认证系统:
自定义认证需要实现两个方法:
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
	
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;然后在settings.AUTHENTICATE_BACNEND中添加。&lt;strong&gt;认证的时候会重上到下认证，如果认证成功则不再进行下一个认证.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;添加第三方认证登陆的功能:
这个功能没做。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;blank的作用，表示可以不填。null的作用，表示可以为Null.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;需要解决：1. 自定义认证出现了问题。2.添加第三方认证登陆&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;第五天&quot;&gt;第五天&lt;/h1&gt;

&lt;p&gt;终于更新到第五章了。这章开始慢慢变难了，不是说django难了，而是开始涉及到的知识面变广了，很多都是我没有接触过，甚至不知道是干啥用的。一个一个来吧。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;今天领悟到了一个很重要的问题，django寻找东西的时候只认名字。比如&lt;code class=&quot;highlighter-rouge&quot;&gt;settings.STATIC_URL = 'static/'&lt;/code&gt;这样的设置，django需要静态文件的时候它就只找叫做static的文件夹，找到了就停，并不会去关心是在哪儿找到的。同样的道理，在使用模板继承的时候，我们写的是&lt;code class=&quot;highlighter-rouge&quot;&gt;{.% extends &quot;base.html&quot; %}&lt;/code&gt;,django只知道在templates下找这个名字，&lt;strong&gt;找到就用，并不会去管在那个templates找到的&lt;/strong&gt;。当然，&lt;strong&gt;会优先搜索同级&lt;/strong&gt;。然后从前到后。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;然后是开始写Image Model了：
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UrlFiels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;slug&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SlugFields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ImageFields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uplode_to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'images/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Y/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;m/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;users_like&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ManyToManyFields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AUTH_USER_MODEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;related_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'images_liked'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;# 多对多字段，表示点赞的人和被点赞的图片之间的关系&lt;/span&gt;
		
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slug&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slugify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#django.utils.text.slugify&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;注意，这里会有两个save.&lt;code class=&quot;highlighter-rouge&quot;&gt;Image.save()&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;Image.image.save(name,content,save=True)&lt;/code&gt;.前者是Model的save,保存的是所有model的信息， 后者是Field的save,保存的仅仅是image,并且需要两个参数，name 和content,名字和对应的实例。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;紧接着创建了一个创建Image的表单:
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateImageForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'title'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'url'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'description'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;widget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;'url'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HiddenInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;这个表单使用的是ModelForm，特点是根据一个Model来生成表单，同时 你可以规定需要填写的字段等。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;紧接这给这个表单添加了一个获取url数据的方法clean_url:
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clean_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cheaned_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'url'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rsplit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'jpg'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'jpeg'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'url error'&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;然后重写了ImageCreateForm.save()方法
重写的save()方法中，直接调用了Image的save()方法，如果数据都可用的话。这样就直接通过ImageCreateForm.save()将图片保存了，省的还要通过Image来保存。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;接下来就是添加一个基于Jquery的收集功能，大概的实现原理是
    &lt;ul&gt;
      &lt;li&gt;添加一段自动运行的js脚本，并拖到收藏栏&lt;/li&gt;
      &lt;li&gt;打开网页的时候，脚本会自动运行，并且检查网页中的网址是否为图片&lt;/li&gt;
      &lt;li&gt;将检测到的图片列出来，然后点击其中一张，就会跳到创建图片的页面。&lt;/li&gt;
      &lt;li&gt;填写部分信息，结合从其他网站传过来的信息，完成图片创建。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不会写，照着书写出来是不能跑的， 故暂时放弃。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;接下来还使用了其他的东西，比如AJAX来异步请求等，但是都不会。所以自己用很原始的请求响应来完成了同样的功能，保证网站完整运行。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;第六天&quot;&gt;第六天&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;create_action中限制用户重复发动态的方法没有完善，记得完善。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;有关动态中，用户和被牵连的东西之间的关系，ContentType啥的也没有弄懂。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;image一直不能保存， 原来是重写save()的时候，缩进弄错了导致没有执行save()&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 22 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/%E8%AF%BBdjango-by-example%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/%E8%AF%BBdjango-by-example%E7%AC%94%E8%AE%B0/</guid>
        
        <category>none</category>
        
        <category>django</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>django常用字段类型总结</title>
        <description>&lt;h2 id=&quot;普通字段&quot;&gt;普通字段&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AutoField:&lt;/code&gt;自增字段，可以随着实例的创建而自动增加.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BooleanField:&lt;/code&gt;布尔类型字段，HTML挂件为CheckBoxInput.取值为:&lt;code class=&quot;highlighter-rouge&quot;&gt;Ture/False&lt;/code&gt;,不能为&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;.默认值为&lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NullBooleanField:&lt;/code&gt;布尔类型，HTML挂件为NullBooleanSelect,取值为:&lt;code class=&quot;highlighter-rouge&quot;&gt;True/False/null&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CharField:&lt;/code&gt;字符串类型的字段，HTML挂件为TextInput,必须接收一个&lt;code class=&quot;highlighter-rouge&quot;&gt;CharField.max_length&lt;/code&gt;参数来指定其在数据库中的长度．&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DateField:&lt;/code&gt;日期字段，使用的是python的datetime.date实例，有几个额外的参数.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DateField.auto_now_add:&lt;/code&gt;取值为&lt;code class=&quot;highlighter-rouge&quot;&gt;False/True&lt;/code&gt;,作用为自动取值为实例创建的时间，创建于.
&lt;code class=&quot;highlighter-rouge&quot;&gt;DateField.auto_now:&lt;/code&gt;取值为:&lt;code class=&quot;highlighter-rouge&quot;&gt;False/True&lt;/code&gt;,作用为自动设置值为最后一次保存的时间，更新于．
&lt;code class=&quot;highlighter-rouge&quot;&gt;auto_now&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;auto_now_add&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt;三个选项是互斥的.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DateTimeFild:&lt;/code&gt;日期类型，使用的是python 的datetime.datetime实例，参数个&lt;code class=&quot;highlighter-rouge&quot;&gt;DateField&lt;/code&gt;一样．&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TimeField&lt;/code&gt;:日期类型，使用的是python 的datetime.time实例，参数和上述一样．&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;查询&lt;a href=&quot;http://python.usyiyi.cn/translate/python_352/library/datetime.html&quot;&gt;python参考&lt;/a&gt;可知，Data主要用于日期，表示年月日，Time主要用于时间，表示时分秒，而DateTime则是完整的年月日时分秒都有．&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DecimalField:&lt;/code&gt;十进制的浮点数字段，使用的是python的Decimal实例表示十进制的浮点数，也就是小数，Html默认挂件为TextInput,接收两个必须参数:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DecimalField.max_digits:&lt;/code&gt;数字的总位数，包括整数和小数部分．
&lt;code class=&quot;highlighter-rouge&quot;&gt;DecimalField.decimal_places:&lt;/code&gt;小数的位数&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FloatField:&lt;/code&gt;十进制浮点数类型，使用的是python的float数据类型表示小数.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;参考&lt;a href=&quot;http://python.usyiyi.cn/translate/python_352/library/decimal.html&quot;&gt;python文档&lt;/a&gt;和&lt;a href=&quot;http://www.cnblogs.com/herbert/p/3402245.html&quot;&gt;网友博客&lt;/a&gt;可知，两者的区别在于精度，decimal是高精度类型.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EmailField:&lt;/code&gt;邮件类型，主要用于验证邮件地址的正确性，使用&lt;a href=&quot;http://python.usyiyi.cn/translate/django_182/ref/validators.html#django.core.validators.EmailValidator&quot;&gt;EmailValidator&lt;/a&gt;验证.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FileField:&lt;/code&gt;文件字段，用于上传文件．添加该字段后，会获得一个&lt;code class=&quot;highlighter-rouge&quot;&gt;FieldFile&lt;/code&gt;来&lt;a href=&quot;http://python.usyiyi.cn/translate/django_182/topics/files.html&quot;&gt;管理文件&lt;/a&gt;．&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FilePathField:&lt;/code&gt;文件名类型，实质是一个&lt;code class=&quot;highlighter-rouge&quot;&gt;CharField&lt;/code&gt;类型，只是类容做了限定，只能是文件的路径和名字．&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ImageField:&lt;/code&gt;图片类型，除了继承自&lt;code class=&quot;highlighter-rouge&quot;&gt;FileField&lt;/code&gt;外，还提供了额外的功能，比如图片校验等．需要调用&lt;a href=&quot;http://pillow.readthedocs.io/en/latest/&quot;&gt;Pillow&lt;/a&gt;库．&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GenericlIPAdressField:&lt;/code&gt;IP地址类型．&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SlugField:&lt;/code&gt;段标题，主要用于生成url或者其他唯一的链接．&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TextField:&lt;/code&gt;大文本类型，HTML挂件为Textarea.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;URLField:&lt;/code&gt;URL类型的字段，根本是CharField．&lt;/p&gt;

&lt;h2 id=&quot;关系字段&quot;&gt;关系字段&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ForeignKey:&lt;/code&gt;外键字段，也叫多对一关系，本Model是多，然后关联一个’一’，比如一个人可以写很多文章，那么此时的文正就是多，而人就是一，然后人就是文章的外键．&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ForeignKey.limit_choices_to:&lt;/code&gt;值为一个字典，筛选出满足一定关系的Model实例，使得本Model的选择只能是满足上述模块的Model实例．&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ForeginKry.relate_name:&lt;/code&gt;取值为字符串，用于设置本Model在关联实例中的名称．例如:本Model为文章，关联了人作为外键，那么对于人来说，人对他所写的这些文章的称呼就叫做’著作们’,relate_name就表示这个．.&lt;/p&gt;

</description>
        <pubDate>Mon, 13 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/django%E5%AD%97%E6%AE%B5%E7%B1%BB%E5%9E%8B%E6%80%BB%E7%BB%93/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/django%E5%AD%97%E6%AE%B5%E7%B1%BB%E5%9E%8B%E6%80%BB%E7%BB%93/</guid>
        
        <category>django</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>django中ModelAdmin.actions用法总结</title>
        <description>&lt;h2 id=&quot;model的注册&quot;&gt;Model的注册&lt;/h2&gt;
&lt;p&gt;如果我们在models.py中创建了模型，但是admin site并不知道我们的这个模型，所以我们需要告诉admin site ，以显示这个模型．这就是注册．
将一个model注册到admin site 提供了三种方法:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;直接注册:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;admin.site.register(ModelName)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;使用ModelAdmin注册:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class ModelAdminNamea(dmin.ModelAdmin):
 pass
admin.site.register(ModelAdminName, modelName)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;这中方法可以通过ModelAdminName类来添加一下对Model的约束或管理&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;使用装饰器注册：
```
@admin.register(ModelName)
class ModelAdminName(admin.ModelAdmin):
 pass&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2 id=&quot;modeladmin的选项和用法&quot;&gt;ModelAdmin的选项和用法&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;class Meta&lt;/code&gt;类提供了一个模型的内部的约束和行为管理，其功能只能是对具体的模型进行具体的管理，有点类似于模型的自我管理．而&lt;code class=&quot;highlighter-rouge&quot;&gt;class ModelAdmin&lt;/code&gt;提供的是模型外部的管理，管理的是一群模型的实例．主要管理的是Model在admin site中的表现行为.&lt;/p&gt;

&lt;h4 id=&quot;modeladmin的可用选项&quot;&gt;ModelAdmin的可用选项&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; ModelAdmin.action &lt;/code&gt;:其值为一个列表，列表内容是响应的函数，作用是定义在admin site中选择多个model实例是，可用的操作．通俗说就是批量处理的行为．具体见&lt;a href=&quot;http://single-thread.me/django/2017/03/12/django%E4%B8%ADModelAdmin.action%E7%9A%84%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; ModelAdmin.action_on_top/bottom &lt;/code&gt;:值为布尔(bool),作用是控制action bar 的显示位置.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ModelAdmin.action_selection_counter&lt;/code&gt;:取值为布尔，作用是是否显示选择计数器．选择计数器，选择的时候，会在下拉响应菜单的旁边实时显示数量．&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ModelAdmin.date_hierarchy&lt;/code&gt;:取值为字段类型中的DateField/DateTimeField,作用是在列表页面上方生成一个基于时间的导航．&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ModelAdmin.exclude&lt;/code&gt;:．．．&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ModelAdmin.fields&lt;/code&gt;:需要编辑的字段取值为元祖。点击添加的时候可以供用户编辑的字段。注意&lt;code class=&quot;highlighter-rouge&quot;&gt;DataTimeField&lt;/code&gt;有的auto_add, auto_add_now等字段选项不能出现在这个元祖中。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ModelAdmin.list_display&lt;/code&gt;:取值为元祖，　作用是定义在Model列表中要显示的字段．&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ModelAdmin.list_filter&lt;/code&gt;:取值为元祖，作用按元祖中的选项过滤Model,表现为在页面的右边显示了一系列的过滤选择．&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ModelAdmin.search_fields&lt;/code&gt;:取值为元祖，　作用是提供一个搜索框，　可以搜索元祖中列举的字段．&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ModelAdmin.prepopularted_fields&lt;/code&gt;:取值为字典，&lt;strong&gt;键值必须在fields选项中&lt;/strong&gt;作用是自动根据字典中的Value生成SlugField填充Key,通常作用是将Key为SlugField,然后通过Value来自动填充，其中Value为元祖．并且Value不支持DateTimeField 和关系字段.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ModelAdmin.raw_id_fields&lt;/code&gt;:取值为一个元祖，作用是将Model中ForeignKry由默认的下拉选择框改成文本输入框，使得用户可以直接键入ForeignKey的对象ID便可以，也可以点击选择．&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ModelAdmin.ordering&lt;/code&gt;:取值为一个列表，　作用是按照列表中所给的字段排序，字段为字符串，加上 ‘-‘ 为反向排序．&lt;/p&gt;

</description>
        <pubDate>Sun, 12 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/django%E6%B3%A8%E5%86%8Cmodel%E5%88%B0adminSite%E7%9A%84%E6%96%B9%E6%B3%95/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/django%E6%B3%A8%E5%86%8Cmodel%E5%88%B0adminSite%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
        
        <category>django</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>django中ModelAdmin.actions用法总结</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/1.10/ref/contrib/admin/actions/&quot;&gt;参考文档:django documentation&lt;/a&gt;&amp;lt;/br&amp;gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;ModelAdmin.actions&lt;/code&gt;的作用是提供一系列对Model实例批量处理的可用操作．举个简单例子，当要删除某个Model实例时，先选择实例，然后删除，当要删除一堆实例的时候，就会多选，然后删除．&lt;code class=&quot;highlighter-rouge&quot;&gt;ModelAdmin.actions&lt;/code&gt;做的就是提供一系列类似于&lt;em&gt;删除&lt;/em&gt;的方法．&lt;/p&gt;

&lt;h4 id=&quot;用法&quot;&gt;用法：&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;c&quot;&gt;# 编写处理的方法&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_something_for_seleted_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;	
	&lt;span class=&quot;c&quot;&gt;# 设置对外描述&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;do_something_for_seleted_items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;short_description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;do something&quot;&lt;/span&gt;
	
	&lt;span class=&quot;nd&quot;&gt;@site.register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ModelAdminName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelAdmin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;# 添加处理的方法&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;do_something_for_seleted_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样，在admin site页面，批量选择实例后，就可以批量对这些实例进行操作．
我们还可以把处理的方法放到&lt;code class=&quot;highlighter-rouge&quot;&gt;class ModelAdminName&lt;/code&gt;中，是的处理的方法看起来更有针对性，像这样:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;c&quot;&gt;# 编写处理的方法&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_something_for_seleted_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;	
	&lt;span class=&quot;c&quot;&gt;# 设置对外描述&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;do_something_for_seleted_items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;short_description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;do something&quot;&lt;/span&gt;
	
	&lt;span class=&quot;nd&quot;&gt;@site.register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ModelAdminName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelAdmin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;# 添加处理的方法&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;do_something_for_seleted_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,]&lt;/span&gt;
	
		&lt;span class=&quot;c&quot;&gt;# 编写处理的方法&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_something_for_seleted_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;	
		&lt;span class=&quot;c&quot;&gt;# 设置对外描述&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;do_something_for_seleted_items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;short_description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;do something&quot;&lt;/span&gt;
	
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;还可以改进，当处理完操作之后，向用户显示一个通知，告知用户处理的结果,可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;ModelAdmin.message_user()&lt;/code&gt;来提供通知：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 编写处理的方法&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_something_for_seleted_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'something done,or some notice'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;或者当操作完成之后，返回给用户一个重定向或者响应:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 编写处理的方法&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_something_for_seleted_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpResponseRedirect&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;对所有的model实例都启用同一个响应&quot;&gt;对所有的Model实例都启用同一个响应&lt;/h4&gt;
&lt;p&gt;如果你写的某一个方法对所有的Model都适用，那么可以把他添加到全局的响应里面，比如说统计选择条数的函数，对全局都通用．&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'选择了{}条．'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;short_description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'选择了多少条'&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样，无论你操作那个Model的实例，都会有count的响应可选择.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;admin.site.add_action&lt;/code&gt;可以选择第二个参数，第二个参数的作用是给这个响应命名，这样以后可以方便的操作这个响应．&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;admin.site.add_action(count, 'show item num')&lt;/code&gt;这样就把&lt;em&gt;count&lt;/em&gt;这个响应命名为&lt;em&gt;show item num&lt;/em&gt;了．&lt;/p&gt;

&lt;h4 id=&quot;对某个站点禁用全局响应&quot;&gt;对某个站点禁用全局响应&lt;/h4&gt;
&lt;p&gt;适用&lt;code class=&quot;highlighter-rouge&quot;&gt;admin.site.disable_adtion&lt;/code&gt;来禁用某个响应，参数为响应的名字．eg:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'show item num'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;对某个model禁用所有操作&quot;&gt;对某个Model禁用所有操作&lt;/h4&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ModelAdminName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelAdmin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这样，该模型就被禁用了所有的批量操作，包括自带的删除操作&lt;/p&gt;

&lt;h4 id=&quot;按需选择操作&quot;&gt;按需选择操作&lt;/h4&gt;
&lt;p&gt;我们可以通过复写&lt;code class=&quot;highlighter-rouge&quot;&gt;ModelAdmin.get_adtions&lt;/code&gt;来获取可用响应&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ModelAdminName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelAdmin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
			&lt;span class=&quot;c&quot;&gt;# 获取所有操作&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelAdminName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;c&quot;&gt;# 如果满足一定条件，则删除某个响应或者添加某个响应&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'action name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'another action'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c&quot;&gt;# 返回经过处理的actions&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 12 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/django%E4%B8%ADModelAdmin.action%E7%9A%84%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/django%E4%B8%ADModelAdmin.action%E7%9A%84%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/</guid>
        
        <category>django</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>mysql不能启动，修改字符集的注意事项</title>
        <description>&lt;p&gt;ubuntu 下装mysql，出现了各种问题，在使用的过程中。 写下来记录一下，避免以后出出问题了早不到。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;mysql启动的时候提示：Can’t connect to local MySQL server through socket ‘/var/lib/mysql/mysql.sock.’不同发行版的系统路径可能会不一样，但结果是一样的，该路径下没有　mysqld.sock文件．&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 解决方法当时弄好了就关了，忘记了。

- ########    2017.2.4日更新：########

- 今天又遇到同样问题了，　苦苦寻找，　找到了[解决法方](http://askubuntu.com/questions/90978/mysql-problem-var-run-mysqld-mysqld-sock)之一：

- 进入　cd /etc/init.d/　目录，执行　mysqld_safe，会重新生成文件．

- 执行　sudo find / -type s | grep mysqld.sock　查找生成的文件路径

- 将生成的文件移动到提示错误时标示出来的路径，我的是直接就生成在了那个路径下

- ########  结束2017.2.4　#####

- 注意，mysql装好之后把/var/mysql/mysql.sock 备份一下，创建数据库的时候记得设置编码。我是创建数据库的时候没有设置编码，然后后来重新修改my.conf,然后重启导致mysql.sock丢失。 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;dpkg: error processing mysql-server (–configure）/mysql-common(–configure)&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 解决，通常这是数据库卸载的时候没有正确卸载导致的。重新执行一下命令，完全卸载数据库，再重新安装。删除mysql前 先删除一下 /var/lib/mysql 还有 /etc/mysql ``` sudo rm /var/lib/mysql/ -R sudo rm /etc/mysql/ -R sudo apt-get autoremove mysql* --purge sudo apt-get remove apparmor ```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;mysql创建表的时候制定编码：
    - 用show variables like ‘character_set_%’; 查看编码&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-  create database mydb character set utf8;创建数据库的时候直接制定编码;

   -   修改默认字符集：
   
    - 把 //etc/mysql/mysql.conf.d/mysqld.cnf 复制一份到 /etc/mysql/my.cnf
    
    - 在[mysqld]下添加：
    
    &amp;lt;strong&amp;gt;
    character-set-server=utf8  
    collation-server=utf8_general_ci
    skip-character-set-client-handshake
    &amp;lt;/strong&amp;gt;&amp;lt;br&amp;gt;
    
其中，character_set_client为客户端编码方式；

 character_set_connection为建立连接使用的编码；
 
 character_set_database数据库的编码；
 
 character_set_results结果集的编码；
 
 character_set_server数据库服务器的编码；
 
只要保证以上四个采用的编码方式一样，就不会出现乱码问题。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;2017-3-30日更新
最近有瞎折腾，更换系统，重装mysql的时候又出现了各种各样的问题，很重要的一个还是没能彻底解决找不到mysqld.sock的办法，很多时候在 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/init.d/&lt;/code&gt;目录下执行&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo mysqld_safe&lt;/code&gt;也不能解决。而且就算当时成功了， 下次重启机器的时候还是会出现这种问题。所以当苦苦弄不好的时候我就会选择重装mysql.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;重装mysql&quot;&gt;重装MysqL&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;然而重装的坑也不少啊&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;重装遇到的问题：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;重装的时候根本没有要求输密码，很明显，没有卸载干净。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;重装的时候安装失败，报&lt;code class=&quot;highlighter-rouge&quot;&gt;dpkg: error processing mysql-server (--configure):&lt;/code&gt;错误。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;就算出了输密码的界面，输入了密码，也没法启动mysql,还是会报sock找不到的错误.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;原因是没有卸载干净&quot;&gt;原因是没有卸载干净&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get autoremove mysql* --purge&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;上面的命令会弹出mysql的卸载界面，　和当初输密码的时候一样的界面。&lt;/p&gt;

&lt;p&gt;然后一定要检查一下&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/mysql&lt;/code&gt;是否存在，在的话就删。&lt;/p&gt;

&lt;p&gt;接着再安装mysql。&lt;/p&gt;

&lt;h4 id=&quot;妈的还是一样的情况啊啊啊啊啊&quot;&gt;妈的还是一样的情况啊啊啊啊啊…..&lt;/h4&gt;

&lt;p&gt;来狠的&lt;/p&gt;

&lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo tree / -f | grep mysql &amp;gt; a.txt&lt;/code&gt;找出所有和mysql相关的文件，写入到a.txt中，　&lt;/p&gt;

&lt;p&gt;然后手动删除那些前面多余的字符，使得每一行都是一个有关mysql的路径，然后在这些路径中删去你需要的。当然你也可以写脚本来完成这一步。&lt;/p&gt;

&lt;p&gt;然后写一个python脚本来删除这些文件&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# in delmysql.py&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'rm -rf '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo python3 delmysql.py&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;终于彻底删除了。　爽，然后接着尝试安装。&lt;/p&gt;

&lt;p&gt;恩，这回没问题了。为了防止再次丢失的情况，我吧原sock做了备份，并且创建了一个链接。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /var/run/mysqld
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mv mysqld.sock ../
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;link ../mysqld.sock ./mysqld.sock
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后用了一会儿之后关机了，再开机还能正常使用。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/frinder/article/details/7041723&quot;&gt;参考链接:设置配置&lt;/a&gt;
&lt;a href=&quot;http://www.jianshu.com/p/8ef7519e5b2d&quot;&gt;参考链接：安装与配置&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 10 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/mysql%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5and%E4%BF%AE%E6%94%B9%E5%AD%97%E7%AC%A6%E9%9B%86/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/mysql%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5and%E4%BF%AE%E6%94%B9%E5%AD%97%E7%AC%A6%E9%9B%86/</guid>
        
        <category>DB</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>c++ 多线程学习笔记</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/singlt-thread/learn_thread&quot;&gt;github&lt;/a&gt;:https://github.com/single-thread/learn_thread&lt;/p&gt;
&lt;h4 id=&quot;ch-1---课程简介&quot;&gt;ch 1   课程简介&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;包含的头文件 ‘thread’
      &lt;blockquote&gt;
        &lt;p&gt;linux 下 g++ 编译的时候加上参数 -lpthear,否则会报 undefined reference to `pthread_create’ 错误&lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/li&gt;
    &lt;li&gt;线程创建的前提:给线程对象传递一个&lt;a href=&quot;http://blog.csdn.net/lc_910927/article/details/21250111&quot;&gt;可调用对象&lt;/a&gt;作为参数&lt;/li&gt;
    &lt;li&gt;创建线程的方法：thread t1(functionName);  //functionName为待执行的函数&lt;/li&gt;
    &lt;li&gt;启动线程的方法:
      &lt;ol&gt;
        &lt;li&gt;t1.join()    //主线程会等待t1线程执行完毕后才会退出。&lt;/li&gt;
        &lt;li&gt;t1.detach();    //主线程执行完毕就会退出，可能导致t1线程没有执行完成就退出了&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/li&gt;
    &lt;li&gt;任何线程在 detach() 之后就不能在 join()了。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void fun(){ do something;}
int main(){
    thread t1(fun);
    t1.detach();
    t1.join();    //禁止会报错。
    return 0;
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;线程在join() 之前可以判断是不是可以被 join(), 使用 joinable() 方法,来保证程序的正常.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int main(){
    thread t 1(fun);
    t1.detach();
    if(t1.joinable()){
        t1.join();
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;ch2-线程管理&quot;&gt;ch2 线程管理&lt;/h4&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;主线程可以和子线程同时执行业务逻辑，eg:&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int main(){
    std::thread t1(fun);
    for(int i = 0; i &amp;lt; 10; i++){
        //如果发生异常，则主程序中断，子程序也会中断
        std::cout &amp;lt;&amp;lt; &quot;in main thread&quot; &amp;lt;&amp;lt; std::endl;
    }
    t1.join();    //不安全线程
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;但就像上面的代码，如果主程序的for循环中出现异常的话，主线程就中断了，导致的结果是 子线程也会意外中断。为了防止这种不正常的结束，需要对可能出现异常的地方用try/catch 包围。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int main(){
    std::thread t1(fun);
    try{
        for(int i = 0; i &amp;lt; 10; i++){
            //如果发生异常，则主程序中断，子程序也会中断
            std::cout &amp;lt;&amp;lt; &quot;in main thread&quot; &amp;lt;&amp;lt; std::endl;
        }
    }catch(...)    //... 代表任意类型的异常
    {
        t1.join();
        throw; //将错误往上抛
    }
    t1.join();    //这段代码如果不写这句就会报错，是为什么？
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;线程不止可以被函数构造，还可以通过任何&lt;strong&gt;可被调用&lt;/strong&gt;的对象构造。创建这样一个类:&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Fctor{
public:
    void operator()(){ //这个名字是不是一定的？两个括号是什么意思？
        for(int i = 0; i &amp;gt; -10; i--){
            std::cout &amp;lt;&amp;lt; &quot;for ft1&quot; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl;
        }
    }
};
int main(){
    Fctor ft1;    //实例化对象
    std::thread t1(ft1);    //通过对象构造线程
    std::thread t1((Fctor()));    //和上述方法完全等效的另一种构造方式。这种方式叫什么呢？ //java中叫匿名函数
    try{
        for(int i = 0; i &amp;lt; 10; i++){
            //如果发生异常，则主程序中断，子程序也会中断
            std::cout &amp;lt;&amp;lt; &quot;in main thread&quot; &amp;lt;&amp;lt; std::endl;
        }
    }catch(...)    //... 代表任意类型的异常
    {
        t1.join();
        throw; //将错误往上抛
    }
    t1.join();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;向线程传递参数
  修改class中的 operator()()的参数以及主函数。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;string&amp;gt;
class Fctor{
public:
    void operator()(std::string args){
        for(int i = 0; i &amp;gt; -10; i--){
            std::cout &amp;lt;&amp;lt; &quot;for ft1&quot; &amp;lt;&amp;lt; args &amp;lt;&amp;lt; std::endl;
        }
    }
};
int main(){
    string s = &quot;i love you&quot;;
    Fctor ft1;    //实例化对象时不用传递参数
    std::thread t1(ft1, s);    //参数是在线程创建的时候向线程传递的
    
    std::thread t1((Fctor()), s);   
    try{
        for(int i = 0; i &amp;lt; 10; i++){
            std::cout &amp;lt;&amp;lt; &quot;in main thread&quot; &amp;lt;&amp;lt; std::endl;
        }
    }catch(...)    //... 代表任意类型的异常
    {
        t1.join();
        throw; //将错误往上抛
    }
    t1.join();
}
执行上述代码，可以清楚的得到结果，成功的往线程里传递了参数。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;线程的引用传参
  有时候我们为了节省空间，提高效率，会采用引用的方式传递参数&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;这段代码在我的电脑上执行会报错，windous下可以执行    
#include &amp;lt;string&amp;gt;
class Fctor{
public:
    void operator()(std::string&amp;amp; args){
        for(int i = 0; i &amp;gt; -10; i--){
            std::cout &amp;lt;&amp;lt; &quot;for ft1&quot; &amp;lt;&amp;lt; args &amp;lt;&amp;lt; std::endl;
            args = &quot;i don't love you&quot;;
        }
    }
};
int main(){
    string s = &quot;i love you&quot;;
    Fctor ft1;    //实例化对象时不用传递参数
    std::thread t1(ft1, s);    //参数是在线程创建的时候向线程传递的
    
    std::thread t1((Fctor()), s);   
    try{
        for(int i = 0; i &amp;lt; 10; i++){
            std::cout &amp;lt;&amp;lt; &quot;in main thread&quot; &amp;lt;&amp;lt; std::endl;
        }
    }catch(...)    //... 代表任意类型的异常
    {
        t1.join();
        throw; //将错误往上抛
    }
    t1.join();
    
    std::cout &amp;lt;&amp;lt; &quot;in main,s is:&quot; &amp;lt;&amp;lt; s &amp;lt;&amp;lt; std::endl;
}
执行上述程序，可以看到，s并没有在线程中被更改，此处还是复制传参。
正确引用传递参数的方法是：  std::thread t1((Fctor()), std::ref(s));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;线程间数据的移动
  有时候我们不想在两个线程之间共享数据，因为则会导致数据的同步问题，例如上面，我只想将主线程中创建的 &lt;code class=&quot;highlighter-rouge&quot;&gt;string s;&lt;/code&gt; 只让线程 t1 使用，此时就要用数据移动。并且在C++中有的对象只能被移动，不能被复值。如:线程对象(thread t1 = t1是不行的)。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;string&amp;gt;
class Fctor{
public:
    void operator()(std::string&amp;amp; args){    //教程上给的是引用传参，但我自己的不能使用引用传参，必须使用复制传参，如果这里编译通不过的可以把引用去掉试试。
        for(int i = 0; i &amp;gt; -10; i--){
            std::cout &amp;lt;&amp;lt; &quot;for ft1&quot; &amp;lt;&amp;lt; args &amp;lt;&amp;lt; std::endl;
            args = &quot;i don't love you&quot;;
        }
    }
};
int main(){
    string s = &quot;i love you&quot;;
    std::thread t1((Fctor()), std::move(s));       //通过move把 s 移动到线程 t1。
    try{
        for(int i = 0; i &amp;lt; 10; i++){
            std::cout &amp;lt;&amp;lt; &quot;in main thread&quot; &amp;lt;&amp;lt; std::endl;
        }
    }catch(...)    //... 代表任意类型的异常
    {
        t1.join();
        throw; //将错误往上抛
    }
    t1.join();
    
    std::cout &amp;lt;&amp;lt; &quot;in main,s is:&quot; &amp;lt;&amp;lt; s &amp;lt;&amp;lt; std::endl;  //因为参数已经移动到线程 t1  所以此处的s输出便为空。
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;线程的移动
  线程是不能被复制的，只能移动。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;std::thread t2 = std::move(t1);  //移动后 t1 为空。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;线程的id
  每个线程都有一个唯一的id，可以获取：&lt;code class=&quot;highlighter-rouge&quot;&gt;this_thread::get_id();&lt;/code&gt;获取当前线程的id。&lt;/li&gt;
    &lt;li&gt;最大线程数
  在写并发编程的时候，要考虑cup的性能，频率等。不能一味的就创建尽量多的线程。&lt;code class=&quot;highlighter-rouge&quot;&gt;std::thread::hardware_concurrency()&lt;/code&gt;可以获取cup可支持的最大线程数。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;ch3-数据竞争和互斥&quot;&gt;ch3 数据竞争和互斥&lt;/h4&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;线程间的竞争
  多个线程之间会争夺同一资源&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
#include&amp;lt;thread&amp;gt;
using namespace std;
void function_1(){
    for (int i = 0; i &amp;lt; 100; ++i) {
    cout &amp;lt;&amp;lt;  &quot;from t1:&quot; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl;  //线程 t1 使用cout
    }
}
int main(int argc, char *argv[])
{
    thread t1(function_1);
    for(int i = 0; i &amp;gt; -100; i--){
    cout &amp;lt;&amp;lt; &quot;for main:&quot; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl;  //线程 main 使用cout
    }
    t1.join();
    return 0;
}
可以看到，输出的结果杂乱无章，很多输出还是被从中间截断了的。因为两个线程同时在抢夺 cout 资源。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;使用互斥锁保持数据完整
  可以使用mutex对象提供的锁方法来锁定在使用中的数据。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;mutex&amp;gt;
mutex mu;    //实例化锁对象
void share_print(string msg, int id){    //共享函数
mu.lock();    //加锁
cout &amp;lt;&amp;lt; msg &amp;lt;&amp;lt; id &amp;lt;&amp;lt; endl;
mu.unlock();    //释放锁
}
void function_1(){
for (int i = 0; i &amp;lt; 100; ++i) {
        share_print(&quot;from t1:&quot;, i);    //调用共享和函数
        }
}
int main(int argc, char *argv[])
{
    thread t1(function_1);
    for(int i = 0; i &amp;gt; -100; i--){
    cout &amp;lt;&amp;lt; &quot;for main:&quot; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl;  //线程 main 使用cout
    }
    t1.join();
    return 0;
}
//执行完毕，可以看到 t1线程里面句子都完整的输出，不会被打乱，但主线程里面的还是会被打乱，因为主线程的没有加锁。将主线程中的cout换成调用函数就能完整了。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;使用互斥锁的缺陷
  == 如果在加锁的范围内出现了异常，那么锁将永远不会被解开。 ==
  为了解决上述问题，需要改进lock();&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;mutex&amp;gt;
mutex mu;    //实例化锁对象
void share_print(string msg, int id){    //共享函数
//mu.lock();    不使用mu.lock() 加锁。
lock_guard&amp;lt;mutex&amp;gt; guard(mu);    //把锁工具 mu 交给guard对象控制，当guard对象销毁的时候，会自动解说。这样就避免了在加锁期间出现异常，无法解锁而造成死锁的问题。
cout &amp;lt;&amp;lt; msg &amp;lt;&amp;lt; id &amp;lt;&amp;lt; endl;
// mu.unlock();    锁会由guard对象自动释放
}
然而这样还是没能完整的保护好，因为cout是个全局对象，不是所有的cout都能不使用参与竞争。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;构造对象保护
  为了解决上述问题，我们可以构造出一个对象来对需要保护的对象进行全方位的保护。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class LockFile    //确保同时只有一个线程能操作这个文件,该对象是f文件能访问的唯一通道。
{
private:
    ofstream f;
    mutex m_mu;

public:
    LockFile(){
     f.open(&quot;log.txt&quot;);
    }
    void share_print(string id, int vaue){    //真正起作用的事这个方法,这个方法保护了文件
      lock_guard&amp;lt;mutex&amp;gt; guard(m_mu);
      f &amp;lt;&amp;lt; &quot;from&quot; &amp;lt;&amp;lt; id &amp;lt;&amp;lt; &quot;:&quot; &amp;lt;&amp;lt; vaue &amp;lt;&amp;lt; endl; 
    }
}; 

void function_1(LockFile&amp;amp; lockfile){    //访问文件必须通过锁对象
        for (int i = 0; i &amp;lt; 100; ++i) {
            lockfile.share_print(&quot;from t1:&quot;, i);
        }
}

int main(int argc, char *argv[])
{
LockFile lockfile;
thread t1(function_1,ref(lockfile))
    for(int i = 0; i &amp;gt; -100; i--){
        lockfile.share_print(&quot;main&quot;, i);    //访问文件必须通过锁对象
    }
    t1.join();
    return 0;
}
使用锁对象来保护文件是个很不错的方式,但需要注意的是,锁对象不能将受保护对象返回到外面,也不能将受保护对象作为函数参数;eg:
    fstream&amp;amp; LockFile::getFile(){return f;}
    void LockFile::doSomething(void fun(ofstream&amp;amp;)){
        fun(f);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;死锁&quot;&gt;死锁&lt;/h4&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;死锁的产生:
      有时候我们需要同时使用两把或则以上的锁,如果锁的使用顺序不同,第一个线程获得了第一把锁,第二个线程获得了第二把锁,那么就会导致第一个线程等待第二个线程解开第二把锁,而第二个线程又在等待第一个线程解开第一把锁.这样就形成了死锁.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class LockFile{
  void share_print(string id, int vaue){
    // this_thread::sleep_for(chrono::microseconds(10));
    lock_guard&amp;lt;mutex&amp;gt; guard(m_mu);
    lock_guard&amp;lt;mutex&amp;gt; guard2(m_mu2);
    cout &amp;lt;&amp;lt; &quot;from&quot; &amp;lt;&amp;lt; id &amp;lt;&amp;lt; &quot;:&quot; &amp;lt;&amp;lt; vaue &amp;lt;&amp;lt; endl; 
     }
     //上下两个方法同时使用了两把锁锁同一个文件,并且两把锁的获取顺序不同
   void share_print2(string id, int vaue){
    // this_thread::sleep_for(chrono::microseconds(10));
    lock_guard&amp;lt;mutex&amp;gt; guard2(m_mu2);
    lock_guard&amp;lt;mutex&amp;gt; guard(m_mu);
    cout &amp;lt;&amp;lt; &quot;from&quot; &amp;lt;&amp;lt; id &amp;lt;&amp;lt; &quot;:&quot; &amp;lt;&amp;lt; vaue &amp;lt;&amp;lt; endl; 
    }
};

void function_1(LockFile &amp;amp;lockfile){
    for(int i = 0; i &amp;lt; 100; i++){
        lockfile.shart_print(&quot;t1&quot;, i);    //t1调用的事 share_print()
    }

}
   
int main(){
LockFile lockfile;
thread t1(function_1, ref(lockfile))
for(int i = 0; i &amp;lt; 100; i++){
    lockfile.share_print2(&quot;main&quot;, i);    //main函数调用的是share_print2()
    }
}
执行以上代码,可能会出现卡死
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;解决和避免死锁
    1. 当使用两把或者以上锁的时候,留意调用的顺序.
    2. 当在使用锁的期间,尽量不要调用其他不明函数,除非你能保证这个函数里面没有任何的锁
    3. 当必须要使用两把或者以上的锁的时候,可以调用C++函数库提供的 std::lock()来保证锁的顺序.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    lock(m_mu, m_mu2);    //std::lock() 保证锁的顺序
    lock_guard&amp;lt;mutex&amp;gt; guard(m_mu, adopt_lock);    //目前还不是太明白后面一个参数的意思,大体上是:如果不加第二个参数,则guard对象会进行加锁和解锁操作,如果加了第二个参数,表示但前线程已经获得锁,只需要执行解锁操作.
    lock_guard&amp;lt;mutex&amp;gt; guard2(m_mu2, adopt_lock);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;ch5-uniquelock-和-lazy-initialization&quot;&gt;ch5 uniqueLock 和 lazy Initialization&lt;/h4&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;unique Lock
  除了使用guard_lock 来创建锁,我们还可以用 unique_lock来创建锁,并且 unique_lock 具有更高的灵活性.然而==牺牲的是性能.==&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void share_print(string id, int vaue){
    unique_lock&amp;lt;mutex&amp;gt; locker(m_mu);
    cout &amp;lt;&amp;lt; &quot;from&quot; &amp;lt;&amp;lt; id &amp;lt;&amp;lt; &quot;:&quot; &amp;lt;&amp;lt; vaue &amp;lt;&amp;lt; endl; 
    locker.unlock();    //unique_lock 可以提前解锁
    //...    其他逻辑代码
}
使用 unique_lock可以提前解锁.然后执行其他逻辑代码.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;也可以在想加锁的地方再加锁,而不是创建对象就加锁&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void share_print(string id, int vaue){
    unique_lock&amp;lt;mutex&amp;gt; locker(m_mu, defer_lock);    //defer_lock表示不上锁
    cout &amp;lt;&amp;lt; &quot;你好,我&quot;;
    this_thread::sleep_for(chrono::milliseconds(1));
    cout &amp;lt;&amp;lt; &quot;知道逆会断&quot; &amp;lt;&amp;lt; endl;
    locker.lock();
    cout &amp;lt;&amp;lt; &quot;from &quot; &amp;lt;&amp;lt; id;
    this_thread::sleep_for(chrono::milliseconds(20));  //此处即使休眠,也不会断开,使得其他线程可以使用这部分
    cout &amp;lt;&amp;lt; &quot;:&quot; &amp;lt;&amp;lt; vaue &amp;lt;&amp;lt; endl; 
    locker.unlock();    //unique_lock 可以提前解锁
    //...    其他逻辑代码
}
解锁之后还可以再次调用locker.lock();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;lock_guard 与 unique_lock的区别&lt;/p&gt;
  &lt;blockquote&gt;
    &lt;ol&gt;
      &lt;li&gt;lock_guard 和unique_lock 都不可以被复制,但是 unique_lock 可以被转移,但是lock_gurad 不可以&lt;/li&gt;
      &lt;li&gt;lock_guard 不可以重复的加解锁&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;unique_lock&amp;lt;mutex&amp;gt; locker2 = std::mive(locker);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;lazy initlialization 
  在之前我们创建的LockFile 类中, 每实例化一个对象,就打开一次文件,显然,这是不必要,因此,我们因该在有需要的时候才去打开.所以我们改造一下我们的类,使得文件只被打开一次&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void share_print(string id, int vaue){
    if(!f.is_open()){
        unique_lock&amp;lt;mutex&amp;gt; locker2(m_mu2);    //为防止多个线程同时打开一个文件,得加锁.
        f.open(&quot;log.txt&quot;);
    }
    unique_lock&amp;lt;mutex&amp;gt; locker(m_mu);
    cout &amp;lt;&amp;lt; &quot;from &quot; &amp;lt;&amp;lt; id &amp;lt;&amp;lt; &quot;:&quot; &amp;lt;&amp;lt; vaue &amp;lt;&amp;lt; endl; 
}    然而上述的加锁也不是安全的线程:如果一个线程刚进入if代码块,就被剥夺了cup权利,另一个线程进来,顺利的把文件打开了,此时第一个线程又获得了cup权利,那么就会导致这个文件打开两次.因此,正确的锁方法是锁住  ==f.is_open()==
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;然而这样还是会有一些新问题的.比如,每次程序调用share_print() 的时候都会去判断文件是不是被打开,还要创建个锁来保护这段判断代码的执行,这纯粹的是在消耗计算机的资源,并且做着无用.因此我们需要跟好的方法来解决这个问题.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class LockFile 
{
private:
    ofstream f;
    mutex m_mu;
    once_flag m_flag;
public:
    LockFile(){
    }
    void share_print(string id, int vaue){
    call_once(m_flag, [&amp;amp;]{f.open(&quot;log.txt&quot;);});    //文件只被打开一次,C++11一下不支持lambda
    unique_lock&amp;lt;mutex&amp;gt; locker(m_mu);
    cout &amp;lt;&amp;lt; &quot;from &quot; &amp;lt;&amp;lt; id &amp;lt;&amp;lt; &quot;:&quot; &amp;lt;&amp;lt; vaue &amp;lt;&amp;lt; endl; 
    }
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;ch6-条件变量&quot;&gt;ch6 条件变量&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;假设有如下程序&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;functional&amp;gt;
#include &amp;lt;iostream&amp;gt;
#include&amp;lt;mutex&amp;gt;
#include&amp;lt;string&amp;gt;
#include&amp;lt;thread&amp;gt;
#include&amp;lt;fstream&amp;gt;
#include&amp;lt;deque&amp;gt;
using namespace std;

std::deque&amp;lt;int&amp;gt; q;    //全局队列
mutex mu;


void fun1(){
    int count = 10;
    while(count &amp;gt; 0){
        std::unique_lock&amp;lt;mutex&amp;gt; locker1(mu);
        q.push_front(count);
        locker1.unlock();
        this_thread::sleep_for(chrono::milliseconds(20));
        count--;
    }
}

void fun2(){
    int data = 0;
    while(data != 1){
        std::unique_lock&amp;lt;mutex&amp;gt; locker2(mu);
        cout &amp;lt;&amp;lt; &quot;正在尝试读取数据!&quot; &amp;lt;&amp;lt;  count++ &amp;lt;&amp;lt; endl;
        if(!q.empty()){
            data = q.back();
            q.pop_back();
            locker2.unlock();
            cout &amp;lt;&amp;lt; &quot;成功读取数据:&quot; &amp;lt;&amp;lt; data &amp;lt;&amp;lt; endl;
        }else{
            cout &amp;lt;&amp;lt; &quot;数据读取失败!&quot; &amp;lt;&amp;lt; endl;
            locker2.unlock();
        }
    }
}

int main(int argc, char *argv[])
{
    thread t1(fun1);
    thread t2(fun2);
    t1.join();
    t2.join();
    return 0;
}
上述代码中,两个函数共同操作一个队列,一个函数负责入队,一个负责出队.两个线程同时操作一个变量,因此变量需要加锁.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但执行上述代码,我们可以看到,入队的函数只执行了10次,但是出队的函数却尝试了上万次的去读取数据,而真正度到数据的次数也就只有10次,可见做了多少无用工.究其原因,是出队函数不知道什么时候队列里面有东西,所以它只能不停的去尝试访问.从而造成了这种无用的消耗.那么有没有什么办法能让出队线程不这么一直不停的取访问,而是==入队线程==入队了之后==通知出队线程可以访问==呢?&lt;/p&gt;
&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;strong&gt;条件变量就是干这个的&lt;/strong&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;condition_variable&amp;gt;    //添加头文件
#include&amp;lt;functional&amp;gt;
#include &amp;lt;iostream&amp;gt;
#include&amp;lt;mutex&amp;gt;
#include&amp;lt;string&amp;gt;
#include&amp;lt;thread&amp;gt;
#include&amp;lt;fstream&amp;gt;
#include&amp;lt;deque&amp;gt;
using namespace std;

condition_variable cond;    //实例化条件变量对象
std::deque&amp;lt;int&amp;gt; q;    //全局队列
mutex mu;


void fun1(){
    int count = 10;
    while(count &amp;gt; 0){
        std::unique_lock&amp;lt;mutex&amp;gt; locker1(mu);
        q.push_front(count);
        cond.notify_one();    //唤醒一个线程
        locker1.unlock();
        this_thread::sleep_for(chrono::milliseconds(20));
        count--;
    }
}

void fun2(){
    int data = 0;
    while(data != 1){
        std::unique_lock&amp;lt;mutex&amp;gt; locker2(mu);
        cout &amp;lt;&amp;lt; &quot;正在尝试读取数据!&quot; &amp;lt;&amp;lt;  count++ &amp;lt;&amp;lt; endl;
        cond.wait(locker2, []{return !q.empty();}); //进入睡眠状态,直到有cond.notify_one(); 唤醒. 加参数是为了防止自启动
        data = q.back();
        q.pop_back();
        locker2.unlock();
        cout &amp;lt;&amp;lt; &quot;成功读取数据:&quot; &amp;lt;&amp;lt; data &amp;lt;&amp;lt; endl;
    }
}

int main(int argc, char *argv[])
{
    thread t1(fun1);
    thread t2(fun2);
    t1.join();
    t2.join();
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如上述这样,cond便成了生产者和消费者之间的条件.&lt;/p&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;ch7-futurepromise-和-async&quot;&gt;ch7 future,promise 和 async()&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;有时候,我们是需要两个线程之间交换数据的.比如下面程序:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
#include&amp;lt;thread&amp;gt;
using namespace std;
int add(int a){
cout &amp;lt;&amp;lt; &quot;results is : &quot; &amp;lt;&amp;lt; a + a &amp;lt;&amp;lt; endl;
    return a+a;
}
int main(){
    int a = 2;
    thread t1(add,std::ref(a));
    t1.join();
    return 0;
}
如果我们需要在主函数里面读取add函数的返回值,那么怎么办呢?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;这就用到async了,修改我们的代码如下&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;future&amp;gt;
int main(){
    int a = 2;
    future&amp;lt;int&amp;gt; fu = std::async(add, 4, a);
    cout &amp;lt;&amp;lt; fu.get() &amp;lt;&amp;lt; endl;    //fu.get()函数稚嫩被调用一次,调用多次程序崩溃. 
    return 0;
}
上述代码中,使用了async,他会异步执行一个可调用对象,并返回一个future对象.
-------- future可以简单的理解成:现在未知,但以后一定会有并且确定的东西
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;async不一定会创建线程,这取决于其第一个参数.&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;std::launch::referred:不创建线程,只是延期启动可调用对象.当fu.get()方法被调用的时候,才启动可调用对象&lt;/li&gt;
      &lt;li&gt;std::launch::async: 启动一个线程来调用这个可可调用对像&lt;/li&gt;
      &lt;li&gt;
        &lt;table&gt;
          &lt;tbody&gt;
            &lt;tr&gt;
              &lt;td&gt;std::launch::referred&lt;/td&gt;
              &lt;td&gt;std::launch::async: 默认是这个,不任何参数&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;从父线程中获取变量
   上面的例子是父线程获取子线程的变量,如果子线程相获取父线程的变量,就得用另一种方法.修改代码如下:&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int add(int a, future&amp;lt;int&amp;gt;&amp;amp; f){
    int b = f.get();    // 1号注释
    cout &amp;lt;&amp;lt; &quot;results is : &quot; &amp;lt;&amp;lt; a + b &amp;lt;&amp;lt; endl;
    return a+b;
}
 
int main(){
    int a;
    std::promise&amp;lt;int&amp;gt; p;    // 2号注释
    future&amp;lt;int&amp;gt; f = p.get_future();    // 3号注释
    future&amp;lt;int&amp;gt; fu = std::async(add, 4, ref(f));
    a = 20;
    p.set_value(a);    // 4 号注释
    cout &amp;lt;&amp;lt; fu.get() &amp;lt;&amp;lt; endl; 
    return 0;
}
上述代码中,我们是先创建的线程,在往线程里面传递参数(注释4的地方传递的参数),实现了子线程读取父线程中变量的目的.有一下地方需要注意.
1. 注释2的地方表示给个承诺.由p产生的一个future对象在将来一定会给其设置值.所以就一定要有注释4这样设置值的地方存在.从而实现承诺p.
2.如果注释4处没有给值实现承诺,那么当在其他线程中访问p产生的future对象的时候就会抛出 std::future_error::broken_promise 异常
3. promise和future只能被移动,不能被复制
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;上面我们说了, future是不能复制的,只能移动.也就是说,当main线程的第一个子线程取走future之后,main里面就不存在这个future了.当main有多个子线程的时候并且同时需要这个future的时候,就 只有一个线程能得到.解决方法有:&lt;/p&gt;
  &lt;blockquote&gt;
    &lt;ol&gt;
      &lt;li&gt;创建多个promise 和多个 future, 分别传给不同的线程.(重复)&lt;/li&gt;
      &lt;li&gt;使用c++提供的future.share();方法,返回一个shared_future 对象.shared_future可以被复制.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int add(int a, shared_future&amp;lt;int&amp;gt; f){    //由于shared_futurek可以被复制,可以通过值传递
    int b = f.get();
    cout &amp;lt;&amp;lt; &quot;results is : &quot; &amp;lt;&amp;lt; a + b &amp;lt;&amp;lt; endl;
    return a+b;
}

int main(){
    int a;
    std::promise&amp;lt;int&amp;gt; p;
    future&amp;lt;int&amp;gt; f = p.get_future();    //实例化一个future
    shared_future&amp;lt;int&amp;gt; fs = f.share();    //由f实例化出shared_future
    future&amp;lt;int&amp;gt; fu = std::async(add, 4, fs);    //4个线程同时使用一个shared_future
    future&amp;lt;int&amp;gt; fu1 = std::async(add, 4,fs);    //可以只用值传递
    future&amp;lt;int&amp;gt; fu2 = std::async(add, 4,fs);
    future&amp;lt;int&amp;gt; fu3 = std::async(add, 4,fs);
    a = 20;
    p.set_value(a);
    cout &amp;lt;&amp;lt; fu.get() &amp;lt;&amp;lt; endl;   
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;ch8-可调用对象&quot;&gt;ch8 可调用对象&lt;/h4&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;可调用对象有5种:
      &lt;blockquote&gt;
        &lt;ol&gt;
          &lt;li&gt;函数.&lt;/li&gt;
          &lt;li&gt;函数指针.&lt;/li&gt;
          &lt;li&gt;lambda表达式&lt;/li&gt;
          &lt;li&gt;bind函数&lt;/li&gt;
          &lt;li&gt;重载了函数调用运算符的对象.
   函数调用运算符:()&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/blockquote&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;创建线程的9中方法:假设存在 class A a; 和 function f(); A 重载了’()’运算符.
      &lt;blockquote&gt;
        &lt;ul&gt;
          &lt;li&gt;thread t1(a);    //用a的拷贝&lt;/li&gt;
          &lt;li&gt;thread t2(std::ref(a));   //用a的引用&lt;/li&gt;
          &lt;li&gt;thread t3(std::move(a));    //用a.&lt;/li&gt;
          &lt;li&gt;thread t4(A());    //A的构造函数,一个临时的A()对象&lt;/li&gt;
          &lt;li&gt;thread t5(f);    //用函数f&lt;/li&gt;
          &lt;li&gt;thread t6(&amp;amp;f)    //用函数的引用    //函数名本身就是函数的指针变量,入同数组名就是该数组的指针变量一样&lt;/li&gt;
          &lt;li&gt;thread t7(&lt;a href=&quot;&quot;&gt;&lt;/a&gt;{});    //使用lambda函数&lt;/li&gt;
          &lt;li&gt;thread t8(&amp;amp;A::f, a);    //使用对象a.f()函数拷贝&lt;/li&gt;
          &lt;li&gt;thread t9(&amp;amp;A::f, &amp;amp;a);    //使用a.f() 函数的引用&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/blockquote&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;暂时更新到此&quot;&gt;暂时更新到此&lt;/h2&gt;

</description>
        <pubDate>Fri, 10 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/C++-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/C++-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
        
        <category>c/c++</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>使用github备份vim和sublime配置</title>
        <description>&lt;p&gt;sublime使用的时间长了，渐渐的就积累了一些有用甚至离不开的插件。但是有时候系统会出点问题，或者换电脑什么的，这时候要想在找回那个曾经的sublime就不那么容易了。好在我们可以把我们的配置备份起来。需要用的时候直接下载就好。&lt;/p&gt;

&lt;p&gt;首先，我们选择的是使用github来备份我们的sublime，我的目的是把windows下的配置备份一下，然后去linux下使用。当然，还不知道能不能直接跨到linux下使用。先备份了再说。&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;准备&quot;&gt;准备&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;电脑上安装好git&lt;/li&gt;
    &lt;li&gt;在&lt;a href=&quot;http://www.github.com&quot;&gt;github&lt;/a&gt;上注册一个账号&lt;/li&gt;
    &lt;li&gt;本机上安装个sublime(有点废话)&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;创建本地仓库&quot;&gt;创建本地仓库&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;启动gitshell，并切换到sublime(vim)的配置目录
      &lt;ul&gt;
        &lt;li&gt;切换目录的命令是 cd ‘path’,比如，我要切换E盘，就输入 cd e:&lt;/li&gt;
        &lt;li&gt;sublime的配置文件以及安装包存放路径，在sublime菜单项：preferences-&amp;gt;browse pacakges.这样打开的是sublime的包目录，再往上一级就是整个sublime的配置以及包目录了。
vim的配置文件在~/.vimrc, 安装的插件等在~/.vim文件夹下．&lt;/li&gt;
        &lt;li&gt;git 的仓库是一个文件夹，所以我们选择~/.vim作为仓库目录，移动~/.vimrc到~/.vim文件夹下，并且重命名为vimrc(去掉’.’,git是不会添加隐藏文件的)．&lt;/li&gt;
        &lt;li&gt;在用cd 命令切换目录的时候，记得把路径用单引号引起来，因为可能路径有空格，就找不到了。&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;切换到配置目录以后，执行命令&lt;code class=&quot;highlighter-rouge&quot;&gt;git init&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;该命令的作用是将当前文件夹初始化为仓库&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;然后执行&lt;code class=&quot;highlighter-rouge&quot;&gt;git add .&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;该命令添加所有的文件到缓存区。&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;然后执行&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m &quot;say something&quot;&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;该命令的作用是将缓存区的东西提交到仓库&lt;/li&gt;
        &lt;li&gt;双引号里面的内容可以随便写，一般是写一些关于这次提交的说明
          &lt;h3 id=&quot;创建远程仓库&quot;&gt;创建远程仓库&lt;/h3&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;登陆&lt;a href=&quot;http://github.com&quot;&gt;github&lt;/a&gt;,个人主页的右上角有个”new  repository”的绿色按钮。然后点击创建一个新的repository，输入名字，确定。完成之后会创建一个空repository，很明显的地方能看到一个ssh码。格式是git@github.com:accountName/repositoryName.git，复制该ssh 码。
      &lt;ul&gt;
        &lt;li&gt;将上述的acountName和repositoryName对应成自己的。下同&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;将远程仓库和本地仓库连接。执行命令&lt;code class=&quot;highlighter-rouge&quot;&gt;git remote add origin git@github.com:accountName/repositoryName.git&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;remote是git远程主机的操作命令，后面的add就是添加一个远程主机的意思了。&lt;/li&gt;
        &lt;li&gt;origin是一个名字，是你远程主机的名字，这个名字只是一种约定，你也可以起你自己想要的名字。&lt;/li&gt;
        &lt;li&gt;后面那一串就是之前准备的ssh码了&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;将本地仓库推送到远程仓库。 &lt;code class=&quot;highlighter-rouge&quot;&gt;git -u push origin master&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;origin是你要推到的目标主机，master是你要推送的本地分支，git默认的分支就叫master。&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;至此，本地的配置都备份到远程的仓库了&lt;/p&gt;
&lt;h3 id=&quot;恢复配置&quot;&gt;恢复配置&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;如果机器安装了git。
      &lt;ol&gt;
        &lt;li&gt;运行gitshell，切换到sublime配置所在目录或～目录．&lt;/li&gt;
        &lt;li&gt;执行&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone git@github.com:accountName/repositoryName.git&lt;/code&gt;&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/li&gt;
    &lt;li&gt;如果没有安装git，就去github上下载zip包，然后解压到sublime配置目录就行
3.重命名：将下载下来的文件夹重命名成sublime的文件夹 名字，就是之前我们初始化仓库的那个名字，vim 的话重命名为.vim,然后再把.vim文件夹里面的vimrc链接到～目录：
&lt;code class=&quot;highlighter-rouge&quot;&gt;link vimrc ../.vimrc&lt;/code&gt;&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;这样，配置就回复了．往后如果有修改的配置记得备份一下就行，不怕换电脑丢了．&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/%E4%BD%BF%E7%94%A8github%E7%AE%A1%E7%90%86vim%E5%92%8Csublime%E9%85%8D%E7%BD%AE/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/%E4%BD%BF%E7%94%A8github%E7%AE%A1%E7%90%86vim%E5%92%8Csublime%E9%85%8D%E7%BD%AE/</guid>
        
        <category>none</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>配置java运行环境和开发环境的配置(Windiws&amp;Linux)</title>
        <description>&lt;p&gt;本学期开了java课，要运行java程序，或者进行java开发，需要将电脑上的java环境配一下．&lt;/p&gt;

&lt;h4 id=&quot;jre&quot;&gt;JRE:&lt;/h4&gt;
&lt;p&gt;jre(java runtime environment),java运行环境，包含了&lt;strong&gt;java&lt;/strong&gt;程序运行所需的套件和环境，是java程序能正常运行的必要条件．&lt;/p&gt;
&lt;h4 id=&quot;jdk&quot;&gt;JDK:&lt;/h4&gt;
&lt;p&gt;jdk(java development kit),java开发套件，包含了&lt;strong&gt;jre&lt;/strong&gt;,java&lt;strong&gt;编译调试程序&lt;/strong&gt;和其他一些类库等.&lt;/p&gt;

&lt;h2 id=&quot;下载&quot;&gt;下载:&lt;/h2&gt;
&lt;p&gt;甲骨文官网下载:&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot;&gt;http://www.oracle.com/technetwork/java/javase/downloads/index.html&lt;/a&gt;
&lt;strong&gt;注意选择jkd或jre,只有jre不能进行java的编译&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装jdk&quot;&gt;安装(JDK)&lt;/h2&gt;
&lt;h4 id=&quot;1java&quot;&gt;1.java&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;解压下载好的文件到任何你想要安装的目录，此处假设该目录为JAVA_HOME&lt;/li&gt;
  &lt;li&gt;进入JAVA_HOME/bin下，可以看到一个可执行文件java.&lt;/li&gt;
  &lt;li&gt;在该目录打开控制台(windows下按住shift，然后单击右键，可以看到弹出的菜单中会有＇在此处打开命令窗口＇的选项)，然后输入java,便可看到java弹出的帮助．
    &lt;h4 id=&quot;2javac&quot;&gt;2.javac&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;windows下进入JAVA_HOME/lib，可以看到该目录下有个javac的可执行文件，如果这个目录没有，便在JAVA_HOME/bin目录下&lt;/li&gt;
  &lt;li&gt;linux下进入JAVA_HOME/bin,也就是和java在用一个目录，可以看到javac可执行文件.&lt;/li&gt;
  &lt;li&gt;在此目录打开控制台，输入javac，可以看到弹出的帮助信息．
如果上述两个命令都能弹出帮助，则&lt;strong&gt;说明JDK安装完成&lt;/strong&gt;．
    &lt;blockquote&gt;
      &lt;p&gt;错误帮助:如果提示找不到命令，请检查两个地方:&lt;/p&gt;

      &lt;ul&gt;
        &lt;li&gt;
          &lt;p&gt;上述目录下是否有java和javac的可执行文件．&lt;/p&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;p&gt;控制台所在目录是否和上述文件是同一个目录(控制台光标前面的路径就是当前所在目录)&lt;/p&gt;
          &lt;h2 id=&quot;配置&quot;&gt;配置&lt;/h2&gt;
          &lt;p&gt;上面已经安装好了JDK,也就是我们的电脑可以编译和运行java代码了，但是我们需要到java和javac的目录下才能运行，这样势必会造成一定的不方便，所以我们需要进行一定的配置，使得在任何目录都能正常执行java和javac.这个过程叫做&lt;strong&gt;java环境变量的配置&lt;/strong&gt;.&lt;/p&gt;
          &lt;h4 id=&quot;linux&quot;&gt;linux:&lt;/h4&gt;
          &lt;p&gt;编辑/etc/profile,在最末尾添加如下代码:&lt;/p&gt;
          &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export JAVA_HOME=xxx/xxx/xxx
# JAVA_HOME为你的jdk安装目录
export PATH=$PATH:$JAVA_HOME/bin
# bin目录是编译，执行等程序的所在目录
export CLASSPATH=.:$JAVA_HOME/lib
# lib目录是java自带类库等所在目录
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;          &lt;/div&gt;
          &lt;p&gt;保存后执行下述命令,是配置生效:&lt;/p&gt;
          &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo source /etc/profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;          &lt;/div&gt;
          &lt;p&gt;然后在任何地方运行java和javac,都能正常弹出帮助了，说名配置完成．&lt;/p&gt;
          &lt;h4 id=&quot;windows&quot;&gt;Windows:&lt;/h4&gt;
          &lt;p&gt;参考图文教程,&lt;a href=&quot;http://jingyan.baidu.com/article/925f8cb836b26ac0dde0569e.html&quot;&gt;点这里&lt;/a&gt;！
配置完成之后也可以在任何地方打开控制台（之前打开的记得&lt;strong&gt;重启一下控制台&lt;/strong&gt;），都能正常识别命令，说明环境配置完成．&lt;/p&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 10 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/setup-jdk-and-jre/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/setup-jdk-and-jre/</guid>
        
        <category>none</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>我的第一篇博客</title>
        <description>&lt;h1 id=&quot;welcome&quot;&gt;Welcome!&lt;/h1&gt;
&lt;p&gt;先占坑，日后补上！&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://drcbin.com/blog/first-blog/</link>
        <guid isPermaLink="true">http://drcbin.com/blog/first-blog/</guid>
        
        
        <category>life</category>
        
      </item>
    
    
  </channel>
</rss>
